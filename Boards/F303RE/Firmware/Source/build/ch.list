
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

08000200 <Reset_Handler>:
 8000200:	b672      	cpsid	i
 8000202:	483b      	ldr	r0, [pc, #236]	; (80002f0 <endfiniloop+0x6>)
 8000204:	f380 8809 	msr	PSP, r0
 8000208:	483a      	ldr	r0, [pc, #232]	; (80002f4 <endfiniloop+0xa>)
 800020a:	f64e 5108 	movw	r1, #60680	; 0xed08
 800020e:	f2ce 0100 	movt	r1, #57344	; 0xe000
 8000212:	6008      	str	r0, [r1, #0]
 8000214:	f240 0000 	movw	r0, #0
 8000218:	f2cc 0000 	movt	r0, #49152	; 0xc000
 800021c:	f64e 7134 	movw	r1, #61236	; 0xef34
 8000220:	f2ce 0100 	movt	r1, #57344	; 0xe000
 8000224:	6008      	str	r0, [r1, #0]
 8000226:	f3bf 8f4f 	dsb	sy
 800022a:	f3bf 8f6f 	isb	sy
 800022e:	f240 0000 	movw	r0, #0
 8000232:	f2c0 00f0 	movt	r0, #240	; 0xf0
 8000236:	f64e 5188 	movw	r1, #60808	; 0xed88
 800023a:	f2ce 0100 	movt	r1, #57344	; 0xe000
 800023e:	6008      	str	r0, [r1, #0]
 8000240:	f3bf 8f4f 	dsb	sy
 8000244:	f3bf 8f6f 	isb	sy
 8000248:	f04f 0000 	mov.w	r0, #0
 800024c:	eee1 0a10 	vmsr	fpscr, r0
 8000250:	f64e 713c 	movw	r1, #61244	; 0xef3c
 8000254:	f2ce 0100 	movt	r1, #57344	; 0xe000
 8000258:	6008      	str	r0, [r1, #0]
 800025a:	2006      	movs	r0, #6
 800025c:	f380 8814 	msr	CONTROL, r0
 8000260:	f3bf 8f6f 	isb	sy
 8000264:	f004 ff0c 	bl	8005080 <__core_init>
 8000268:	f004 fe3a 	bl	8004ee0 <__early_init>
 800026c:	4822      	ldr	r0, [pc, #136]	; (80002f8 <endfiniloop+0xe>)
 800026e:	4923      	ldr	r1, [pc, #140]	; (80002fc <endfiniloop+0x12>)
 8000270:	4a23      	ldr	r2, [pc, #140]	; (8000300 <endfiniloop+0x16>)

08000272 <msloop>:
 8000272:	4291      	cmp	r1, r2
 8000274:	bf3c      	itt	cc
 8000276:	f841 0b04 	strcc.w	r0, [r1], #4
 800027a:	f7ff bffa 	bcc.w	8000272 <msloop>
 800027e:	4921      	ldr	r1, [pc, #132]	; (8000304 <endfiniloop+0x1a>)
 8000280:	4a1b      	ldr	r2, [pc, #108]	; (80002f0 <endfiniloop+0x6>)

08000282 <psloop>:
 8000282:	4291      	cmp	r1, r2
 8000284:	bf3c      	itt	cc
 8000286:	f841 0b04 	strcc.w	r0, [r1], #4
 800028a:	f7ff bffa 	bcc.w	8000282 <psloop>
 800028e:	491e      	ldr	r1, [pc, #120]	; (8000308 <endfiniloop+0x1e>)
 8000290:	4a1e      	ldr	r2, [pc, #120]	; (800030c <endfiniloop+0x22>)
 8000292:	4b1f      	ldr	r3, [pc, #124]	; (8000310 <endfiniloop+0x26>)

08000294 <dloop>:
 8000294:	429a      	cmp	r2, r3
 8000296:	bf3e      	ittt	cc
 8000298:	f851 0b04 	ldrcc.w	r0, [r1], #4
 800029c:	f842 0b04 	strcc.w	r0, [r2], #4
 80002a0:	f7ff bff8 	bcc.w	8000294 <dloop>
 80002a4:	2000      	movs	r0, #0
 80002a6:	491b      	ldr	r1, [pc, #108]	; (8000314 <endfiniloop+0x2a>)
 80002a8:	4a1b      	ldr	r2, [pc, #108]	; (8000318 <endfiniloop+0x2e>)

080002aa <bloop>:
 80002aa:	4291      	cmp	r1, r2
 80002ac:	bf3c      	itt	cc
 80002ae:	f841 0b04 	strcc.w	r0, [r1], #4
 80002b2:	f7ff bffa 	bcc.w	80002aa <bloop>
 80002b6:	f004 fea3 	bl	8005000 <__init_ram_areas>
 80002ba:	f004 fed9 	bl	8005070 <__late_init>
 80002be:	4c17      	ldr	r4, [pc, #92]	; (800031c <endfiniloop+0x32>)
 80002c0:	4d17      	ldr	r5, [pc, #92]	; (8000320 <endfiniloop+0x36>)

080002c2 <initloop>:
 80002c2:	42ac      	cmp	r4, r5
 80002c4:	f280 8005 	bge.w	80002d2 <endinitloop>
 80002c8:	f854 1b04 	ldr.w	r1, [r4], #4
 80002cc:	4788      	blx	r1
 80002ce:	f7ff bff8 	b.w	80002c2 <initloop>

080002d2 <endinitloop>:
 80002d2:	f000 fce5 	bl	8000ca0 <main>
 80002d6:	4c13      	ldr	r4, [pc, #76]	; (8000324 <endfiniloop+0x3a>)
 80002d8:	4d13      	ldr	r5, [pc, #76]	; (8000328 <endfiniloop+0x3e>)

080002da <finiloop>:
 80002da:	42ac      	cmp	r4, r5
 80002dc:	f280 8005 	bge.w	80002ea <endfiniloop>
 80002e0:	f854 1b04 	ldr.w	r1, [r4], #4
 80002e4:	4788      	blx	r1
 80002e6:	f7ff bff8 	b.w	80002da <finiloop>

080002ea <endfiniloop>:
 80002ea:	f004 beb9 	b.w	8005060 <__default_exit>
 80002ee:	0000      	.short	0x0000
 80002f0:	20000800 	.word	0x20000800
 80002f4:	08000000 	.word	0x08000000
 80002f8:	55555555 	.word	0x55555555
 80002fc:	20000000 	.word	0x20000000
 8000300:	20000400 	.word	0x20000400
 8000304:	20000400 	.word	0x20000400
 8000308:	0800668c 	.word	0x0800668c
 800030c:	20000800 	.word	0x20000800
 8000310:	20000c4c 	.word	0x20000c4c
 8000314:	20000c50 	.word	0x20000c50
 8000318:	2000f9dc 	.word	0x2000f9dc
 800031c:	08000200 	.word	0x08000200
 8000320:	08000200 	.word	0x08000200
 8000324:	08000200 	.word	0x08000200
 8000328:	08000200 	.word	0x08000200

0800032c <_port_switch>:
 800032c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000330:	ed2d 8a10 	vpush	{s16-s31}
 8000334:	f8c1 d00c 	str.w	sp, [r1, #12]
 8000338:	68c3      	ldr	r3, [r0, #12]
 800033a:	469d      	mov	sp, r3
 800033c:	ecbd 8a10 	vpop	{s16-s31}
 8000340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000344 <_port_thread_start>:
 8000344:	2300      	movs	r3, #0
 8000346:	f383 8811 	msr	BASEPRI, r3
 800034a:	4628      	mov	r0, r5
 800034c:	47a0      	blx	r4
 800034e:	2000      	movs	r0, #0
 8000350:	f004 fe0e 	bl	8004f70 <chThdExit>

08000354 <_port_switch_from_isr>:
 8000354:	f004 fe34 	bl	8004fc0 <chSchDoReschedule>

08000358 <_port_exit_from_isr>:
 8000358:	df00      	svc	0
 800035a:	e7fe      	b.n	800035a <_port_exit_from_isr+0x2>

0800035c <__aeabi_drsub>:
 800035c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000360:	e002      	b.n	8000368 <__adddf3>
 8000362:	bf00      	nop

08000364 <__aeabi_dsub>:
 8000364:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000368 <__adddf3>:
 8000368:	b530      	push	{r4, r5, lr}
 800036a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800036e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000372:	ea94 0f05 	teq	r4, r5
 8000376:	bf08      	it	eq
 8000378:	ea90 0f02 	teqeq	r0, r2
 800037c:	bf1f      	itttt	ne
 800037e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000382:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000386:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800038a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038e:	f000 80e2 	beq.w	8000556 <__adddf3+0x1ee>
 8000392:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000396:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800039a:	bfb8      	it	lt
 800039c:	426d      	neglt	r5, r5
 800039e:	dd0c      	ble.n	80003ba <__adddf3+0x52>
 80003a0:	442c      	add	r4, r5
 80003a2:	ea80 0202 	eor.w	r2, r0, r2
 80003a6:	ea81 0303 	eor.w	r3, r1, r3
 80003aa:	ea82 0000 	eor.w	r0, r2, r0
 80003ae:	ea83 0101 	eor.w	r1, r3, r1
 80003b2:	ea80 0202 	eor.w	r2, r0, r2
 80003b6:	ea81 0303 	eor.w	r3, r1, r3
 80003ba:	2d36      	cmp	r5, #54	; 0x36
 80003bc:	bf88      	it	hi
 80003be:	bd30      	pophi	{r4, r5, pc}
 80003c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003d0:	d002      	beq.n	80003d8 <__adddf3+0x70>
 80003d2:	4240      	negs	r0, r0
 80003d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003e4:	d002      	beq.n	80003ec <__adddf3+0x84>
 80003e6:	4252      	negs	r2, r2
 80003e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ec:	ea94 0f05 	teq	r4, r5
 80003f0:	f000 80a7 	beq.w	8000542 <__adddf3+0x1da>
 80003f4:	f1a4 0401 	sub.w	r4, r4, #1
 80003f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80003fc:	db0d      	blt.n	800041a <__adddf3+0xb2>
 80003fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000402:	fa22 f205 	lsr.w	r2, r2, r5
 8000406:	1880      	adds	r0, r0, r2
 8000408:	f141 0100 	adc.w	r1, r1, #0
 800040c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000410:	1880      	adds	r0, r0, r2
 8000412:	fa43 f305 	asr.w	r3, r3, r5
 8000416:	4159      	adcs	r1, r3
 8000418:	e00e      	b.n	8000438 <__adddf3+0xd0>
 800041a:	f1a5 0520 	sub.w	r5, r5, #32
 800041e:	f10e 0e20 	add.w	lr, lr, #32
 8000422:	2a01      	cmp	r2, #1
 8000424:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000428:	bf28      	it	cs
 800042a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800042e:	fa43 f305 	asr.w	r3, r3, r5
 8000432:	18c0      	adds	r0, r0, r3
 8000434:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	d507      	bpl.n	800044e <__adddf3+0xe6>
 800043e:	f04f 0e00 	mov.w	lr, #0
 8000442:	f1dc 0c00 	rsbs	ip, ip, #0
 8000446:	eb7e 0000 	sbcs.w	r0, lr, r0
 800044a:	eb6e 0101 	sbc.w	r1, lr, r1
 800044e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000452:	d31b      	bcc.n	800048c <__adddf3+0x124>
 8000454:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000458:	d30c      	bcc.n	8000474 <__adddf3+0x10c>
 800045a:	0849      	lsrs	r1, r1, #1
 800045c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000460:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000464:	f104 0401 	add.w	r4, r4, #1
 8000468:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800046c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000470:	f080 809a 	bcs.w	80005a8 <__adddf3+0x240>
 8000474:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000478:	bf08      	it	eq
 800047a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800047e:	f150 0000 	adcs.w	r0, r0, #0
 8000482:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000486:	ea41 0105 	orr.w	r1, r1, r5
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000490:	4140      	adcs	r0, r0
 8000492:	eb41 0101 	adc.w	r1, r1, r1
 8000496:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800049a:	f1a4 0401 	sub.w	r4, r4, #1
 800049e:	d1e9      	bne.n	8000474 <__adddf3+0x10c>
 80004a0:	f091 0f00 	teq	r1, #0
 80004a4:	bf04      	itt	eq
 80004a6:	4601      	moveq	r1, r0
 80004a8:	2000      	moveq	r0, #0
 80004aa:	fab1 f381 	clz	r3, r1
 80004ae:	bf08      	it	eq
 80004b0:	3320      	addeq	r3, #32
 80004b2:	f1a3 030b 	sub.w	r3, r3, #11
 80004b6:	f1b3 0220 	subs.w	r2, r3, #32
 80004ba:	da0c      	bge.n	80004d6 <__adddf3+0x16e>
 80004bc:	320c      	adds	r2, #12
 80004be:	dd08      	ble.n	80004d2 <__adddf3+0x16a>
 80004c0:	f102 0c14 	add.w	ip, r2, #20
 80004c4:	f1c2 020c 	rsb	r2, r2, #12
 80004c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80004cc:	fa21 f102 	lsr.w	r1, r1, r2
 80004d0:	e00c      	b.n	80004ec <__adddf3+0x184>
 80004d2:	f102 0214 	add.w	r2, r2, #20
 80004d6:	bfd8      	it	le
 80004d8:	f1c2 0c20 	rsble	ip, r2, #32
 80004dc:	fa01 f102 	lsl.w	r1, r1, r2
 80004e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004e4:	bfdc      	itt	le
 80004e6:	ea41 010c 	orrle.w	r1, r1, ip
 80004ea:	4090      	lslle	r0, r2
 80004ec:	1ae4      	subs	r4, r4, r3
 80004ee:	bfa2      	ittt	ge
 80004f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004f4:	4329      	orrge	r1, r5
 80004f6:	bd30      	popge	{r4, r5, pc}
 80004f8:	ea6f 0404 	mvn.w	r4, r4
 80004fc:	3c1f      	subs	r4, #31
 80004fe:	da1c      	bge.n	800053a <__adddf3+0x1d2>
 8000500:	340c      	adds	r4, #12
 8000502:	dc0e      	bgt.n	8000522 <__adddf3+0x1ba>
 8000504:	f104 0414 	add.w	r4, r4, #20
 8000508:	f1c4 0220 	rsb	r2, r4, #32
 800050c:	fa20 f004 	lsr.w	r0, r0, r4
 8000510:	fa01 f302 	lsl.w	r3, r1, r2
 8000514:	ea40 0003 	orr.w	r0, r0, r3
 8000518:	fa21 f304 	lsr.w	r3, r1, r4
 800051c:	ea45 0103 	orr.w	r1, r5, r3
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	f1c4 040c 	rsb	r4, r4, #12
 8000526:	f1c4 0220 	rsb	r2, r4, #32
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 f304 	lsl.w	r3, r1, r4
 8000532:	ea40 0003 	orr.w	r0, r0, r3
 8000536:	4629      	mov	r1, r5
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	fa21 f004 	lsr.w	r0, r1, r4
 800053e:	4629      	mov	r1, r5
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	f094 0f00 	teq	r4, #0
 8000546:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800054a:	bf06      	itte	eq
 800054c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000550:	3401      	addeq	r4, #1
 8000552:	3d01      	subne	r5, #1
 8000554:	e74e      	b.n	80003f4 <__adddf3+0x8c>
 8000556:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055a:	bf18      	it	ne
 800055c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000560:	d029      	beq.n	80005b6 <__adddf3+0x24e>
 8000562:	ea94 0f05 	teq	r4, r5
 8000566:	bf08      	it	eq
 8000568:	ea90 0f02 	teqeq	r0, r2
 800056c:	d005      	beq.n	800057a <__adddf3+0x212>
 800056e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000572:	bf04      	itt	eq
 8000574:	4619      	moveq	r1, r3
 8000576:	4610      	moveq	r0, r2
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	ea91 0f03 	teq	r1, r3
 800057e:	bf1e      	ittt	ne
 8000580:	2100      	movne	r1, #0
 8000582:	2000      	movne	r0, #0
 8000584:	bd30      	popne	{r4, r5, pc}
 8000586:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800058a:	d105      	bne.n	8000598 <__adddf3+0x230>
 800058c:	0040      	lsls	r0, r0, #1
 800058e:	4149      	adcs	r1, r1
 8000590:	bf28      	it	cs
 8000592:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000596:	bd30      	pop	{r4, r5, pc}
 8000598:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800059c:	bf3c      	itt	cc
 800059e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005a2:	bd30      	popcc	{r4, r5, pc}
 80005a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005b0:	f04f 0000 	mov.w	r0, #0
 80005b4:	bd30      	pop	{r4, r5, pc}
 80005b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ba:	bf1a      	itte	ne
 80005bc:	4619      	movne	r1, r3
 80005be:	4610      	movne	r0, r2
 80005c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005c4:	bf1c      	itt	ne
 80005c6:	460b      	movne	r3, r1
 80005c8:	4602      	movne	r2, r0
 80005ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005ce:	bf06      	itte	eq
 80005d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005d4:	ea91 0f03 	teqeq	r1, r3
 80005d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	bf00      	nop

080005e0 <__aeabi_ui2d>:
 80005e0:	f090 0f00 	teq	r0, #0
 80005e4:	bf04      	itt	eq
 80005e6:	2100      	moveq	r1, #0
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f4:	f04f 0500 	mov.w	r5, #0
 80005f8:	f04f 0100 	mov.w	r1, #0
 80005fc:	e750      	b.n	80004a0 <__adddf3+0x138>
 80005fe:	bf00      	nop

08000600 <__aeabi_i2d>:
 8000600:	f090 0f00 	teq	r0, #0
 8000604:	bf04      	itt	eq
 8000606:	2100      	moveq	r1, #0
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000610:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000614:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000618:	bf48      	it	mi
 800061a:	4240      	negmi	r0, r0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e73e      	b.n	80004a0 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_f2d>:
 8000624:	0042      	lsls	r2, r0, #1
 8000626:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800062a:	ea4f 0131 	mov.w	r1, r1, rrx
 800062e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000632:	bf1f      	itttt	ne
 8000634:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000638:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800063c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000640:	4770      	bxne	lr
 8000642:	f092 0f00 	teq	r2, #0
 8000646:	bf14      	ite	ne
 8000648:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000654:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	e720      	b.n	80004a0 <__adddf3+0x138>
 800065e:	bf00      	nop

08000660 <__aeabi_ul2d>:
 8000660:	ea50 0201 	orrs.w	r2, r0, r1
 8000664:	bf08      	it	eq
 8000666:	4770      	bxeq	lr
 8000668:	b530      	push	{r4, r5, lr}
 800066a:	f04f 0500 	mov.w	r5, #0
 800066e:	e00a      	b.n	8000686 <__aeabi_l2d+0x16>

08000670 <__aeabi_l2d>:
 8000670:	ea50 0201 	orrs.w	r2, r0, r1
 8000674:	bf08      	it	eq
 8000676:	4770      	bxeq	lr
 8000678:	b530      	push	{r4, r5, lr}
 800067a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800067e:	d502      	bpl.n	8000686 <__aeabi_l2d+0x16>
 8000680:	4240      	negs	r0, r0
 8000682:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000686:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800068a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800068e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000692:	f43f aedc 	beq.w	800044e <__adddf3+0xe6>
 8000696:	f04f 0203 	mov.w	r2, #3
 800069a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800069e:	bf18      	it	ne
 80006a0:	3203      	addne	r2, #3
 80006a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006a6:	bf18      	it	ne
 80006a8:	3203      	addne	r2, #3
 80006aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ae:	f1c2 0320 	rsb	r3, r2, #32
 80006b2:	fa00 fc03 	lsl.w	ip, r0, r3
 80006b6:	fa20 f002 	lsr.w	r0, r0, r2
 80006ba:	fa01 fe03 	lsl.w	lr, r1, r3
 80006be:	ea40 000e 	orr.w	r0, r0, lr
 80006c2:	fa21 f102 	lsr.w	r1, r1, r2
 80006c6:	4414      	add	r4, r2
 80006c8:	e6c1      	b.n	800044e <__adddf3+0xe6>
 80006ca:	bf00      	nop

080006cc <__aeabi_dmul>:
 80006cc:	b570      	push	{r4, r5, r6, lr}
 80006ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006da:	bf1d      	ittte	ne
 80006dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006e0:	ea94 0f0c 	teqne	r4, ip
 80006e4:	ea95 0f0c 	teqne	r5, ip
 80006e8:	f000 f8de 	bleq	80008a8 <__aeabi_dmul+0x1dc>
 80006ec:	442c      	add	r4, r5
 80006ee:	ea81 0603 	eor.w	r6, r1, r3
 80006f2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006f6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006fa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006fe:	bf18      	it	ne
 8000700:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800070c:	d038      	beq.n	8000780 <__aeabi_dmul+0xb4>
 800070e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000712:	f04f 0500 	mov.w	r5, #0
 8000716:	fbe1 e502 	umlal	lr, r5, r1, r2
 800071a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800071e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000722:	f04f 0600 	mov.w	r6, #0
 8000726:	fbe1 5603 	umlal	r5, r6, r1, r3
 800072a:	f09c 0f00 	teq	ip, #0
 800072e:	bf18      	it	ne
 8000730:	f04e 0e01 	orrne.w	lr, lr, #1
 8000734:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000738:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800073c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000740:	d204      	bcs.n	800074c <__aeabi_dmul+0x80>
 8000742:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000746:	416d      	adcs	r5, r5
 8000748:	eb46 0606 	adc.w	r6, r6, r6
 800074c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000750:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000754:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000758:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800075c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000760:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000764:	bf88      	it	hi
 8000766:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800076a:	d81e      	bhi.n	80007aa <__aeabi_dmul+0xde>
 800076c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000770:	bf08      	it	eq
 8000772:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000776:	f150 0000 	adcs.w	r0, r0, #0
 800077a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800077e:	bd70      	pop	{r4, r5, r6, pc}
 8000780:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000784:	ea46 0101 	orr.w	r1, r6, r1
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000794:	bfc2      	ittt	gt
 8000796:	ebd4 050c 	rsbsgt	r5, r4, ip
 800079a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800079e:	bd70      	popgt	{r4, r5, r6, pc}
 80007a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007a4:	f04f 0e00 	mov.w	lr, #0
 80007a8:	3c01      	subs	r4, #1
 80007aa:	f300 80ab 	bgt.w	8000904 <__aeabi_dmul+0x238>
 80007ae:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007b2:	bfde      	ittt	le
 80007b4:	2000      	movle	r0, #0
 80007b6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007ba:	bd70      	pople	{r4, r5, r6, pc}
 80007bc:	f1c4 0400 	rsb	r4, r4, #0
 80007c0:	3c20      	subs	r4, #32
 80007c2:	da35      	bge.n	8000830 <__aeabi_dmul+0x164>
 80007c4:	340c      	adds	r4, #12
 80007c6:	dc1b      	bgt.n	8000800 <__aeabi_dmul+0x134>
 80007c8:	f104 0414 	add.w	r4, r4, #20
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f305 	lsl.w	r3, r0, r5
 80007d4:	fa20 f004 	lsr.w	r0, r0, r4
 80007d8:	fa01 f205 	lsl.w	r2, r1, r5
 80007dc:	ea40 0002 	orr.w	r0, r0, r2
 80007e0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ec:	fa21 f604 	lsr.w	r6, r1, r4
 80007f0:	eb42 0106 	adc.w	r1, r2, r6
 80007f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007f8:	bf08      	it	eq
 80007fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007fe:	bd70      	pop	{r4, r5, r6, pc}
 8000800:	f1c4 040c 	rsb	r4, r4, #12
 8000804:	f1c4 0520 	rsb	r5, r4, #32
 8000808:	fa00 f304 	lsl.w	r3, r0, r4
 800080c:	fa20 f005 	lsr.w	r0, r0, r5
 8000810:	fa01 f204 	lsl.w	r2, r1, r4
 8000814:	ea40 0002 	orr.w	r0, r0, r2
 8000818:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800081c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000820:	f141 0100 	adc.w	r1, r1, #0
 8000824:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000828:	bf08      	it	eq
 800082a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082e:	bd70      	pop	{r4, r5, r6, pc}
 8000830:	f1c4 0520 	rsb	r5, r4, #32
 8000834:	fa00 f205 	lsl.w	r2, r0, r5
 8000838:	ea4e 0e02 	orr.w	lr, lr, r2
 800083c:	fa20 f304 	lsr.w	r3, r0, r4
 8000840:	fa01 f205 	lsl.w	r2, r1, r5
 8000844:	ea43 0302 	orr.w	r3, r3, r2
 8000848:	fa21 f004 	lsr.w	r0, r1, r4
 800084c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000850:	fa21 f204 	lsr.w	r2, r1, r4
 8000854:	ea20 0002 	bic.w	r0, r0, r2
 8000858:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800085c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000860:	bf08      	it	eq
 8000862:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f094 0f00 	teq	r4, #0
 800086c:	d10f      	bne.n	800088e <__aeabi_dmul+0x1c2>
 800086e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000872:	0040      	lsls	r0, r0, #1
 8000874:	eb41 0101 	adc.w	r1, r1, r1
 8000878:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800087c:	bf08      	it	eq
 800087e:	3c01      	subeq	r4, #1
 8000880:	d0f7      	beq.n	8000872 <__aeabi_dmul+0x1a6>
 8000882:	ea41 0106 	orr.w	r1, r1, r6
 8000886:	f095 0f00 	teq	r5, #0
 800088a:	bf18      	it	ne
 800088c:	4770      	bxne	lr
 800088e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000892:	0052      	lsls	r2, r2, #1
 8000894:	eb43 0303 	adc.w	r3, r3, r3
 8000898:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800089c:	bf08      	it	eq
 800089e:	3d01      	subeq	r5, #1
 80008a0:	d0f7      	beq.n	8000892 <__aeabi_dmul+0x1c6>
 80008a2:	ea43 0306 	orr.w	r3, r3, r6
 80008a6:	4770      	bx	lr
 80008a8:	ea94 0f0c 	teq	r4, ip
 80008ac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b0:	bf18      	it	ne
 80008b2:	ea95 0f0c 	teqne	r5, ip
 80008b6:	d00c      	beq.n	80008d2 <__aeabi_dmul+0x206>
 80008b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008bc:	bf18      	it	ne
 80008be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008c2:	d1d1      	bne.n	8000868 <__aeabi_dmul+0x19c>
 80008c4:	ea81 0103 	eor.w	r1, r1, r3
 80008c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008cc:	f04f 0000 	mov.w	r0, #0
 80008d0:	bd70      	pop	{r4, r5, r6, pc}
 80008d2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d6:	bf06      	itte	eq
 80008d8:	4610      	moveq	r0, r2
 80008da:	4619      	moveq	r1, r3
 80008dc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e0:	d019      	beq.n	8000916 <__aeabi_dmul+0x24a>
 80008e2:	ea94 0f0c 	teq	r4, ip
 80008e6:	d102      	bne.n	80008ee <__aeabi_dmul+0x222>
 80008e8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008ec:	d113      	bne.n	8000916 <__aeabi_dmul+0x24a>
 80008ee:	ea95 0f0c 	teq	r5, ip
 80008f2:	d105      	bne.n	8000900 <__aeabi_dmul+0x234>
 80008f4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008f8:	bf1c      	itt	ne
 80008fa:	4610      	movne	r0, r2
 80008fc:	4619      	movne	r1, r3
 80008fe:	d10a      	bne.n	8000916 <__aeabi_dmul+0x24a>
 8000900:	ea81 0103 	eor.w	r1, r1, r3
 8000904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000908:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800090c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000910:	f04f 0000 	mov.w	r0, #0
 8000914:	bd70      	pop	{r4, r5, r6, pc}
 8000916:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800091a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800091e:	bd70      	pop	{r4, r5, r6, pc}

08000920 <__aeabi_ddiv>:
 8000920:	b570      	push	{r4, r5, r6, lr}
 8000922:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000926:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800092a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800092e:	bf1d      	ittte	ne
 8000930:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000934:	ea94 0f0c 	teqne	r4, ip
 8000938:	ea95 0f0c 	teqne	r5, ip
 800093c:	f000 f8a7 	bleq	8000a8e <__aeabi_ddiv+0x16e>
 8000940:	eba4 0405 	sub.w	r4, r4, r5
 8000944:	ea81 0e03 	eor.w	lr, r1, r3
 8000948:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000950:	f000 8088 	beq.w	8000a64 <__aeabi_ddiv+0x144>
 8000954:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000958:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800095c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000960:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000964:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000968:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800096c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000970:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000974:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000978:	429d      	cmp	r5, r3
 800097a:	bf08      	it	eq
 800097c:	4296      	cmpeq	r6, r2
 800097e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000982:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000986:	d202      	bcs.n	800098e <__aeabi_ddiv+0x6e>
 8000988:	085b      	lsrs	r3, r3, #1
 800098a:	ea4f 0232 	mov.w	r2, r2, rrx
 800098e:	1ab6      	subs	r6, r6, r2
 8000990:	eb65 0503 	sbc.w	r5, r5, r3
 8000994:	085b      	lsrs	r3, r3, #1
 8000996:	ea4f 0232 	mov.w	r2, r2, rrx
 800099a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800099e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80009a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009aa:	bf22      	ittt	cs
 80009ac:	1ab6      	subcs	r6, r6, r2
 80009ae:	4675      	movcs	r5, lr
 80009b0:	ea40 000c 	orrcs.w	r0, r0, ip
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80009be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c2:	bf22      	ittt	cs
 80009c4:	1ab6      	subcs	r6, r6, r2
 80009c6:	4675      	movcs	r5, lr
 80009c8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009cc:	085b      	lsrs	r3, r3, #1
 80009ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009da:	bf22      	ittt	cs
 80009dc:	1ab6      	subcs	r6, r6, r2
 80009de:	4675      	movcs	r5, lr
 80009e0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009e4:	085b      	lsrs	r3, r3, #1
 80009e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f2:	bf22      	ittt	cs
 80009f4:	1ab6      	subcs	r6, r6, r2
 80009f6:	4675      	movcs	r5, lr
 80009f8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009fc:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a00:	d018      	beq.n	8000a34 <__aeabi_ddiv+0x114>
 8000a02:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a06:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a0a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a0e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a12:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a16:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a1a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a1e:	d1c0      	bne.n	80009a2 <__aeabi_ddiv+0x82>
 8000a20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a24:	d10b      	bne.n	8000a3e <__aeabi_ddiv+0x11e>
 8000a26:	ea41 0100 	orr.w	r1, r1, r0
 8000a2a:	f04f 0000 	mov.w	r0, #0
 8000a2e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a32:	e7b6      	b.n	80009a2 <__aeabi_ddiv+0x82>
 8000a34:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a38:	bf04      	itt	eq
 8000a3a:	4301      	orreq	r1, r0
 8000a3c:	2000      	moveq	r0, #0
 8000a3e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a42:	bf88      	it	hi
 8000a44:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a48:	f63f aeaf 	bhi.w	80007aa <__aeabi_dmul+0xde>
 8000a4c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a50:	bf04      	itt	eq
 8000a52:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a56:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a5a:	f150 0000 	adcs.w	r0, r0, #0
 8000a5e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a62:	bd70      	pop	{r4, r5, r6, pc}
 8000a64:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a68:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a6c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a70:	bfc2      	ittt	gt
 8000a72:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a76:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a7a:	bd70      	popgt	{r4, r5, r6, pc}
 8000a7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a80:	f04f 0e00 	mov.w	lr, #0
 8000a84:	3c01      	subs	r4, #1
 8000a86:	e690      	b.n	80007aa <__aeabi_dmul+0xde>
 8000a88:	ea45 0e06 	orr.w	lr, r5, r6
 8000a8c:	e68d      	b.n	80007aa <__aeabi_dmul+0xde>
 8000a8e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a92:	ea94 0f0c 	teq	r4, ip
 8000a96:	bf08      	it	eq
 8000a98:	ea95 0f0c 	teqeq	r5, ip
 8000a9c:	f43f af3b 	beq.w	8000916 <__aeabi_dmul+0x24a>
 8000aa0:	ea94 0f0c 	teq	r4, ip
 8000aa4:	d10a      	bne.n	8000abc <__aeabi_ddiv+0x19c>
 8000aa6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000aaa:	f47f af34 	bne.w	8000916 <__aeabi_dmul+0x24a>
 8000aae:	ea95 0f0c 	teq	r5, ip
 8000ab2:	f47f af25 	bne.w	8000900 <__aeabi_dmul+0x234>
 8000ab6:	4610      	mov	r0, r2
 8000ab8:	4619      	mov	r1, r3
 8000aba:	e72c      	b.n	8000916 <__aeabi_dmul+0x24a>
 8000abc:	ea95 0f0c 	teq	r5, ip
 8000ac0:	d106      	bne.n	8000ad0 <__aeabi_ddiv+0x1b0>
 8000ac2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ac6:	f43f aefd 	beq.w	80008c4 <__aeabi_dmul+0x1f8>
 8000aca:	4610      	mov	r0, r2
 8000acc:	4619      	mov	r1, r3
 8000ace:	e722      	b.n	8000916 <__aeabi_dmul+0x24a>
 8000ad0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ad4:	bf18      	it	ne
 8000ad6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ada:	f47f aec5 	bne.w	8000868 <__aeabi_dmul+0x19c>
 8000ade:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ae2:	f47f af0d 	bne.w	8000900 <__aeabi_dmul+0x234>
 8000ae6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000aea:	f47f aeeb 	bne.w	80008c4 <__aeabi_dmul+0x1f8>
 8000aee:	e712      	b.n	8000916 <__aeabi_dmul+0x24a>

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__gedf2>:
 8000b90:	f04f 3cff 	mov.w	ip, #4294967295
 8000b94:	e006      	b.n	8000ba4 <__cmpdf2+0x4>
 8000b96:	bf00      	nop

08000b98 <__ledf2>:
 8000b98:	f04f 0c01 	mov.w	ip, #1
 8000b9c:	e002      	b.n	8000ba4 <__cmpdf2+0x4>
 8000b9e:	bf00      	nop

08000ba0 <__cmpdf2>:
 8000ba0:	f04f 0c01 	mov.w	ip, #1
 8000ba4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ba8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb4:	bf18      	it	ne
 8000bb6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000bba:	d01b      	beq.n	8000bf4 <__cmpdf2+0x54>
 8000bbc:	b001      	add	sp, #4
 8000bbe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000bc2:	bf0c      	ite	eq
 8000bc4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000bc8:	ea91 0f03 	teqne	r1, r3
 8000bcc:	bf02      	ittt	eq
 8000bce:	ea90 0f02 	teqeq	r0, r2
 8000bd2:	2000      	moveq	r0, #0
 8000bd4:	4770      	bxeq	lr
 8000bd6:	f110 0f00 	cmn.w	r0, #0
 8000bda:	ea91 0f03 	teq	r1, r3
 8000bde:	bf58      	it	pl
 8000be0:	4299      	cmppl	r1, r3
 8000be2:	bf08      	it	eq
 8000be4:	4290      	cmpeq	r0, r2
 8000be6:	bf2c      	ite	cs
 8000be8:	17d8      	asrcs	r0, r3, #31
 8000bea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000bee:	f040 0001 	orr.w	r0, r0, #1
 8000bf2:	4770      	bx	lr
 8000bf4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bf8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bfc:	d102      	bne.n	8000c04 <__cmpdf2+0x64>
 8000bfe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c02:	d107      	bne.n	8000c14 <__cmpdf2+0x74>
 8000c04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c0c:	d1d6      	bne.n	8000bbc <__cmpdf2+0x1c>
 8000c0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c12:	d0d3      	beq.n	8000bbc <__cmpdf2+0x1c>
 8000c14:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_cdrcmple>:
 8000c1c:	4684      	mov	ip, r0
 8000c1e:	4610      	mov	r0, r2
 8000c20:	4662      	mov	r2, ip
 8000c22:	468c      	mov	ip, r1
 8000c24:	4619      	mov	r1, r3
 8000c26:	4663      	mov	r3, ip
 8000c28:	e000      	b.n	8000c2c <__aeabi_cdcmpeq>
 8000c2a:	bf00      	nop

08000c2c <__aeabi_cdcmpeq>:
 8000c2c:	b501      	push	{r0, lr}
 8000c2e:	f7ff ffb7 	bl	8000ba0 <__cmpdf2>
 8000c32:	2800      	cmp	r0, #0
 8000c34:	bf48      	it	mi
 8000c36:	f110 0f00 	cmnmi.w	r0, #0
 8000c3a:	bd01      	pop	{r0, pc}

08000c3c <__aeabi_dcmpeq>:
 8000c3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c40:	f7ff fff4 	bl	8000c2c <__aeabi_cdcmpeq>
 8000c44:	bf0c      	ite	eq
 8000c46:	2001      	moveq	r0, #1
 8000c48:	2000      	movne	r0, #0
 8000c4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c4e:	bf00      	nop

08000c50 <__aeabi_dcmplt>:
 8000c50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c54:	f7ff ffea 	bl	8000c2c <__aeabi_cdcmpeq>
 8000c58:	bf34      	ite	cc
 8000c5a:	2001      	movcc	r0, #1
 8000c5c:	2000      	movcs	r0, #0
 8000c5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c62:	bf00      	nop

08000c64 <__aeabi_dcmple>:
 8000c64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c68:	f7ff ffe0 	bl	8000c2c <__aeabi_cdcmpeq>
 8000c6c:	bf94      	ite	ls
 8000c6e:	2001      	movls	r0, #1
 8000c70:	2000      	movhi	r0, #0
 8000c72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c76:	bf00      	nop

08000c78 <__aeabi_dcmpge>:
 8000c78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c7c:	f7ff ffce 	bl	8000c1c <__aeabi_cdrcmple>
 8000c80:	bf94      	ite	ls
 8000c82:	2001      	movls	r0, #1
 8000c84:	2000      	movhi	r0, #0
 8000c86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c8a:	bf00      	nop

08000c8c <__aeabi_dcmpgt>:
 8000c8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c90:	f7ff ffc4 	bl	8000c1c <__aeabi_cdrcmple>
 8000c94:	bf34      	ite	cc
 8000c96:	2001      	movcc	r0, #1
 8000c98:	2000      	movcs	r0, #0
 8000c9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c9e:	bf00      	nop

08000ca0 <main>:
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAHB(0xFFFFFFFF);
 8000ca0:	4bbe      	ldr	r3, [pc, #760]	; (8000f9c <main+0x2fc>)
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8000ca2:	48bf      	ldr	r0, [pc, #764]	; (8000fa0 <main+0x300>)
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAHB(0xFFFFFFFF);
 8000ca4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ca6:	f04f 31ff 	mov.w	r1, #4294967295
 8000caa:	2200      	movs	r2, #0
        break;
    }
 }

// Program entry point
int main(void) {
 8000cac:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000cb0:	6299      	str	r1, [r3, #40]	; 0x28
 8000cb2:	629a      	str	r2, [r3, #40]	; 0x28
  rccResetAPB1(0xFFFFFFFF);
 8000cb4:	691c      	ldr	r4, [r3, #16]
 8000cb6:	6119      	str	r1, [r3, #16]
 8000cb8:	611a      	str	r2, [r3, #16]
  rccResetAPB2(0xFFFFFFFF);
 8000cba:	68dc      	ldr	r4, [r3, #12]
 8000cbc:	60d9      	str	r1, [r3, #12]
 8000cbe:	60da      	str	r2, [r3, #12]

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 8000cc0:	69d9      	ldr	r1, [r3, #28]
 8000cc2:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000cc6:	61d9      	str	r1, [r3, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8000cc8:	6801      	ldr	r1, [r0, #0]
 8000cca:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000cce:	6001      	str	r1, [r0, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL){
 8000cd0:	6a19      	ldr	r1, [r3, #32]
 8000cd2:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8000cd6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8000cda:	b08d      	sub	sp, #52	; 0x34
 8000cdc:	d003      	beq.n	8000ce6 <main+0x46>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 8000cde:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8000ce2:	6219      	str	r1, [r3, #32]
    RCC->BDCR = 0;
 8000ce4:	621a      	str	r2, [r3, #32]
#endif

#if STM32_RTCSEL != STM32_RTCSEL_NOCLOCK
  /* If the backup domain hasn't been initialized yet then proceed with
     initialization.*/
  if ((RCC->BDCR & RCC_BDCR_RTCEN) == 0) {
 8000ce6:	4bad      	ldr	r3, [pc, #692]	; (8000f9c <main+0x2fc>)
 8000ce8:	6a1a      	ldr	r2, [r3, #32]
 8000cea:	0412      	lsls	r2, r2, #16
 8000cec:	d407      	bmi.n	8000cfe <main+0x5e>
    /* Selects clock source.*/
    RCC->BDCR |= STM32_RTCSEL;
 8000cee:	6a1a      	ldr	r2, [r3, #32]
 8000cf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cf4:	621a      	str	r2, [r3, #32]

    /* RTC clock enabled.*/
    RCC->BDCR |= RCC_BDCR_RTCEN;
 8000cf6:	6a1a      	ldr	r2, [r3, #32]
 8000cf8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000cfc:	621a      	str	r2, [r3, #32]
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 8000cfe:	4da7      	ldr	r5, [pc, #668]	; (8000f9c <main+0x2fc>)

#if STM32_HAS_USB
  /* USB IRQ relocated to not conflict with CAN.*/
  SYSCFG->CFGR1 |= SYSCFG_CFGR1_USB_IT_RMP;
 8000d00:	4aa8      	ldr	r2, [pc, #672]	; (8000fa4 <main+0x304>)
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 8000d02:	69a9      	ldr	r1, [r5, #24]

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8000d04:	f8df 92e4 	ldr.w	r9, [pc, #740]	; 8000fec <main+0x34c>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000d08:	f8df a2e4 	ldr.w	sl, [pc, #740]	; 8000ff0 <main+0x350>
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8000d0c:	f8df 82e4 	ldr.w	r8, [pc, #740]	; 8000ff4 <main+0x354>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000d10:	f8df c2e4 	ldr.w	ip, [pc, #740]	; 8000ff8 <main+0x358>
 8000d14:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 8000ffc <main+0x35c>
 8000d18:	f8df b2e4 	ldr.w	fp, [pc, #740]	; 8001000 <main+0x360>
 8000d1c:	4fa2      	ldr	r7, [pc, #648]	; (8000fa8 <main+0x308>)
 8000d1e:	48a3      	ldr	r0, [pc, #652]	; (8000fac <main+0x30c>)
 8000d20:	4ba3      	ldr	r3, [pc, #652]	; (8000fb0 <main+0x310>)
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
}
#else
void sdObjectInit(SerialDriver *sdp) {

  sdp->vmt = &vmt;
 8000d22:	4ea4      	ldr	r6, [pc, #656]	; (8000fb4 <main+0x314>)
 8000d24:	f041 0101 	orr.w	r1, r1, #1
 8000d28:	61a9      	str	r1, [r5, #24]

#if STM32_HAS_USB
  /* USB IRQ relocated to not conflict with CAN.*/
  SYSCFG->CFGR1 |= SYSCFG_CFGR1_USB_IT_RMP;
 8000d2a:	6811      	ldr	r1, [r2, #0]
 8000d2c:	f041 0120 	orr.w	r1, r1, #32
 8000d30:	6011      	str	r1, [r2, #0]
  rccEnableAHB(AHB_EN_MASK, TRUE);
  RCC->AHBLPENR |= AHB_LPEN_MASK;
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
 8000d32:	6969      	ldr	r1, [r5, #20]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000d34:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
  rccEnableAHB(AHB_EN_MASK, TRUE);
  RCC->AHBLPENR |= AHB_LPEN_MASK;
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
 8000d38:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000d3c:	2400      	movs	r4, #0
  rccEnableAHB(AHB_EN_MASK, TRUE);
  RCC->AHBLPENR |= AHB_LPEN_MASK;
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
 8000d3e:	6169      	str	r1, [r5, #20]
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 8000d40:	f46f 610a 	mvn.w	r1, #2208	; 0x8a0
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000d44:	6054      	str	r4, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000d46:	6091      	str	r1, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 8000d48:	f8c2 900c 	str.w	r9, [r2, #12]
  gpiop->ODR     = config->odr;
 8000d4c:	f64f 71df 	movw	r1, #65503	; 0xffdf
  gpiop->AFRL    = config->afrl;
 8000d50:	f44f 49ee 	mov.w	r9, #30464	; 0x7700
static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 8000d54:	6151      	str	r1, [r2, #20]
  gpiop->AFRL    = config->afrl;
 8000d56:	f8c2 9020 	str.w	r9, [r2, #32]
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 8000d5a:	f04f 31ff 	mov.w	r1, #4294967295
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
 8000d5e:	6254      	str	r4, [r2, #36]	; 0x24

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8000d60:	f04f 3955 	mov.w	r9, #1431655765	; 0x55555555
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8000d64:	f8c2 8000 	str.w	r8, [r2]
static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 8000d68:	f64f 72ff 	movw	r2, #65535	; 0xffff
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8000d6c:	f04f 0880 	mov.w	r8, #128	; 0x80
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000d70:	f8ca 4004 	str.w	r4, [sl, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000d74:	f8ca 1008 	str.w	r1, [sl, #8]
  gpiop->PUPDR   = config->pupdr;
 8000d78:	f8ca 900c 	str.w	r9, [sl, #12]
  gpiop->ODR     = config->odr;
 8000d7c:	f8ca 2014 	str.w	r2, [sl, #20]
  gpiop->AFRL    = config->afrl;
 8000d80:	f8ca 4020 	str.w	r4, [sl, #32]
  gpiop->AFRH    = config->afrh;
 8000d84:	f8ca 4024 	str.w	r4, [sl, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000d88:	f8ca 8000 	str.w	r8, [sl]

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8000d8c:	f8df a274 	ldr.w	sl, [pc, #628]	; 8001004 <main+0x364>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000d90:	f8cc 4004 	str.w	r4, [ip, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000d94:	f8cc 1008 	str.w	r1, [ip, #8]
  gpiop->PUPDR   = config->pupdr;
 8000d98:	f8cc a00c 	str.w	sl, [ip, #12]
 * @init
 */
void extObjectInit(EXTDriver *extp) {

  extp->state  = EXT_STOP;
  extp->config = NULL;
 8000d9c:	f8df a268 	ldr.w	sl, [pc, #616]	; 8001008 <main+0x368>
  gpiop->ODR     = config->odr;
 8000da0:	f8cc 2014 	str.w	r2, [ip, #20]
  gpiop->AFRL    = config->afrl;
 8000da4:	f8cc 4020 	str.w	r4, [ip, #32]
  gpiop->AFRH    = config->afrh;
 8000da8:	f8cc 4024 	str.w	r4, [ip, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000dac:	f8cc 4000 	str.w	r4, [ip]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000db0:	f8ce 4004 	str.w	r4, [lr, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000db4:	f8ce 1008 	str.w	r1, [lr, #8]
  gpiop->PUPDR   = config->pupdr;
 8000db8:	f8ce 900c 	str.w	r9, [lr, #12]
  gpiop->ODR     = config->odr;
 8000dbc:	f8ce 2014 	str.w	r2, [lr, #20]
  gpiop->AFRL    = config->afrl;
 8000dc0:	f8ce 4020 	str.w	r4, [lr, #32]
  gpiop->AFRH    = config->afrh;
 8000dc4:	f8ce 4024 	str.w	r4, [lr, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000dc8:	f8ce 4000 	str.w	r4, [lr]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000dcc:	f8cb 4004 	str.w	r4, [fp, #4]
 8000dd0:	f8ca 4004 	str.w	r4, [sl, #4]
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
  gptp->config = NULL;
 8000dd4:	f8df a234 	ldr.w	sl, [pc, #564]	; 800100c <main+0x36c>
  gpiop->OSPEEDR = config->ospeedr;
 8000dd8:	f8cb 1008 	str.w	r1, [fp, #8]
 8000ddc:	f8ca 4004 	str.w	r4, [sl, #4]
  gpiop->PUPDR   = config->pupdr;
 8000de0:	f8cb 900c 	str.w	r9, [fp, #12]
  gpiop->ODR     = config->odr;
 8000de4:	f8cb 2014 	str.w	r2, [fp, #20]
  gpiop->AFRL    = config->afrl;
 8000de8:	f8cb 4020 	str.w	r4, [fp, #32]
  gpiop->AFRH    = config->afrh;
 8000dec:	f8cb 4024 	str.w	r4, [fp, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000df0:	f8cb 4000 	str.w	r4, [fp]

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8000df4:	f8df b218 	ldr.w	fp, [pc, #536]	; 8001010 <main+0x370>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000df8:	607c      	str	r4, [r7, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000dfa:	60b9      	str	r1, [r7, #8]
  gpiop->PUPDR   = config->pupdr;
 8000dfc:	f8c7 b00c 	str.w	fp, [r7, #12]
  gpiop->ODR     = config->odr;
 8000e00:	617a      	str	r2, [r7, #20]
  gpiop->AFRL    = config->afrl;
 8000e02:	623c      	str	r4, [r7, #32]
  gpiop->AFRH    = config->afrh;
 8000e04:	627c      	str	r4, [r7, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000e06:	603c      	str	r4, [r7, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000e08:	6044      	str	r4, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000e0a:	6084      	str	r4, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 8000e0c:	f8c0 900c 	str.w	r9, [r0, #12]
  gpiop->ODR     = config->odr;
 8000e10:	6142      	str	r2, [r0, #20]
  gpiop->AFRL    = config->afrl;
 8000e12:	6204      	str	r4, [r0, #32]
  gpiop->AFRH    = config->afrh;
 8000e14:	6244      	str	r4, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000e16:	6004      	str	r4, [r0, #0]
  gptObjectInit(&GPTD2);
#endif

#if STM32_GPT_USE_TIM3
  /* Driver initialization.*/
  GPTD3.tim = STM32_TIM3;
 8000e18:	4867      	ldr	r0, [pc, #412]	; (8000fb8 <main+0x318>)
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000e1a:	605c      	str	r4, [r3, #4]
 8000e1c:	f8ca 000c 	str.w	r0, [sl, #12]
 *
 * @init
 */
void extObjectInit(EXTDriver *extp) {

  extp->state  = EXT_STOP;
 8000e20:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 8001008 <main+0x368>
  gpiop->OSPEEDR = config->ospeedr;
 8000e24:	609c      	str	r4, [r3, #8]
 8000e26:	2701      	movs	r7, #1

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000e28:	f8df e1e8 	ldr.w	lr, [pc, #488]	; 8001014 <main+0x374>
  gpiop->PUPDR   = config->pupdr;
 8000e2c:	f8c3 900c 	str.w	r9, [r3, #12]
 8000e30:	46b4      	mov	ip, r6
  gpiop->ODR     = config->odr;
 8000e32:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 8000e34:	621c      	str	r4, [r3, #32]
  gpiop->AFRH    = config->afrh;
 8000e36:	625c      	str	r4, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000e38:	601c      	str	r4, [r3, #0]
 8000e3a:	f88a 7000 	strb.w	r7, [sl]
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
 8000e3e:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 800100c <main+0x36c>
 8000e42:	485e      	ldr	r0, [pc, #376]	; (8000fbc <main+0x31c>)
 8000e44:	f88a 7000 	strb.w	r7, [sl]
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8000e48:	f04f 0910 	mov.w	r9, #16
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000e4c:	2340      	movs	r3, #64	; 0x40

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000e4e:	22c0      	movs	r2, #192	; 0xc0
 8000e50:	f84c 0b04 	str.w	r0, [ip], #4
 */
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8000e54:	6174      	str	r4, [r6, #20]
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8000e56:	f8c6 9038 	str.w	r9, [r6, #56]	; 0x38
 8000e5a:	f88e 2326 	strb.w	r2, [lr, #806]	; 0x326
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000e5e:	f8ce 3184 	str.w	r3, [lr, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8000e62:	f8ce 3004 	str.w	r3, [lr, #4]

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8000e66:	f8d5 a01c 	ldr.w	sl, [r5, #28]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8000e6a:	4855      	ldr	r0, [pc, #340]	; (8000fc0 <main+0x320>)
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8000e6c:	f8c6 c004 	str.w	ip, [r6, #4]

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8000e70:	ea4a 0c07 	orr.w	ip, sl, r7
 8000e74:	f8c5 c01c 	str.w	ip, [r5, #28]
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8000e78:	4b52      	ldr	r3, [pc, #328]	; (8000fc4 <main+0x324>)
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
 8000e7a:	4a53      	ldr	r2, [pc, #332]	; (8000fc8 <main+0x328>)

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8000e7c:	f8d0 c008 	ldr.w	ip, [r0, #8]
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8000e80:	61b3      	str	r3, [r6, #24]
  iqp->q_rdptr   = bp;
 8000e82:	6273      	str	r3, [r6, #36]	; 0x24
  iqp->q_wrptr   = bp;
 8000e84:	6233      	str	r3, [r6, #32]
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
 8000e86:	63f2      	str	r2, [r6, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 8000e88:	64b2      	str	r2, [r6, #72]	; 0x48
  oqp->q_wrptr   = bp;
 8000e8a:	6472      	str	r2, [r6, #68]	; 0x44
  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 8000e8c:	444b      	add	r3, r9
  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8000e8e:	444a      	add	r2, r9
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8000e90:	4d4e      	ldr	r5, [pc, #312]	; (8000fcc <main+0x32c>)
  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 8000e92:	61f3      	str	r3, [r6, #28]
  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8000e94:	6432      	str	r2, [r6, #64]	; 0x40

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8000e96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8000e9a:	ea4c 0c07 	orr.w	ip, ip, r7
  oqp->q_notify  = onfy;
 8000e9e:	f8df b178 	ldr.w	fp, [pc, #376]	; 8001018 <main+0x378>

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2);
  iqObjectInit(&SD2.iqueue, sd_in_buf2, sizeof sd_in_buf2, NULL, &SD2);
  oqObjectInit(&SD2.oqueue, sd_out_buf2, sizeof sd_out_buf2, notify2, &SD2);
  SD2.usart = USART2;
 8000ea2:	f8df a178 	ldr.w	sl, [pc, #376]	; 800101c <main+0x37c>
  SD2.clock = STM32_USART2CLK;
 8000ea6:	4a4a      	ldr	r2, [pc, #296]	; (8000fd0 <main+0x330>)
 8000ea8:	f8c6 b04c 	str.w	fp, [r6, #76]	; 0x4c

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2);
  iqObjectInit(&SD2.iqueue, sd_in_buf2, sizeof sd_in_buf2, NULL, &SD2);
  oqObjectInit(&SD2.oqueue, sd_out_buf2, sizeof sd_out_buf2, notify2, &SD2);
  SD2.usart = USART2;
 8000eac:	f8c6 a054 	str.w	sl, [r6, #84]	; 0x54
  SD2.clock = STM32_USART2CLK;
 8000eb0:	65b2      	str	r2, [r6, #88]	; 0x58
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 8000eb2:	7237      	strb	r7, [r6, #8]
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 8000eb4:	62b4      	str	r4, [r6, #40]	; 0x28
  iqp->q_link    = link;
 8000eb6:	62f6      	str	r6, [r6, #44]	; 0x2c
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 8000eb8:	6536      	str	r6, [r6, #80]	; 0x50
 8000eba:	f106 0a0c 	add.w	sl, r6, #12
 8000ebe:	f8c0 c008 	str.w	ip, [r0, #8]
 8000ec2:	f106 0230 	add.w	r2, r6, #48	; 0x30
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000ec6:	f04f 5c80 	mov.w	ip, #268435456	; 0x10000000

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8000eca:	f640 6b0f 	movw	fp, #3599	; 0xe0f
 8000ece:	f8c3 b028 	str.w	fp, [r3, #40]	; 0x28
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8000ed2:	a806      	add	r0, sp, #24
 8000ed4:	f8c6 a00c 	str.w	sl, [r6, #12]
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8000ed8:	62d9      	str	r1, [r3, #44]	; 0x2c
  tqp->prev = (thread_t *)tqp;
 8000eda:	f8c6 a010 	str.w	sl, [r6, #16]
  STM32_ST_TIM->CCMR1  = 0;
 8000ede:	619c      	str	r4, [r3, #24]
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8000ee0:	f105 0a1c 	add.w	sl, r5, #28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8000ee4:	6332      	str	r2, [r6, #48]	; 0x30
  STM32_ST_TIM->CCR[0] = 0;
 8000ee6:	635c      	str	r4, [r3, #52]	; 0x34
  tqp->prev = (thread_t *)tqp;
 8000ee8:	6372      	str	r2, [r6, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8000eea:	60dc      	str	r4, [r3, #12]

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8000eec:	2200      	movs	r2, #0
  STM32_ST_TIM->CR2    = 0;
 8000eee:	605c      	str	r4, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8000ef0:	615f      	str	r7, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8000ef2:	601f      	str	r7, [r3, #0]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000ef4:	f88e 831c 	strb.w	r8, [lr, #796]	; 0x31c
 8000ef8:	2300      	movs	r3, #0
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000efa:	f8ce c180 	str.w	ip, [lr, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8000efe:	f8ce c000 	str.w	ip, [lr]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8000f02:	602d      	str	r5, [r5, #0]
  tqp->prev = (thread_t *)tqp;
 8000f04:	606d      	str	r5, [r5, #4]
 8000f06:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8000f0a:	9106      	str	r1, [sp, #24]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.delta = (systime_t)-1;
 8000f0c:	6269      	str	r1, [r5, #36]	; 0x24
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8000f0e:	f8c5 a01c 	str.w	sl, [r5, #28]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 8000f12:	f8c5 a020 	str.w	sl, [r5, #32]
  tmp->worst      = (rtcnt_t)0;
 8000f16:	9407      	str	r4, [sp, #28]
  tmp->last       = (rtcnt_t)0;
 8000f18:	9408      	str	r4, [sp, #32]
  tmp->n          = (ucnt_t)0;
 8000f1a:	9409      	str	r4, [sp, #36]	; 0x24
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.queue);
  ch.rlist.prio = NOPRIO;
 8000f1c:	60ac      	str	r4, [r5, #8]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.newer = (thread_t *)&ch.rlist;
 8000f1e:	612d      	str	r5, [r5, #16]
  ch.rlist.older = (thread_t *)&ch.rlist;
 8000f20:	616d      	str	r5, [r5, #20]
  ch.vtlist.delta = (systime_t)-1;
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.lasttime = (systime_t)0;
 8000f22:	62ac      	str	r4, [r5, #40]	; 0x28
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8000f24:	676c      	str	r4, [r5, #116]	; 0x74
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8000f26:	f001 ff93 	bl	8002e50 <chTMStartMeasurementX.constprop.25>
  chTMStopMeasurementX(&tm);
 8000f2a:	a806      	add	r0, sp, #24
 8000f2c:	f002 fc70 	bl	8003810 <chTMStopMeasurementX>
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAligned;
 8000f30:	4b28      	ldr	r3, [pc, #160]	; (8000fd4 <main+0x334>)
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = __heap_base__;
  endmem  = __heap_end__;
 8000f32:	4929      	ldr	r1, [pc, #164]	; (8000fd8 <main+0x338>)
 8000f34:	4a29      	ldr	r2, [pc, #164]	; (8000fdc <main+0x33c>)
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	4829      	ldr	r0, [pc, #164]	; (8000fe0 <main+0x340>)
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f3a:	4a2a      	ldr	r2, [pc, #168]	; (8000fe4 <main+0x344>)
 8000f3c:	6008      	str	r0, [r1, #0]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000f3e:	482a      	ldr	r0, [pc, #168]	; (8000fe8 <main+0x348>)
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f40:	f8d2 b00c 	ldr.w	fp, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000f44:	9004      	str	r0, [sp, #16]
 8000f46:	9904      	ldr	r1, [sp, #16]
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = __heap_base__;
 8000f48:	f8df e0d4 	ldr.w	lr, [pc, #212]	; 8001020 <main+0x380>
 8000f4c:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 8001024 <main+0x384>
 8000f50:	f8ce c000 	str.w	ip, [lr]
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f54:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
 8000f58:	ea0b 0000 	and.w	r0, fp, r0
  reg_value  =  (reg_value                                   |
 8000f5c:	4301      	orrs	r1, r0
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 8000f5e:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8000f62:	9104      	str	r1, [sp, #16]
  ch.tm.offset = tm.last;
 8000f64:	9908      	ldr	r1, [sp, #32]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
 8000f66:	f8c5 8038 	str.w	r8, [r5, #56]	; 0x38
  tp->flags     = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->preempt   = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
 8000f6a:	f8c5 806c 	str.w	r8, [r5, #108]	; 0x6c
 8000f6e:	6769      	str	r1, [r5, #116]	; 0x74
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8000f70:	eb03 0809 	add.w	r8, r3, r9
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000f74:	9904      	ldr	r1, [sp, #16]

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000f76:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 8001028 <main+0x388>
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
 8000f7a:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 800102c <main+0x38c>
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
  tp->flags     = CH_FLAG_MODE_STATIC;
 8000f7e:	f885 4051 	strb.w	r4, [r5, #81]	; 0x51
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 8000f82:	f105 0030 	add.w	r0, r5, #48	; 0x30
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
  tp->mtxlist   = NULL;
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending  = (eventmask_t)0;
 8000f86:	666c      	str	r4, [r5, #100]	; 0x64
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
 8000f88:	f885 7052 	strb.w	r7, [r5, #82]	; 0x52
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
 8000f8c:	619c      	str	r4, [r3, #24]
  tp->name      = name;
  REG_INSERT(tp);
 8000f8e:	f8c5 c044 	str.w	ip, [r5, #68]	; 0x44
 8000f92:	f8c3 8010 	str.w	r8, [r3, #16]
  tqp->prev = (thread_t *)tqp;
 8000f96:	f8c3 8014 	str.w	r8, [r3, #20]
 8000f9a:	e049      	b.n	8001030 <main+0x390>
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	40007000 	.word	0x40007000
 8000fa4:	40010000 	.word	0x40010000
 8000fa8:	48001400 	.word	0x48001400
 8000fac:	48001800 	.word	0x48001800
 8000fb0:	48001c00 	.word	0x48001c00
 8000fb4:	20000e60 	.word	0x20000e60
 8000fb8:	40000400 	.word	0x40000400
 8000fbc:	08006398 	.word	0x08006398
 8000fc0:	e0042000 	.word	0xe0042000
 8000fc4:	20000e3c 	.word	0x20000e3c
 8000fc8:	20000cbc 	.word	0x20000cbc
 8000fcc:	20000ec8 	.word	0x20000ec8
 8000fd0:	0112a880 	.word	0x0112a880
 8000fd4:	20000c68 	.word	0x20000c68
 8000fd8:	20000ccc 	.word	0x20000ccc
 8000fdc:	08002e01 	.word	0x08002e01
 8000fe0:	20010000 	.word	0x20010000
 8000fe4:	e000ed00 	.word	0xe000ed00
 8000fe8:	05fa0300 	.word	0x05fa0300
 8000fec:	65555105 	.word	0x65555105
 8000ff0:	48000400 	.word	0x48000400
 8000ff4:	280004a0 	.word	0x280004a0
 8000ff8:	48000800 	.word	0x48000800
 8000ffc:	48000c00 	.word	0x48000c00
 8001000:	48001000 	.word	0x48001000
 8001004:	01555555 	.word	0x01555555
 8001008:	2000f9d0 	.word	0x2000f9d0
 800100c:	20000f54 	.word	0x20000f54
 8001010:	55555550 	.word	0x55555550
 8001014:	e000e100 	.word	0xe000e100
 8001018:	08002dd1 	.word	0x08002dd1
 800101c:	40004400 	.word	0x40004400
 8001020:	20000cd4 	.word	0x20000cd4
 8001024:	2000f9e0 	.word	0x2000f9e0
 8001028:	e000edf0 	.word	0xe000edf0
 800102c:	08006350 	.word	0x08006350
#if CH_CFG_TIME_QUANTUM > 0
  tp->preempt   = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
  tp->mtxlist   = NULL;
 8001030:	66ac      	str	r4, [r5, #104]	; 0x68
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 8001032:	642d      	str	r5, [r5, #64]	; 0x40
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
 8001034:	f8c5 a048 	str.w	sl, [r5, #72]	; 0x48
  REG_INSERT(tp);
 8001038:	f8cc 0010 	str.w	r0, [ip, #16]
 800103c:	60d1      	str	r1, [r2, #12]
 800103e:	f8de c00c 	ldr.w	ip, [lr, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001042:	49aa      	ldr	r1, [pc, #680]	; (80012ec <main+0x64c>)
  H_NEXT(&default_heap.header) = NULL;
 8001044:	609c      	str	r4, [r3, #8]

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001046:	f04c 7c80 	orr.w	ip, ip, #16777216	; 0x1000000
 800104a:	f8ce c00c 	str.w	ip, [lr, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800104e:	f8d1 c000 	ldr.w	ip, [r1]
  H_PAGES(&default_heap.header) = 0;
 8001052:	60dc      	str	r4, [r3, #12]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->next = (thread_t *)tlp;
 8001054:	f105 0858 	add.w	r8, r5, #88	; 0x58
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8001058:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 800105c:	ea4c 0c07 	orr.w	ip, ip, r7
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001060:	f04f 0e20 	mov.w	lr, #32
 8001064:	6168      	str	r0, [r5, #20]
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8001066:	61a8      	str	r0, [r5, #24]
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
  }
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
 8001068:	64ec      	str	r4, [r5, #76]	; 0x4c
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
 800106a:	f885 7050 	strb.w	r7, [r5, #80]	; 0x50
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->next = (thread_t *)tlp;
 800106e:	f8c5 8058 	str.w	r8, [r5, #88]	; 0x58
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8001072:	65eb      	str	r3, [r5, #92]	; 0x5c
  tqp->prev = (thread_t *)tqp;
 8001074:	662b      	str	r3, [r5, #96]	; 0x60
 8001076:	f8c1 c000 	str.w	ip, [r1]
 800107a:	f882 901f 	strb.w	r9, [r2, #31]
 800107e:	f882 e022 	strb.w	lr, [r2, #34]	; 0x22
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001082:	f384 8811 	msr	BASEPRI, r4
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001086:	b662      	cpsie	i
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001088:	2320      	movs	r3, #32
 800108a:	f383 8811 	msr	BASEPRI, r3
  tp = (thread_t *)((uint8_t *)tdp->wend -
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
 800108e:	4b98      	ldr	r3, [pc, #608]	; (80012f0 <main+0x650>)
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001090:	f8df e29c 	ldr.w	lr, [pc, #668]	; 8001330 <main+0x690>
 8001094:	f8df b29c 	ldr.w	fp, [pc, #668]	; 8001334 <main+0x694>
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
 8001098:	f8df 929c 	ldr.w	r9, [pc, #668]	; 8001338 <main+0x698>
  REG_INSERT(tp);
 800109c:	462a      	mov	r2, r5
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
 800109e:	2401      	movs	r4, #1
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
  thread_t *otp = currp;
 80010a0:	69ad      	ldr	r5, [r5, #24]
 80010a2:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->prio <= otp->prio) {
 80010a6:	68af      	ldr	r7, [r5, #8]
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 80010a8:	f8d2 c014 	ldr.w	ip, [r2, #20]
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80010ac:	f8c3 e0f4 	str.w	lr, [r3, #244]	; 0xf4
 80010b0:	f103 08b4 	add.w	r8, r3, #180	; 0xb4
 80010b4:	2100      	movs	r1, #0
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 80010b6:	f503 708c 	add.w	r0, r3, #280	; 0x118
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80010ba:	f8c3 8124 	str.w	r8, [r3, #292]	; 0x124
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80010be:	f503 7ea2 	add.w	lr, r3, #324	; 0x144
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
 80010c2:	f04f 0a02 	mov.w	sl, #2
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->next = (thread_t *)tlp;
 80010c6:	f503 78a0 	add.w	r8, r3, #320	; 0x140
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 80010ca:	f8c3 c12c 	str.w	ip, [r3, #300]	; 0x12c
  tp = (thread_t *)((uint8_t *)tdp->wend -
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
 80010ce:	f8c3 3134 	str.w	r3, [r3, #308]	; 0x134
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 80010d2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80010d6:	f8c3 b114 	str.w	fp, [r3, #276]	; 0x114
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
 80010da:	f883 a138 	strb.w	sl, [r3, #312]	; 0x138
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
 80010de:	f8c3 9130 	str.w	r9, [r3, #304]	; 0x130
  tp->flags     = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->preempt   = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
 80010e2:	f8c3 4154 	str.w	r4, [r3, #340]	; 0x154
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
 80010e6:	f883 413a 	strb.w	r4, [r3, #314]	; 0x13a
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80010ea:	f8c3 10f8 	str.w	r1, [r3, #248]	; 0xf8
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
  tp->flags     = CH_FLAG_MODE_STATIC;
 80010ee:	f883 1139 	strb.w	r1, [r3, #313]	; 0x139
#if CH_CFG_TIME_QUANTUM > 0
  tp->preempt   = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
  tp->mtxlist   = NULL;
 80010f2:	f8c3 1150 	str.w	r1, [r3, #336]	; 0x150
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending  = (eventmask_t)0;
 80010f6:	f8c3 114c 	str.w	r1, [r3, #332]	; 0x14c
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 80010fa:	f8cc 0010 	str.w	r0, [ip, #16]
 80010fe:	6150      	str	r0, [r2, #20]
              (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->u.rdymsg = msg;
 8001100:	f8c3 113c 	str.w	r1, [r3, #316]	; 0x13c
 8001104:	f8c3 8140 	str.w	r8, [r3, #320]	; 0x140
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8001108:	f8c3 e144 	str.w	lr, [r3, #324]	; 0x144
  tqp->prev = (thread_t *)tqp;
 800110c:	f8c3 e148 	str.w	lr, [r3, #328]	; 0x148

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->prio <= otp->prio) {
 8001110:	2f00      	cmp	r7, #0
 8001112:	f001 8331 	beq.w	8002778 <main+0x1ad8>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8001116:	f883 1138 	strb.w	r1, [r3, #312]	; 0x138
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
 800111a:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio >= tp->prio);
 800111c:	6891      	ldr	r1, [r2, #8]
 800111e:	2900      	cmp	r1, #0
 8001120:	d1fb      	bne.n	800111a <main+0x47a>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 8001122:	6854      	ldr	r4, [r2, #4]
 8001124:	f8c3 411c 	str.w	r4, [r3, #284]	; 0x11c
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio >= tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 8001128:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  tp->queue.prev             = cp->queue.prev;
  tp->queue.prev->queue.next = tp;
 800112c:	6020      	str	r0, [r4, #0]
  cp->queue.prev             = tp;
 800112e:	6050      	str	r0, [r2, #4]
 8001130:	f381 8811 	msr	BASEPRI, r1

// Start the serial module
void serialBegin(void)
 {
 // Serial driver initialization
 SConfig.speed=SSPEED;         // Configure speed
 8001134:	4b6f      	ldr	r3, [pc, #444]	; (80012f4 <main+0x654>)
 8001136:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	2220      	movs	r2, #32
 800113e:	f382 8811 	msr	BASEPRI, r2
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8001142:	7a32      	ldrb	r2, [r6, #8]
 8001144:	2a01      	cmp	r2, #1
 8001146:	d026      	beq.n	8001196 <main+0x4f6>
  {
      u->BRR = (uint32_t)( ( (uint64_t)sdp->clock * 256 ) / config->speed);
  }
  else
#endif
  u->BRR = (uint32_t)(sdp->clock / config->speed);
 8001148:	6db0      	ldr	r0, [r6, #88]	; 0x58

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 800114a:	6859      	ldr	r1, [r3, #4]
  {
      u->BRR = (uint32_t)( ( (uint64_t)sdp->clock * 256 ) / config->speed);
  }
  else
#endif
  u->BRR = (uint32_t)(sdp->clock / config->speed);
 800114c:	f8d3 e000 	ldr.w	lr, [r3]

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8001150:	689f      	ldr	r7, [r3, #8]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8001152:	68dd      	ldr	r5, [r3, #12]
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] config    the architecture-dependent serial driver configuration
 */
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
  USART_TypeDef *u = sdp->usart;
 8001154:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8001156:	4a68      	ldr	r2, [pc, #416]	; (80012f8 <main+0x658>)
  {
      u->BRR = (uint32_t)( ( (uint64_t)sdp->clock * 256 ) / config->speed);
  }
  else
#endif
  u->BRR = (uint32_t)(sdp->clock / config->speed);
 8001158:	fbb0 fefe 	udiv	lr, r0, lr

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800115c:	f047 0740 	orr.w	r7, r7, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8001160:	f441 7496 	orr.w	r4, r1, #300	; 0x12c
  {
      u->BRR = (uint32_t)( ( (uint64_t)sdp->clock * 256 ) / config->speed);
  }
  else
#endif
  u->BRR = (uint32_t)(sdp->clock / config->speed);
 8001164:	f8c3 e00c 	str.w	lr, [r3, #12]

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8001168:	f045 0501 	orr.w	r5, r5, #1
  else
#endif
  u->BRR = (uint32_t)(sdp->clock / config->speed);

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800116c:	605f      	str	r7, [r3, #4]
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 800116e:	f044 0401 	orr.w	r4, r4, #1
                         USART_CR1_RE;
  u->ICR = 0xFFFFFFFFU;
 8001172:	f04f 30ff 	mov.w	r0, #4294967295

  /* Deciding mask to be applied on the data register on receive, this is
     required in order to mask out the parity bit.*/
  if ((config->cr1 & USART_CR1_PCE) != 0U) {
 8001176:	054f      	lsls	r7, r1, #21
#endif
  u->BRR = (uint32_t)(sdp->clock / config->speed);

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8001178:	609d      	str	r5, [r3, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 800117a:	601c      	str	r4, [r3, #0]
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->ICR = 0xFFFFFFFFU;
 800117c:	6218      	str	r0, [r3, #32]

  /* Deciding mask to be applied on the data register on receive, this is
     required in order to mask out the parity bit.*/
  if ((config->cr1 & USART_CR1_PCE) != 0U) {
 800117e:	d510      	bpl.n	80011a2 <main+0x502>
    switch (config->cr1 & (USART_CR1_M_1 | USART_CR1_M_0)) {
 8001180:	f011 2110 	ands.w	r1, r1, #268439552	; 0x10001000
 8001184:	f001 82fb 	beq.w	800277e <main+0x1ade>
 8001188:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800118c:	d109      	bne.n	80011a2 <main+0x502>
    case 0:
      sdp->rxmask = 0x7F;
      break;
    case USART_CR1_M_1:
      sdp->rxmask = 0x3F;
 800118e:	233f      	movs	r3, #63	; 0x3f
 8001190:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
 8001194:	e007      	b.n	80011a6 <main+0x506>
      rccEnableUSART1(FALSE);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccEnableUSART2(FALSE);
 8001196:	4a59      	ldr	r2, [pc, #356]	; (80012fc <main+0x65c>)
 8001198:	69d1      	ldr	r1, [r2, #28]
 800119a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800119e:	61d1      	str	r1, [r2, #28]
 80011a0:	e7d2      	b.n	8001148 <main+0x4a8>
    default:
      sdp->rxmask = 0xFF;
    }
  }
  else {
    sdp->rxmask = 0xFF;
 80011a2:	f882 005c 	strb.w	r0, [r2, #92]	; 0x5c

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
 80011a6:	2302      	movs	r3, #2
 80011a8:	7233      	strb	r3, [r6, #8]
 80011aa:	2300      	movs	r3, #0
 80011ac:	f383 8811 	msr	BASEPRI, r3
 sdStart(&SDRIVER,&SConfig);   // Initializes serial driver
 palSetPadMode(USART2_TX_PORT,USART2_TX_PAD,PAL_MODE_ALTERNATE(7)); // Map TX
 80011b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b4:	2104      	movs	r1, #4
 80011b6:	f240 3282 	movw	r2, #898	; 0x382
 80011ba:	f002 f821 	bl	8003200 <_pal_lld_setgroupmode>
 palSetPadMode(USART2_RX_PORT,USART2_RX_PAD,PAL_MODE_ALTERNATE(7)); // Map RX
 80011be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c2:	2108      	movs	r1, #8
 80011c4:	f240 3282 	movw	r2, #898	; 0x382
 80011c8:	f002 f81a 	bl	8003200 <_pal_lld_setgroupmode>

  // Start the serial module
  serialBegin();

  // Print string
  chprintf(SDBASE,"%s%s%s",BSTRING,VSTRING,BREAK);
 80011cc:	494c      	ldr	r1, [pc, #304]	; (8001300 <main+0x660>)
 80011ce:	9100      	str	r1, [sp, #0]
 80011d0:	4a4c      	ldr	r2, [pc, #304]	; (8001304 <main+0x664>)
 80011d2:	494d      	ldr	r1, [pc, #308]	; (8001308 <main+0x668>)
 80011d4:	4b4d      	ldr	r3, [pc, #308]	; (800130c <main+0x66c>)
 80011d6:	4848      	ldr	r0, [pc, #288]	; (80012f8 <main+0x658>)
 80011d8:	f8df 8160 	ldr.w	r8, [pc, #352]	; 800133c <main+0x69c>
 80011dc:	f8df a160 	ldr.w	sl, [pc, #352]	; 8001340 <main+0x6a0>
 80011e0:	f8df 9160 	ldr.w	r9, [pc, #352]	; 8001344 <main+0x6a4>
 80011e4:	4c4a      	ldr	r4, [pc, #296]	; (8001310 <main+0x670>)
 80011e6:	f8df b160 	ldr.w	fp, [pc, #352]	; 8001348 <main+0x6a8>
 80011ea:	4f4a      	ldr	r7, [pc, #296]	; (8001314 <main+0x674>)
 overrun_error = 0;
 overrun = 0;

 // Programs the ticker
 gptStart(&GPTD3, &dualWavePlayCFG);
 ticks = (int) TIM_FREQ_F*stime;
 80011ec:	ed9f 8a4a 	vldr	s16, [pc, #296]	; 8001318 <main+0x678>
 80011f0:	f001 fe96 	bl	8002f20 <chprintf.constprop.1>

  // Initializes the system
  softReset();
 80011f4:	f002 fefc 	bl	8003ff0 <softReset>
// RX Code ----------------------------------------------

// Start of a Rx reception
void startRx(void)
 {
 crcRx = 0;
 80011f8:	2500      	movs	r5, #0
 80011fa:	f8c8 5000 	str.w	r5, [r8]

  // Loop that processes each received char
  while(1)
     {
     startRx();        // Init Rx CRC
     car = getByte();  // Get command
 80011fe:	f003 fb07 	bl	8004810 <getByte>
 int vref_m,vref_e;

 // Initialize Tx CRC
 startTx();

 switch(car)
 8001202:	3841      	subs	r0, #65	; 0x41
  // Loop that processes each received char
  while(1)
     {
     startRx();        // Init Rx CRC
     car = getByte();  // Get command
     halt = 0;         // Remove halt condition if present
 8001204:	f8ca 5000 	str.w	r5, [sl]

// Start Tx
// Clears the tx crc
void startTx(void)
 {
 crcTx = 0;
 8001208:	f8c9 5000 	str.w	r5, [r9]
 int vref_m,vref_e;

 // Initialize Tx CRC
 startTx();

 switch(car)
 800120c:	2836      	cmp	r0, #54	; 0x36
 800120e:	f200 848a 	bhi.w	8001b26 <main+0xe86>
 8001212:	e8df f010 	tbh	[pc, r0, lsl #1]
 8001216:	057d      	.short	0x057d
 8001218:	04880488 	.word	0x04880488
 800121c:	05c7055f 	.word	0x05c7055f
 8001220:	045c05bd 	.word	0x045c05bd
 8001224:	051a043c 	.word	0x051a043c
 8001228:	04a90503 	.word	0x04a90503
 800122c:	05d5048f 	.word	0x05d5048f
 8001230:	03ff05a9 	.word	0x03ff05a9
 8001234:	035f03b4 	.word	0x035f03b4
 8001238:	0205029a 	.word	0x0205029a
 800123c:	04880488 	.word	0x04880488
 8001240:	026f0180 	.word	0x026f0180
 8001244:	02ee0245 	.word	0x02ee0245
 8001248:	04880488 	.word	0x04880488
 800124c:	04880488 	.word	0x04880488
 8001250:	04880488 	.word	0x04880488
 8001254:	04880488 	.word	0x04880488
 8001258:	04880488 	.word	0x04880488
 800125c:	04880488 	.word	0x04880488
 8001260:	04880488 	.word	0x04880488
 8001264:	04880488 	.word	0x04880488
 8001268:	01520163 	.word	0x01520163
 800126c:	04880488 	.word	0x04880488
 8001270:	04880488 	.word	0x04880488
 8001274:	01000488 	.word	0x01000488
 8001278:	04880488 	.word	0x04880488
 800127c:	04880488 	.word	0x04880488
 8001280:	0037009d 	.word	0x0037009d
void loadSecondaryWaveTable(void)
 {
 int i;

 // Eliminate digital wavetable
 w_d  = 0;
 8001284:	4925      	ldr	r1, [pc, #148]	; (800131c <main+0x67c>)
 8001286:	2500      	movs	r5, #0
 8001288:	600d      	str	r5, [r1, #0]

 // Get size
 w_s2 = getU16();
 800128a:	f003 fad1 	bl	8004830 <getU16>
 800128e:	4b24      	ldr	r3, [pc, #144]	; (8001320 <main+0x680>)
// Calculates available wave 2 buff size
static inline uint16_t wave2buffSize(void)
 {
 uint16_t size;

 size = BSIZE - w_s;
 8001290:	6822      	ldr	r2, [r4, #0]

 // Eliminate digital wavetable
 w_d  = 0;

 // Get size
 w_s2 = getU16();
 8001292:	6018      	str	r0, [r3, #0]
// Calculates available wave 2 buff size
static inline uint16_t wave2buffSize(void)
 {
 uint16_t size;

 size = BSIZE - w_s;
 8001294:	f5c2 43ea 	rsb	r3, r2, #29952	; 0x7500
 8001298:	3330      	adds	r3, #48	; 0x30

 // Get size
 w_s2 = getU16();

 // Check size and primary wavetable
 if (w_s2 > wave2buffSize())
 800129a:	b29b      	uxth	r3, r3
 800129c:	4298      	cmp	r0, r3

 // Eliminate digital wavetable
 w_d  = 0;

 // Get size
 w_s2 = getU16();
 800129e:	4920      	ldr	r1, [pc, #128]	; (8001320 <main+0x680>)

 // Check size and primary wavetable
 if (w_s2 > wave2buffSize())
 80012a0:	f301 81d6 	bgt.w	8002650 <main+0x19b0>
    sendCRC();
    return;
    }

 // Calculate new memory configuration
 waveDbuff=&buff[w_s+w_s2];
 80012a4:	4e1f      	ldr	r6, [pc, #124]	; (8001324 <main+0x684>)
 80012a6:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 800134c <main+0x6ac>
 tranBuff =&buff[w_s+w_s2];
 80012aa:	491f      	ldr	r1, [pc, #124]	; (8001328 <main+0x688>)
    sendCRC();
    return;
    }

 // Calculate new memory configuration
 waveDbuff=&buff[w_s+w_s2];
 80012ac:	1883      	adds	r3, r0, r2
 80012ae:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 tranBuff =&buff[w_s+w_s2];

 if (w_s2>0)
    for(i=0;i<w_s2;i++)
 80012b2:	2800      	cmp	r0, #0
    sendCRC();
    return;
    }

 // Calculate new memory configuration
 waveDbuff=&buff[w_s+w_s2];
 80012b4:	f8cc 3000 	str.w	r3, [ip]
 tranBuff =&buff[w_s+w_s2];
 80012b8:	600b      	str	r3, [r1, #0]

 if (w_s2>0)
    for(i=0;i<w_s2;i++)
 80012ba:	dd0c      	ble.n	80012d6 <main+0x636>
        wave2buff[i] = getU16();
 80012bc:	4a1b      	ldr	r2, [pc, #108]	; (800132c <main+0x68c>)
 80012be:	6816      	ldr	r6, [r2, #0]
 80012c0:	f003 fab6 	bl	8004830 <getU16>
 // Calculate new memory configuration
 waveDbuff=&buff[w_s+w_s2];
 tranBuff =&buff[w_s+w_s2];

 if (w_s2>0)
    for(i=0;i<w_s2;i++)
 80012c4:	f8df c058 	ldr.w	ip, [pc, #88]	; 8001320 <main+0x680>
 80012c8:	f8dc 3000 	ldr.w	r3, [ip]
        wave2buff[i] = getU16();
 80012cc:	f826 0015 	strh.w	r0, [r6, r5, lsl #1]
 // Calculate new memory configuration
 waveDbuff=&buff[w_s+w_s2];
 tranBuff =&buff[w_s+w_s2];

 if (w_s2>0)
    for(i=0;i<w_s2;i++)
 80012d0:	3501      	adds	r5, #1
 80012d2:	429d      	cmp	r5, r3
 80012d4:	dbf2      	blt.n	80012bc <main+0x61c>
 if (w_d > 0)
    for(i=0;i<w_d;i++)
       waveDbuff[i] = waved_mask & getU16();

 // Check of CRC
 if (!crcResponse()) return;
 80012d6:	f003 fa73 	bl	80047c0 <crcResponse>
 80012da:	2800      	cmp	r0, #0
 80012dc:	f000 8117 	beq.w	800150e <main+0x86e>

 sendByte(ACK);
 80012e0:	20b5      	movs	r0, #181	; 0xb5
 80012e2:	f002 fbfd 	bl	8003ae0 <sendByte>

 sendCRC();
 80012e6:	f002 fbeb 	bl	8003ac0 <sendCRC>
 80012ea:	e110      	b.n	800150e <main+0x86e>
 80012ec:	e0001000 	.word	0xe0001000
 80012f0:	20000cd8 	.word	0x20000cd8
 80012f4:	20000c9c 	.word	0x20000c9c
 80012f8:	20000e60 	.word	0x20000e60
 80012fc:	40021000 	.word	0x40021000
 8001300:	08006430 	.word	0x08006430
 8001304:	08006408 	.word	0x08006408
 8001308:	08006400 	.word	0x08006400
 800130c:	08006428 	.word	0x08006428
 8001310:	2000f9cc 	.word	0x2000f9cc
 8001314:	20000c94 	.word	0x20000c94
 8001318:	49742400 	.word	0x49742400
 800131c:	20000f44 	.word	0x20000f44
 8001320:	20000c8c 	.word	0x20000c8c
 8001324:	20000f6c 	.word	0x20000f6c
 8001328:	20000cb8 	.word	0x20000cb8
 800132c:	20000cd0 	.word	0x20000cd0
 8001330:	08002e41 	.word	0x08002e41
 8001334:	08000345 	.word	0x08000345
 8001338:	080063f8 	.word	0x080063f8
 800133c:	20000c50 	.word	0x20000c50
 8001340:	20000e4c 	.word	0x20000e4c
 8001344:	20000c54 	.word	0x20000c54
 8001348:	20000f68 	.word	0x20000f68
 800134c:	20000f4c 	.word	0x20000f4c
void dualWaveResponse()
 {
 int ticks;

 // Read number of primary waves before measurement
 w_n = getU16();
 8001350:	f003 fa6e 	bl	8004830 <getU16>
 8001354:	4b9d      	ldr	r3, [pc, #628]	; (80015cc <main+0x92c>)
 8001356:	499d      	ldr	r1, [pc, #628]	; (80015cc <main+0x92c>)
 8001358:	6018      	str	r0, [r3, #0]
 // Convert to cycles
 w_n = w_n*w_s;
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	6823      	ldr	r3, [r4, #0]
 800135e:	fb02 f203 	mul.w	r2, r2, r3
 8001362:	600a      	str	r2, [r1, #0]

 // Make zero if no primary wave
 if (!w_s) w_n = 0;
 8001364:	b903      	cbnz	r3, 8001368 <main+0x6c8>
 8001366:	600b      	str	r3, [r1, #0]

 // Check of CRC
 if (!crcResponse()) return;
 8001368:	f003 fa2a 	bl	80047c0 <crcResponse>
 800136c:	2800      	cmp	r0, #0
 800136e:	f43f af43 	beq.w	80011f8 <main+0x558>
 w_pos = 0;                 // Current wave position
 w_pos2 = 0;                // Secondary wave position
 w_posd = 0;				// Current digital wave position

 // Current size for buffer
 if (n_di)
 8001372:	4d97      	ldr	r5, [pc, #604]	; (80015d0 <main+0x930>)

 // Enable AC operation
 ACenable();

 // Configure ticker ISR
 samples = 0;               // Number of processed samples
 8001374:	4e97      	ldr	r6, [pc, #604]	; (80015d4 <main+0x934>)
 if (!w_s) w_n = 0;

 // Check of CRC
 if (!crcResponse()) return;

 sendByte(ACK);
 8001376:	20b5      	movs	r0, #181	; 0xb5
 8001378:	f002 fbb2 	bl	8003ae0 <sendByte>

 // Enable AC operation
 ACenable();
 800137c:	f003 f940 	bl	8004600 <ACenable>
 w_pos = 0;                 // Current wave position
 w_pos2 = 0;                // Secondary wave position
 w_posd = 0;				// Current digital wave position

 // Current size for buffer
 if (n_di)
 8001380:	682a      	ldr	r2, [r5, #0]

 // Configure ticker ISR
 samples = 0;               // Number of processed samples
 inBuffPos = 0;             // Current buffer position
 endTicker = 0;             // Ticker has not ended
 w_pos = 0;                 // Current wave position
 8001382:	f8df c280 	ldr.w	ip, [pc, #640]	; 8001604 <main+0x964>
 // Enable AC operation
 ACenable();

 // Configure ticker ISR
 samples = 0;               // Number of processed samples
 inBuffPos = 0;             // Current buffer position
 8001386:	4894      	ldr	r0, [pc, #592]	; (80015d8 <main+0x938>)
 endTicker = 0;             // Ticker has not ended
 w_pos = 0;                 // Current wave position
 w_pos2 = 0;                // Secondary wave position
 8001388:	4994      	ldr	r1, [pc, #592]	; (80015dc <main+0x93c>)
 w_posd = 0;				// Current digital wave position
 800138a:	4d95      	ldr	r5, [pc, #596]	; (80015e0 <main+0x940>)

 // Enable AC operation
 ACenable();

 // Configure ticker ISR
 samples = 0;               // Number of processed samples
 800138c:	2300      	movs	r3, #0
 inBuffPos = 0;             // Current buffer position
 endTicker = 0;             // Ticker has not ended
 800138e:	f8cb 3000 	str.w	r3, [fp]

 // Enable AC operation
 ACenable();

 // Configure ticker ISR
 samples = 0;               // Number of processed samples
 8001392:	6033      	str	r3, [r6, #0]
 inBuffPos = 0;             // Current buffer position
 endTicker = 0;             // Ticker has not ended
 w_pos = 0;                 // Current wave position
 8001394:	f8cc 3000 	str.w	r3, [ip]
 // Enable AC operation
 ACenable();

 // Configure ticker ISR
 samples = 0;               // Number of processed samples
 inBuffPos = 0;             // Current buffer position
 8001398:	6003      	str	r3, [r0, #0]
 endTicker = 0;             // Ticker has not ended
 w_pos = 0;                 // Current wave position
 w_pos2 = 0;                // Secondary wave position
 800139a:	600b      	str	r3, [r1, #0]
 w_posd = 0;				// Current digital wave position
 800139c:	602b      	str	r3, [r5, #0]

 // Current size for buffer
 if (n_di)
 800139e:	2a00      	cmp	r2, #0
 80013a0:	f001 8187 	beq.w	80026b2 <main+0x1a12>
	 currentBsize = (n_ai+1) * n_s;
 80013a4:	4e8f      	ldr	r6, [pc, #572]	; (80015e4 <main+0x944>)
 80013a6:	f8df c274 	ldr.w	ip, [pc, #628]	; 800161c <main+0x97c>
 80013aa:	6832      	ldr	r2, [r6, #0]
 80013ac:	f8dc 3000 	ldr.w	r3, [ip]
 80013b0:	488d      	ldr	r0, [pc, #564]	; (80015e8 <main+0x948>)
 80013b2:	fb02 3303 	mla	r3, r2, r3, r3
 80013b6:	6003      	str	r3, [r0, #0]
   else
     currentBsize = n_ai * n_s;

 // Clear overrun variables
 overrun_error = 0;
 80013b8:	f8df c24c 	ldr.w	ip, [pc, #588]	; 8001608 <main+0x968>
 overrun = 0;

 // Store digital wave base
 waved_base = (DIO_PORT -> ODR)&(~waved_mask);
 80013bc:	488b      	ldr	r0, [pc, #556]	; (80015ec <main+0x94c>)
 80013be:	4a8c      	ldr	r2, [pc, #560]	; (80015f0 <main+0x950>)
 80013c0:	498c      	ldr	r1, [pc, #560]	; (80015f4 <main+0x954>)
	 currentBsize = (n_ai+1) * n_s;
   else
     currentBsize = n_ai * n_s;

 // Clear overrun variables
 overrun_error = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	f8cc 3000 	str.w	r3, [ip]
 overrun = 0;
 80013c8:	603b      	str	r3, [r7, #0]

 // Store digital wave base
 waved_base = (DIO_PORT -> ODR)&(~waved_mask);
 80013ca:	6952      	ldr	r2, [r2, #20]
 80013cc:	6803      	ldr	r3, [r0, #0]

 // Programs the ticker
 gptStart(&GPTD3, &dualWaveCFG);
 80013ce:	488a      	ldr	r0, [pc, #552]	; (80015f8 <main+0x958>)
 // Clear overrun variables
 overrun_error = 0;
 overrun = 0;

 // Store digital wave base
 waved_base = (DIO_PORT -> ODR)&(~waved_mask);
 80013d0:	ea22 0303 	bic.w	r3, r2, r3
 80013d4:	600b      	str	r3, [r1, #0]

 // Programs the ticker
 gptStart(&GPTD3, &dualWaveCFG);
 80013d6:	f003 f8d3 	bl	8004580 <gptStart.constprop.14>
 ticks = (int) TIM_FREQ_F*stime;
 80013da:	4a88      	ldr	r2, [pc, #544]	; (80015fc <main+0x95c>)
 80013dc:	edd2 7a00 	vldr	s15, [r2]
 80013e0:	ee67 7a88 	vmul.f32	s15, s15, s16
 gptStartContinuous(&GPTD3,ticks);
 80013e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013e8:	ee17 0a90 	vmov	r0, s15
 80013ec:	f001 fd60 	bl	8002eb0 <gptStartContinuous.constprop.10>

 // Wait till end
 while (!endTicker) overrun = 0;
 80013f0:	f8db 2000 	ldr.w	r2, [fp]
 80013f4:	b922      	cbnz	r2, 8001400 <main+0x760>
 80013f6:	603a      	str	r2, [r7, #0]
 80013f8:	f8db 3000 	ldr.w	r3, [fp]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d0fa      	beq.n	80013f6 <main+0x756>
          {
	      overrun = 0;
	      }

 // Disable gpt
 gptStopTimer(&GPTD3);
 8001400:	f001 fd76 	bl	8002ef0 <gptStopTimer.constprop.8>
 gptStop(&GPTD3);
 8001404:	f001 fd2c 	bl	8002e60 <gptStop.constprop.12>

 // Pipelined mode last sample
 //storeADCs();

 // Disable AC operation
 ACdisable();
 8001408:	f001 feea 	bl	80031e0 <ACdisable>

 // Return data
 dumpInBuffer();  // Dump data
 800140c:	f002 fbb0 	bl	8003b70 <dumpInBuffer>

 sendCRC(); // End of Tx
 8001410:	f002 fb56 	bl	8003ac0 <sendCRC>
 8001414:	e6f0      	b.n	80011f8 <main+0x558>
void dualWavePlay()
 {
 int ticks;

 // Read number of waves to send
 infiniteWave = 0;
 8001416:	487a      	ldr	r0, [pc, #488]	; (8001600 <main+0x960>)
 8001418:	2300      	movs	r3, #0
 800141a:	6003      	str	r3, [r0, #0]
 w_n = getU16();
 800141c:	f003 fa08 	bl	8004830 <getU16>
 8001420:	496a      	ldr	r1, [pc, #424]	; (80015cc <main+0x92c>)
void dualWavePlay()
 {
 int ticks;

 // Read number of waves to send
 infiniteWave = 0;
 8001422:	4a77      	ldr	r2, [pc, #476]	; (8001600 <main+0x960>)
 w_n = getU16();
 8001424:	6008      	str	r0, [r1, #0]
 if (w_n==0)
 8001426:	680b      	ldr	r3, [r1, #0]
 8001428:	b90b      	cbnz	r3, 800142e <main+0x78e>
       infiniteWave = 1;
 800142a:	2301      	movs	r3, #1
 800142c:	6013      	str	r3, [r2, #0]

 // Convert to cycles
 w_n = w_n*w_s;
 800142e:	4b67      	ldr	r3, [pc, #412]	; (80015cc <main+0x92c>)
 8001430:	4d66      	ldr	r5, [pc, #408]	; (80015cc <main+0x92c>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	6823      	ldr	r3, [r4, #0]
 8001436:	fb03 f302 	mul.w	r3, r3, r2
 800143a:	602b      	str	r3, [r5, #0]

 // Check of CRC
 if (!crcResponse()) return;
 800143c:	f003 f9c0 	bl	80047c0 <crcResponse>
 8001440:	2800      	cmp	r0, #0
 8001442:	f43f aed9 	beq.w	80011f8 <main+0x558>

 sendByte(ACK);
 8001446:	20b5      	movs	r0, #181	; 0xb5
 8001448:	f002 fb4a 	bl	8003ae0 <sendByte>
 // Enable AC operation
 ACenable();

 // Configure ticker ISR
 endTicker = 0;             // Ticker has not ended
 w_pos =  0;                // Current primary wave position
 800144c:	4e6d      	ldr	r6, [pc, #436]	; (8001604 <main+0x964>)
 if (!crcResponse()) return;

 sendByte(ACK);

 // Enable AC operation
 ACenable();
 800144e:	f003 f8d7 	bl	8004600 <ACenable>
 w_pos =  0;                // Current primary wave position
 w_pos2 = 0;                // Current secondary wave position
 w_posd = 0;				// Current digital wave position

 // Clear overrun variables
 overrun_error = 0;
 8001452:	4a6d      	ldr	r2, [pc, #436]	; (8001608 <main+0x968>)
 ACenable();

 // Configure ticker ISR
 endTicker = 0;             // Ticker has not ended
 w_pos =  0;                // Current primary wave position
 w_pos2 = 0;                // Current secondary wave position
 8001454:	f8df c184 	ldr.w	ip, [pc, #388]	; 80015dc <main+0x93c>
 w_posd = 0;				// Current digital wave position
 8001458:	4961      	ldr	r1, [pc, #388]	; (80015e0 <main+0x940>)
 // Clear overrun variables
 overrun_error = 0;
 overrun = 0;

 // Programs the ticker
 gptStart(&GPTD3, &dualWavePlayCFG);
 800145a:	486c      	ldr	r0, [pc, #432]	; (800160c <main+0x96c>)

 // Enable AC operation
 ACenable();

 // Configure ticker ISR
 endTicker = 0;             // Ticker has not ended
 800145c:	2300      	movs	r3, #0
 800145e:	f8cb 3000 	str.w	r3, [fp]
 w_pos =  0;                // Current primary wave position
 8001462:	6033      	str	r3, [r6, #0]
 w_pos2 = 0;                // Current secondary wave position
 8001464:	f8cc 3000 	str.w	r3, [ip]
 w_posd = 0;				// Current digital wave position
 8001468:	600b      	str	r3, [r1, #0]

 // Clear overrun variables
 overrun_error = 0;
 800146a:	6013      	str	r3, [r2, #0]
 overrun = 0;
 800146c:	603b      	str	r3, [r7, #0]

 // Programs the ticker
 gptStart(&GPTD3, &dualWavePlayCFG);
 800146e:	f003 f887 	bl	8004580 <gptStart.constprop.14>
 ticks = (int) TIM_FREQ_F*stime;
 8001472:	4b62      	ldr	r3, [pc, #392]	; (80015fc <main+0x95c>)
 8001474:	edd3 7a00 	vldr	s15, [r3]
 8001478:	ee67 7a88 	vmul.f32	s15, s15, s16
 gptStartContinuous(&GPTD3,ticks);
 800147c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001480:	ee17 0a90 	vmov	r0, s15
 8001484:	f001 fd14 	bl	8002eb0 <gptStartContinuous.constprop.10>

 // Wait till end
 while (!endTicker) overrun = 0;
 8001488:	f8db 2000 	ldr.w	r2, [fp]
 800148c:	b922      	cbnz	r2, 8001498 <main+0x7f8>
 800148e:	603a      	str	r2, [r7, #0]
 8001490:	f8db 3000 	ldr.w	r3, [fp]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d0fa      	beq.n	800148e <main+0x7ee>

 // Disable gpt
 gptStopTimer(&GPTD3);
 8001498:	f001 fd2a 	bl	8002ef0 <gptStopTimer.constprop.8>
 gptStop(&GPTD3);
 800149c:	f001 fce0 	bl	8002e60 <gptStop.constprop.12>

 // Disable AC operation
 ACdisable();
 80014a0:	f001 fe9e 	bl	80031e0 <ACdisable>

 // Response code
 if (halt)
 80014a4:	f8da 3000 	ldr.w	r3, [sl]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f040 87ba 	bne.w	8002422 <main+0x1782>
    sendByte(TRAN_HALT);
    else
      if (overrun_error)
 80014ae:	4d56      	ldr	r5, [pc, #344]	; (8001608 <main+0x968>)
 80014b0:	682b      	ldr	r3, [r5, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f040 825f 	bne.w	8001976 <main+0xcd6>
 80014b8:	e36a      	b.n	8001b90 <main+0xef0>
void dioReadAll(void)
 {
 int value;

 // Check of CRC
 if (!crcResponse()) return;
 80014ba:	f003 f981 	bl	80047c0 <crcResponse>
 80014be:	2800      	cmp	r0, #0
 80014c0:	f43f ae9a 	beq.w	80011f8 <main+0x558>

 // Send ACK
 sendByte(ACK);
 80014c4:	20b5      	movs	r0, #181	; 0xb5
 80014c6:	f002 fb0b 	bl	8003ae0 <sendByte>

 // Get value to send
 value = DIO_PORT->IDR;
 80014ca:	4b49      	ldr	r3, [pc, #292]	; (80015f0 <main+0x950>)
 80014cc:	6918      	ldr	r0, [r3, #16]

 // Apply DIO mask
 value = value & DIO_MASK;

 // Send value
 sendU16(value);
 80014ce:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80014d2:	f002 fb1d 	bl	8003b10 <sendU16>

 // Send CRC
 sendCRC();
 80014d6:	f002 faf3 	bl	8003ac0 <sendCRC>
 80014da:	e68d      	b.n	80011f8 <main+0x558>
void dioWriteAll(void)
 {
 int current,value,mask;

 // Value to set
 value = getU16();
 80014dc:	f003 f9a8 	bl	8004830 <getU16>
 80014e0:	4605      	mov	r5, r0

 // Mask to set
 mask = getU16();
 80014e2:	f003 f9a5 	bl	8004830 <getU16>

 if (!mask)
 80014e6:	2800      	cmp	r0, #0
 80014e8:	f000 8783 	beq.w	80023f2 <main+0x1752>
	 mask = DIO_MASK;
    else
     mask = mask & DIO_MASK;
 80014ec:	f3c0 060c 	ubfx	r6, r0, #0, #13

 // Check of CRC
 if (!crcResponse()) return;
 80014f0:	f003 f966 	bl	80047c0 <crcResponse>
 80014f4:	b158      	cbz	r0, 800150e <main+0x86e>

 // Read current port
 current = DIO_PORT->ODR;
 80014f6:	4b3e      	ldr	r3, [pc, #248]	; (80015f0 <main+0x950>)
 80014f8:	695a      	ldr	r2, [r3, #20]

 // Leave untouched bits out of dio mask
 current = current & (~mask);

 // Add masked received value
 current = current | (value & mask);
 80014fa:	4035      	ands	r5, r6

 // Read current port
 current = DIO_PORT->ODR;

 // Leave untouched bits out of dio mask
 current = current & (~mask);
 80014fc:	ea22 0206 	bic.w	r2, r2, r6

 // Add masked received value
 current = current | (value & mask);
 8001500:	432a      	orrs	r2, r5

 // Set port
 (DIO_PORT->ODR) = current;
 8001502:	615a      	str	r2, [r3, #20]

 // Send ACK and CRC
 sendByte(ACK);
 8001504:	20b5      	movs	r0, #181	; 0xb5
 8001506:	f002 faeb 	bl	8003ae0 <sendByte>
 sendCRC();
 800150a:	f002 fad9 	bl	8003ac0 <sendCRC>
            sendCRC();
            break;

        case 'O': // Load Digital wavetable
        	loadDigitalTable();
        	resetState=0;  // State change
 800150e:	4840      	ldr	r0, [pc, #256]	; (8001610 <main+0x970>)
 8001510:	2300      	movs	r3, #0
 8001512:	6003      	str	r3, [r0, #0]
 8001514:	e670      	b.n	80011f8 <main+0x558>
void waveResponse()
 {
 int ticks;

 // Read number of waves before measurement
 w_n = getU16();
 8001516:	f003 f98b 	bl	8004830 <getU16>
 800151a:	492c      	ldr	r1, [pc, #176]	; (80015cc <main+0x92c>)

 if (w_s)
 800151c:	6822      	ldr	r2, [r4, #0]
void waveResponse()
 {
 int ticks;

 // Read number of waves before measurement
 w_n = getU16();
 800151e:	6008      	str	r0, [r1, #0]
 8001520:	460b      	mov	r3, r1

 if (w_s)
     {
	 // There is a primary wave
	 // Convert to cycles
	 w_n = w_n*w_s;
 8001522:	6809      	ldr	r1, [r1, #0]
 int ticks;

 // Read number of waves before measurement
 w_n = getU16();

 if (w_s)
 8001524:	b90a      	cbnz	r2, 800152a <main+0x88a>
     }
    else
     {
     // There is no primary wave
     // Use digital wave if present
	 w_n = w_n*w_d;
 8001526:	4d3b      	ldr	r5, [pc, #236]	; (8001614 <main+0x974>)
 8001528:	682a      	ldr	r2, [r5, #0]
 800152a:	fb02 f201 	mul.w	r2, r2, r1
 800152e:	601a      	str	r2, [r3, #0]
     }



 // Check of CRC
 if (!crcResponse()) return;
 8001530:	f003 f946 	bl	80047c0 <crcResponse>
 8001534:	2800      	cmp	r0, #0
 8001536:	f43f ae5f 	beq.w	80011f8 <main+0x558>
 endTicker = 0;             // Ticker has not ended
 w_pos = 0;                 // Current wave position
 w_posd = 0;				// Current digital wave position

 // Current size for buffer
 if (n_di)
 800153a:	4e25      	ldr	r6, [pc, #148]	; (80015d0 <main+0x930>)
 // Configure ticker ISR
 samples = 0;               // Number of processed samples
 inBuffPos = 0;             // Current buffer position
 endTicker = 0;             // Ticker has not ended
 w_pos = 0;                 // Current wave position
 w_posd = 0;				// Current digital wave position
 800153c:	4d28      	ldr	r5, [pc, #160]	; (80015e0 <main+0x940>)


 // Check of CRC
 if (!crcResponse()) return;

 sendByte(ACK);
 800153e:	20b5      	movs	r0, #181	; 0xb5
 8001540:	f002 face 	bl	8003ae0 <sendByte>

 // Enable AC operation
 ACenable();
 8001544:	f003 f85c 	bl	8004600 <ACenable>

 // Configure ticker ISR
 samples = 0;               // Number of processed samples
 8001548:	f8df c088 	ldr.w	ip, [pc, #136]	; 80015d4 <main+0x934>
 inBuffPos = 0;             // Current buffer position
 endTicker = 0;             // Ticker has not ended
 w_pos = 0;                 // Current wave position
 800154c:	482d      	ldr	r0, [pc, #180]	; (8001604 <main+0x964>)
 // Enable AC operation
 ACenable();

 // Configure ticker ISR
 samples = 0;               // Number of processed samples
 inBuffPos = 0;             // Current buffer position
 800154e:	4922      	ldr	r1, [pc, #136]	; (80015d8 <main+0x938>)
 endTicker = 0;             // Ticker has not ended
 w_pos = 0;                 // Current wave position
 w_posd = 0;				// Current digital wave position

 // Current size for buffer
 if (n_di)
 8001550:	6832      	ldr	r2, [r6, #0]

 // Enable AC operation
 ACenable();

 // Configure ticker ISR
 samples = 0;               // Number of processed samples
 8001552:	2300      	movs	r3, #0
 inBuffPos = 0;             // Current buffer position
 endTicker = 0;             // Ticker has not ended
 8001554:	f8cb 3000 	str.w	r3, [fp]

 // Enable AC operation
 ACenable();

 // Configure ticker ISR
 samples = 0;               // Number of processed samples
 8001558:	f8cc 3000 	str.w	r3, [ip]
 inBuffPos = 0;             // Current buffer position
 endTicker = 0;             // Ticker has not ended
 w_pos = 0;                 // Current wave position
 800155c:	6003      	str	r3, [r0, #0]
 // Enable AC operation
 ACenable();

 // Configure ticker ISR
 samples = 0;               // Number of processed samples
 inBuffPos = 0;             // Current buffer position
 800155e:	600b      	str	r3, [r1, #0]
 endTicker = 0;             // Ticker has not ended
 w_pos = 0;                 // Current wave position
 w_posd = 0;				// Current digital wave position
 8001560:	602b      	str	r3, [r5, #0]

 // Current size for buffer
 if (n_di)
 8001562:	2a00      	cmp	r2, #0
 8001564:	f001 80af 	beq.w	80026c6 <main+0x1a26>
	 currentBsize = (n_ai+1) * n_s;
 8001568:	4e1e      	ldr	r6, [pc, #120]	; (80015e4 <main+0x944>)
 800156a:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 800161c <main+0x97c>
 800156e:	6832      	ldr	r2, [r6, #0]
 8001570:	f8dc 3000 	ldr.w	r3, [ip]
 8001574:	481c      	ldr	r0, [pc, #112]	; (80015e8 <main+0x948>)
 8001576:	fb02 3303 	mla	r3, r2, r3, r3
 800157a:	6003      	str	r3, [r0, #0]
   else
     currentBsize = n_ai * n_s;

 // Clear overrun variables
 overrun_error = 0;
 800157c:	f8df c088 	ldr.w	ip, [pc, #136]	; 8001608 <main+0x968>
 overrun = 0;

 // Store digital wave base
 waved_base = (DIO_PORT -> ODR)&(~waved_mask);
 8001580:	481a      	ldr	r0, [pc, #104]	; (80015ec <main+0x94c>)
 8001582:	4a1b      	ldr	r2, [pc, #108]	; (80015f0 <main+0x950>)
 8001584:	491b      	ldr	r1, [pc, #108]	; (80015f4 <main+0x954>)
	 currentBsize = (n_ai+1) * n_s;
   else
     currentBsize = n_ai * n_s;

 // Clear overrun variables
 overrun_error = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	f8cc 3000 	str.w	r3, [ip]
 overrun = 0;
 800158c:	603b      	str	r3, [r7, #0]

 // Store digital wave base
 waved_base = (DIO_PORT -> ODR)&(~waved_mask);
 800158e:	6952      	ldr	r2, [r2, #20]
 8001590:	6803      	ldr	r3, [r0, #0]

 // Programs the ticker
 gptStart(&GPTD3, &waveCFG);
 8001592:	4821      	ldr	r0, [pc, #132]	; (8001618 <main+0x978>)
 // Clear overrun variables
 overrun_error = 0;
 overrun = 0;

 // Store digital wave base
 waved_base = (DIO_PORT -> ODR)&(~waved_mask);
 8001594:	ea22 0303 	bic.w	r3, r2, r3
 8001598:	600b      	str	r3, [r1, #0]

 // Programs the ticker
 gptStart(&GPTD3, &waveCFG);
 800159a:	f002 fff1 	bl	8004580 <gptStart.constprop.14>
 ticks = (int) TIM_FREQ_F*stime;
 800159e:	4a17      	ldr	r2, [pc, #92]	; (80015fc <main+0x95c>)
 80015a0:	edd2 7a00 	vldr	s15, [r2]
 80015a4:	ee67 7a88 	vmul.f32	s15, s15, s16
 gptStartContinuous(&GPTD3,ticks);
 80015a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015ac:	ee17 0a90 	vmov	r0, s15
 80015b0:	f001 fc7e 	bl	8002eb0 <gptStartContinuous.constprop.10>

 // Wait till end
 while (!endTicker) overrun = 0;
 80015b4:	f8db 2000 	ldr.w	r2, [fp]
 80015b8:	2a00      	cmp	r2, #0
 80015ba:	f47f af21 	bne.w	8001400 <main+0x760>
 80015be:	603a      	str	r2, [r7, #0]
 80015c0:	f8db 3000 	ldr.w	r3, [fp]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d0fa      	beq.n	80015be <main+0x91e>
 80015c8:	e71a      	b.n	8001400 <main+0x760>
 80015ca:	bf00      	nop
 80015cc:	20000818 	.word	0x20000818
 80015d0:	20000f40 	.word	0x20000f40
 80015d4:	20000c58 	.word	0x20000c58
 80015d8:	20000e58 	.word	0x20000e58
 80015dc:	20000e38 	.word	0x20000e38
 80015e0:	20000f64 	.word	0x20000f64
 80015e4:	20000804 	.word	0x20000804
 80015e8:	20000c98 	.word	0x20000c98
 80015ec:	20000cb4 	.word	0x20000cb4
 80015f0:	48000800 	.word	0x48000800
 80015f4:	20000cb0 	.word	0x20000cb0
 80015f8:	080063c8 	.word	0x080063c8
 80015fc:	2000080c 	.word	0x2000080c
 8001600:	2000f9d8 	.word	0x2000f9d8
 8001604:	20000e50 	.word	0x20000e50
 8001608:	20000c90 	.word	0x20000c90
 800160c:	080063e8 	.word	0x080063e8
 8001610:	20000810 	.word	0x20000810
 8001614:	20000f44 	.word	0x20000f44
 8001618:	08006388 	.word	0x08006388
 800161c:	20000814 	.word	0x20000814
 {
 int sample_size,size;
 int error = 0;

 // Get number of analog inputs
 n_ai = getByte();
 8001620:	f003 f8f6 	bl	8004810 <getByte>
 8001624:	4e94      	ldr	r6, [pc, #592]	; (8001878 <main+0xbd8>)
 8001626:	4605      	mov	r5, r0
 8001628:	6030      	str	r0, [r6, #0]
 if (n_ai > 4) error = 1;

 // Get number of digital inputs
 n_di = getByte();
 800162a:	f003 f8f1 	bl	8004810 <getByte>
 800162e:	f8df c250 	ldr.w	ip, [pc, #592]	; 8001880 <main+0xbe0>
 if (n_di >= NDIO) error = 1;
 8001632:	280c      	cmp	r0, #12
 // Get number of analog inputs
 n_ai = getByte();
 if (n_ai > 4) error = 1;

 // Get number of digital inputs
 n_di = getByte();
 8001634:	f8cc 0000 	str.w	r0, [ip]
 if (n_di >= NDIO) error = 1;
 8001638:	f300 86d8 	bgt.w	80023ec <main+0x174c>
 int sample_size,size;
 int error = 0;

 // Get number of analog inputs
 n_ai = getByte();
 if (n_ai > 4) error = 1;
 800163c:	2d04      	cmp	r5, #4
 800163e:	bfd4      	ite	le
 8001640:	2500      	movle	r5, #0
 8001642:	2501      	movgt	r5, #1
 // Get number of digital inputs
 n_di = getByte();
 if (n_di >= NDIO) error = 1;

 // Get the number of samples
 n_s = getU16();
 8001644:	f003 f8f4 	bl	8004830 <getU16>
 8001648:	498c      	ldr	r1, [pc, #560]	; (800187c <main+0xbdc>)
 800164a:	6008      	str	r0, [r1, #0]

 // End of message, check CRC
 if (!crcResponse()) return;
 800164c:	f003 f8b8 	bl	80047c0 <crcResponse>
 8001650:	b300      	cbz	r0, 8001694 <main+0x9f4>

 // Check if it fits the buffer
 if (n_di)
 8001652:	4a8b      	ldr	r2, [pc, #556]	; (8001880 <main+0xbe0>)
 8001654:	6813      	ldr	r3, [r2, #0]
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 8704 	beq.w	8002464 <main+0x17c4>
    sample_size = n_ai+1;
 800165c:	4b86      	ldr	r3, [pc, #536]	; (8001878 <main+0xbd8>)
 800165e:	6818      	ldr	r0, [r3, #0]
 8001660:	3001      	adds	r0, #1
// Calculates available transize
static inline uint16_t tranBuffSize(void)
 {
 uint16_t size;

 size = BSIZE - w_s - w_s2;
 8001662:	f8df c22c 	ldr.w	ip, [pc, #556]	; 8001890 <main+0xbf0>
 8001666:	6823      	ldr	r3, [r4, #0]
 8001668:	f8dc 1000 	ldr.w	r1, [ip]
 if (n_di)
    sample_size = n_ai+1;
    else
    sample_size = n_ai;

 size = n_s*sample_size;
 800166c:	4e83      	ldr	r6, [pc, #524]	; (800187c <main+0xbdc>)
 800166e:	440b      	add	r3, r1
 8001670:	6832      	ldr	r2, [r6, #0]
// Calculates available transize
static inline uint16_t tranBuffSize(void)
 {
 uint16_t size;

 size = BSIZE - w_s - w_s2;
 8001672:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 8001676:	3330      	adds	r3, #48	; 0x30
    sample_size = n_ai+1;
    else
    sample_size = n_ai;

 size = n_s*sample_size;
 if (size > tranBuffSize()) error = 1;
 8001678:	b29b      	uxth	r3, r3
 if (n_di)
    sample_size = n_ai+1;
    else
    sample_size = n_ai;

 size = n_s*sample_size;
 800167a:	fb02 f200 	mul.w	r2, r2, r0
 if (size > tranBuffSize()) error = 1;
 800167e:	429a      	cmp	r2, r3
 8001680:	f300 86eb 	bgt.w	800245a <main+0x17ba>

 // Response depending on errors
 if (error)
 8001684:	2d00      	cmp	r5, #0
 8001686:	f040 86e8 	bne.w	800245a <main+0x17ba>
	 palWritePad(DIO_PORT,DIO_PIN0+line,PAL_HIGH);
     else
     palWritePad(DIO_PORT,DIO_PIN0+line,PAL_LOW);

 // Send ACK and CRC
 sendByte(ACK);
 800168a:	20b5      	movs	r0, #181	; 0xb5
 800168c:	f002 fa28 	bl	8003ae0 <sendByte>
 sendCRC();
 8001690:	f002 fa16 	bl	8003ac0 <sendCRC>
            resetState=0;  // State change
            break;

        case 'J': // DIO Write
            dioWrite();
            resetState=0;  // State change
 8001694:	f8df c220 	ldr.w	ip, [pc, #544]	; 80018b8 <main+0xc18>
 8001698:	2300      	movs	r3, #0
 800169a:	f8cc 3000 	str.w	r3, [ip]
 800169e:	e5ab      	b.n	80011f8 <main+0x558>
void singleWaveResponse(void)
 {
 int ticks;

 // Read channel to read
 channelAC = getByte();
 80016a0:	f003 f8b6 	bl	8004810 <getByte>
 80016a4:	4b77      	ldr	r3, [pc, #476]	; (8001884 <main+0xbe4>)

 // Read number of waves before measurement
 w_n = getU16();
 80016a6:	4d78      	ldr	r5, [pc, #480]	; (8001888 <main+0xbe8>)
void singleWaveResponse(void)
 {
 int ticks;

 // Read channel to read
 channelAC = getByte();
 80016a8:	6018      	str	r0, [r3, #0]

 // Read number of waves before measurement
 w_n = getU16();
 80016aa:	f003 f8c1 	bl	8004830 <getU16>
 // Make zero if no primary waves
 if (!w_s) w_n = 0;
 80016ae:	6823      	ldr	r3, [r4, #0]

 // Read channel to read
 channelAC = getByte();

 // Read number of waves before measurement
 w_n = getU16();
 80016b0:	6028      	str	r0, [r5, #0]
 // Make zero if no primary waves
 if (!w_s) w_n = 0;
 80016b2:	b903      	cbnz	r3, 80016b6 <main+0xa16>
 80016b4:	602b      	str	r3, [r5, #0]

 // Convert to cycles
 w_n = w_n*w_s;
 80016b6:	4e74      	ldr	r6, [pc, #464]	; (8001888 <main+0xbe8>)
 80016b8:	6832      	ldr	r2, [r6, #0]
 80016ba:	fb02 f303 	mul.w	r3, r2, r3
 80016be:	6033      	str	r3, [r6, #0]

 // Check of CRC
 if (!crcResponse()) return;
 80016c0:	f003 f87e 	bl	80047c0 <crcResponse>
 80016c4:	2800      	cmp	r0, #0
 80016c6:	f43f ad97 	beq.w	80011f8 <main+0x558>

 // Send ACK
 sendByte(ACK);
 80016ca:	20b5      	movs	r0, #181	; 0xb5
 80016cc:	f002 fa08 	bl	8003ae0 <sendByte>

// Use instead of ACenable()

void setADforAC(int n)
 {
 switch(n)
 80016d0:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8001884 <main+0xbe4>
 80016d4:	f8dc 3000 	ldr.w	r3, [ip]
 80016d8:	3b01      	subs	r3, #1
 80016da:	2b07      	cmp	r3, #7
 80016dc:	f200 8548 	bhi.w	8002170 <main+0x14d0>
 80016e0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80016e4:	06650649 	.word	0x06650649
 80016e8:	062f0638 	.word	0x062f0638
 80016ec:	05c90616 	.word	0x05c90616
 80016f0:	0535059e 	.word	0x0535059e
 {
 int i;

 // Eliminate secondary and digital wavetables
 w_s2 = 0;
 w_d  = 0;
 80016f4:	4a65      	ldr	r2, [pc, #404]	; (800188c <main+0xbec>)
void loadWaveTable(void)
 {
 int i;

 // Eliminate secondary and digital wavetables
 w_s2 = 0;
 80016f6:	4966      	ldr	r1, [pc, #408]	; (8001890 <main+0xbf0>)
 80016f8:	2500      	movs	r5, #0
 w_d  = 0;
 80016fa:	6015      	str	r5, [r2, #0]
void loadWaveTable(void)
 {
 int i;

 // Eliminate secondary and digital wavetables
 w_s2 = 0;
 80016fc:	600d      	str	r5, [r1, #0]
 w_d  = 0;

 // Get size
 w_s = getU16();
 80016fe:	f003 f897 	bl	8004830 <getU16>

 // Check size
 if (w_s > BSIZE)
 8001702:	f247 5330 	movw	r3, #30000	; 0x7530
 8001706:	4298      	cmp	r0, r3
 // Eliminate secondary and digital wavetables
 w_s2 = 0;
 w_d  = 0;

 // Get size
 w_s = getU16();
 8001708:	6020      	str	r0, [r4, #0]
 800170a:	4a62      	ldr	r2, [pc, #392]	; (8001894 <main+0xbf4>)

 // Check size
 if (w_s > BSIZE)
 800170c:	f300 87b1 	bgt.w	8002672 <main+0x19d2>
    sendCRC();
    return;
    }

 // Calculate new memory configuration
 wave2buff=&buff[w_s];
 8001710:	4961      	ldr	r1, [pc, #388]	; (8001898 <main+0xbf8>)
 8001712:	4a62      	ldr	r2, [pc, #392]	; (800189c <main+0xbfc>)
 waveDbuff=&buff[w_s];
 8001714:	4e62      	ldr	r6, [pc, #392]	; (80018a0 <main+0xc00>)
 tranBuff =&buff[w_s];
 8001716:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 80018d0 <main+0xc30>
    sendCRC();
    return;
    }

 // Calculate new memory configuration
 wave2buff=&buff[w_s];
 800171a:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 tranBuff =&buff[w_s];

 if (w_s > 0)
   {
   // Load samples
   for(i=0;i<w_s;i++)
 800171e:	2800      	cmp	r0, #0
    sendCRC();
    return;
    }

 // Calculate new memory configuration
 wave2buff=&buff[w_s];
 8001720:	6013      	str	r3, [r2, #0]
 waveDbuff=&buff[w_s];
 8001722:	6033      	str	r3, [r6, #0]
 tranBuff =&buff[w_s];
 8001724:	f8cc 3000 	str.w	r3, [ip]

 if (w_s > 0)
   {
   // Load samples
   for(i=0;i<w_s;i++)
 8001728:	f77f add5 	ble.w	80012d6 <main+0x636>
 800172c:	4e5d      	ldr	r6, [pc, #372]	; (80018a4 <main+0xc04>)
      buff[i] = getU16();
 800172e:	f003 f87f 	bl	8004830 <getU16>
 tranBuff =&buff[w_s];

 if (w_s > 0)
   {
   // Load samples
   for(i=0;i<w_s;i++)
 8001732:	6823      	ldr	r3, [r4, #0]
      buff[i] = getU16();
 8001734:	f826 0f02 	strh.w	r0, [r6, #2]!
 tranBuff =&buff[w_s];

 if (w_s > 0)
   {
   // Load samples
   for(i=0;i<w_s;i++)
 8001738:	3501      	adds	r5, #1
 800173a:	429d      	cmp	r5, r3
 800173c:	dbf7      	blt.n	800172e <main+0xa8e>
 if (w_d > 0)
    for(i=0;i<w_d;i++)
       waveDbuff[i] = waved_mask & getU16();

 // Check of CRC
 if (!crcResponse()) return;
 800173e:	f003 f83f 	bl	80047c0 <crcResponse>
 8001742:	2800      	cmp	r0, #0
 8001744:	f43f aee3 	beq.w	800150e <main+0x86e>
 8001748:	e5ca      	b.n	80012e0 <main+0x640>
// Get one byte from the serial stream and computes crc
int getByte(void)
 {
 int byte;

 byte = sdGet(&SDRIVER);
 800174a:	f04f 31ff 	mov.w	r1, #4294967295
 800174e:	4856      	ldr	r0, [pc, #344]	; (80018a8 <main+0xc08>)
 8001750:	f003 f806 	bl	8004760 <iqGetTimeout>
 crcRx = crcRx ^ byte;
 8001754:	f8d8 3000 	ldr.w	r3, [r8]
 8001758:	4043      	eors	r3, r0
 800175a:	f8c8 3000 	str.w	r3, [r8]
// Get one byte from the serial stream and computes crc
int getByte(void)
 {
 int byte;

 byte = sdGet(&SDRIVER);
 800175e:	4606      	mov	r6, r0
 {
 int exp,mant;
 float value;

 exp = getByte() - 128;
 mant = getU16() - 20000;
 8001760:	f003 f866 	bl	8004830 <getU16>
 8001764:	4605      	mov	r5, r0
float getFloat(void)
 {
 int exp,mant;
 float value;

 exp = getByte() - 128;
 8001766:	f1a6 0080 	sub.w	r0, r6, #128	; 0x80
 mant = getU16() - 20000;

 value = ((float)mant) * pow((float)10.0,(float)exp);
 800176a:	ee07 0a90 	vmov	s15, r0
 800176e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001772:	ee17 0a90 	vmov	r0, s15
 8001776:	f7fe ff55 	bl	8000624 <__aeabi_f2d>
 800177a:	ed9f 0b3d 	vldr	d0, [pc, #244]	; 8001870 <main+0xbd0>
 800177e:	ec41 0b11 	vmov	d1, r0, r1
 8001782:	f003 fc85 	bl	8005090 <pow>
 {
 int exp,mant;
 float value;

 exp = getByte() - 128;
 mant = getU16() - 20000;
 8001786:	f5a5 409c 	sub.w	r0, r5, #19968	; 0x4e00
 800178a:	3820      	subs	r0, #32

 value = ((float)mant) * pow((float)10.0,(float)exp);
 800178c:	ee07 0a90 	vmov	s15, r0
 8001790:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001794:	ec53 2b10 	vmov	r2, r3, d0
 8001798:	ee17 0a90 	vmov	r0, s15
 800179c:	ed8d 0a03 	vstr	s0, [sp, #12]
 80017a0:	9302      	str	r3, [sp, #8]
 80017a2:	f7fe ff3f 	bl	8000624 <__aeabi_f2d>
 80017a6:	9a03      	ldr	r2, [sp, #12]
 80017a8:	9b02      	ldr	r3, [sp, #8]
 80017aa:	f7fe ff8f 	bl	80006cc <__aeabi_dmul>
 80017ae:	f7ff f99f 	bl	8000af0 <__aeabi_d2f>
 80017b2:	493e      	ldr	r1, [pc, #248]	; (80018ac <main+0xc0c>)
 80017b4:	6008      	str	r0, [r1, #0]
 {
 //Get sample time
 stime = getFloat();

 // End of message, check CRC
 if (!crcResponse()) return;
 80017b6:	f003 f803 	bl	80047c0 <crcResponse>
 80017ba:	b1b0      	cbz	r0, 80017ea <main+0xb4a>

 // Check limits
 if ((stime < MIN_STIME) || (stime > MAX_STIME))
 80017bc:	4a3b      	ldr	r2, [pc, #236]	; (80018ac <main+0xc0c>)
 80017be:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80018b0 <main+0xc10>
 80017c2:	edd2 7a00 	vldr	s15, [r2]
 80017c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ce:	d407      	bmi.n	80017e0 <main+0xb40>
 80017d0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80018b4 <main+0xc14>
 80017d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017dc:	f340 8785 	ble.w	80026ea <main+0x1a4a>
      sendByte(NACK);
 80017e0:	20e2      	movs	r0, #226	; 0xe2
 80017e2:	f002 f97d 	bl	8003ae0 <sendByte>
      else
      sendByte(ACK);

 // End of message
 sendCRC();
 80017e6:	f002 f96b 	bl	8003ac0 <sendCRC>
        resetState=0;  // State change
        break;

        case 'R': // Set sample period time
            setSampleTime();
            resetState=0;  // State change
 80017ea:	4d33      	ldr	r5, [pc, #204]	; (80018b8 <main+0xc18>)
 80017ec:	2300      	movs	r3, #0
 80017ee:	602b      	str	r3, [r5, #0]
 80017f0:	e502      	b.n	80011f8 <main+0x558>
void asyncRead(void)
 {
 int ticks; // Ticks for timer

 // Check of CRC
 if (!crcResponse()) return;
 80017f2:	f002 ffe5 	bl	80047c0 <crcResponse>
 80017f6:	2800      	cmp	r0, #0
 80017f8:	f43f acfe 	beq.w	80011f8 <main+0x558>

 // Send ACK to command
 sendByte(ACK);
 80017fc:	20b5      	movs	r0, #181	; 0xb5
 80017fe:	f002 f96f 	bl	8003ae0 <sendByte>

 // Enable AC operation
 ACenable();
 8001802:	f002 fefd 	bl	8004600 <ACenable>
 samples = 0;    // Number of processed samples
 inBuffPos = 0;  // Current buffer position
 endTicker = 0;  // Ticker has not ended

 // Current size for buffer
 if (n_di)
 8001806:	481e      	ldr	r0, [pc, #120]	; (8001880 <main+0xbe0>)

 // Enable AC operation
 ACenable();

 // Configure ticker ISR
 samples = 0;    // Number of processed samples
 8001808:	492c      	ldr	r1, [pc, #176]	; (80018bc <main+0xc1c>)
 inBuffPos = 0;  // Current buffer position
 800180a:	4d2d      	ldr	r5, [pc, #180]	; (80018c0 <main+0xc20>)
 endTicker = 0;  // Ticker has not ended

 // Current size for buffer
 if (n_di)
 800180c:	6802      	ldr	r2, [r0, #0]

 // Enable AC operation
 ACenable();

 // Configure ticker ISR
 samples = 0;    // Number of processed samples
 800180e:	2300      	movs	r3, #0
 8001810:	600b      	str	r3, [r1, #0]
 inBuffPos = 0;  // Current buffer position
 8001812:	602b      	str	r3, [r5, #0]
 endTicker = 0;  // Ticker has not ended
 8001814:	f8cb 3000 	str.w	r3, [fp]

 // Current size for buffer
 if (n_di)
 8001818:	2a00      	cmp	r2, #0
 800181a:	f000 8740 	beq.w	800269e <main+0x19fe>
	 currentBsize = (n_ai+1) * n_s;
 800181e:	4e16      	ldr	r6, [pc, #88]	; (8001878 <main+0xbd8>)
 8001820:	f8df c058 	ldr.w	ip, [pc, #88]	; 800187c <main+0xbdc>
 8001824:	6832      	ldr	r2, [r6, #0]
 8001826:	f8dc 3000 	ldr.w	r3, [ip]
 800182a:	4826      	ldr	r0, [pc, #152]	; (80018c4 <main+0xc24>)
 800182c:	fb02 3303 	mla	r3, r2, r3, r3
 8001830:	6003      	str	r3, [r0, #0]
   else
     currentBsize = n_ai * n_s;

 // Clear overrun variables
 overrun_error = 0;
 8001832:	f8df c098 	ldr.w	ip, [pc, #152]	; 80018cc <main+0xc2c>
 overrun = 0;

 // Programs the timer
 gptStart(&GPTD3, &asyncCFG);
 8001836:	4824      	ldr	r0, [pc, #144]	; (80018c8 <main+0xc28>)
	 currentBsize = (n_ai+1) * n_s;
   else
     currentBsize = n_ai * n_s;

 // Clear overrun variables
 overrun_error = 0;
 8001838:	2300      	movs	r3, #0
 800183a:	f8cc 3000 	str.w	r3, [ip]
 overrun = 0;
 800183e:	603b      	str	r3, [r7, #0]

 // Programs the timer
 gptStart(&GPTD3, &asyncCFG);
 8001840:	f002 fe9e 	bl	8004580 <gptStart.constprop.14>
 ticks = (int) TIM_FREQ_F*stime;
 8001844:	4819      	ldr	r0, [pc, #100]	; (80018ac <main+0xc0c>)
 8001846:	edd0 7a00 	vldr	s15, [r0]
 800184a:	ee67 7a88 	vmul.f32	s15, s15, s16
 gptStartContinuous(&GPTD3,ticks);
 800184e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001852:	ee17 0a90 	vmov	r0, s15
 8001856:	f001 fb2b 	bl	8002eb0 <gptStartContinuous.constprop.10>

 // Wait till end
 while (!endTicker)
 800185a:	f8db 2000 	ldr.w	r2, [fp]
 800185e:	2a00      	cmp	r2, #0
 8001860:	f47f adce 	bne.w	8001400 <main+0x760>
          {
	      overrun = 0;
 8001864:	603a      	str	r2, [r7, #0]
 gptStart(&GPTD3, &asyncCFG);
 ticks = (int) TIM_FREQ_F*stime;
 gptStartContinuous(&GPTD3,ticks);

 // Wait till end
 while (!endTicker)
 8001866:	f8db 3000 	ldr.w	r3, [fp]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0fa      	beq.n	8001864 <main+0xbc4>
 800186e:	e5c7      	b.n	8001400 <main+0x760>
 8001870:	00000000 	.word	0x00000000
 8001874:	40240000 	.word	0x40240000
 8001878:	20000804 	.word	0x20000804
 800187c:	20000814 	.word	0x20000814
 8001880:	20000f40 	.word	0x20000f40
 8001884:	20000e54 	.word	0x20000e54
 8001888:	20000818 	.word	0x20000818
 800188c:	20000f44 	.word	0x20000f44
 8001890:	20000c8c 	.word	0x20000c8c
 8001894:	2000f9cc 	.word	0x2000f9cc
 8001898:	20000f6c 	.word	0x20000f6c
 800189c:	20000cd0 	.word	0x20000cd0
 80018a0:	20000f4c 	.word	0x20000f4c
 80018a4:	20000f6a 	.word	0x20000f6a
 80018a8:	20000e6c 	.word	0x20000e6c
 80018ac:	2000080c 	.word	0x2000080c
 80018b0:	377ba882 	.word	0x377ba882
 80018b4:	42700000 	.word	0x42700000
 80018b8:	20000810 	.word	0x20000810
 80018bc:	20000c58 	.word	0x20000c58
 80018c0:	20000e58 	.word	0x20000e58
 80018c4:	20000c98 	.word	0x20000c98
 80018c8:	08006378 	.word	0x08006378
 80018cc:	20000c90 	.word	0x20000c90
 80018d0:	20000cb8 	.word	0x20000cb8
void wavePlay()
 {
 int ticks;

 // Read number of waves to send
 infiniteWave = 0;
 80018d4:	49b2      	ldr	r1, [pc, #712]	; (8001ba0 <main+0xf00>)
 80018d6:	2300      	movs	r3, #0
 80018d8:	600b      	str	r3, [r1, #0]
 w_n = getU16();
 80018da:	f002 ffa9 	bl	8004830 <getU16>
 80018de:	4ab1      	ldr	r2, [pc, #708]	; (8001ba4 <main+0xf04>)
 80018e0:	6010      	str	r0, [r2, #0]
 if (w_n==0)
 80018e2:	6813      	ldr	r3, [r2, #0]
void wavePlay()
 {
 int ticks;

 // Read number of waves to send
 infiniteWave = 0;
 80018e4:	4aae      	ldr	r2, [pc, #696]	; (8001ba0 <main+0xf00>)
 w_n = getU16();
 if (w_n==0)
 80018e6:	b90b      	cbnz	r3, 80018ec <main+0xc4c>
       infiniteWave = 1;
 80018e8:	2301      	movs	r3, #1
 80018ea:	6013      	str	r3, [r2, #0]

 if (w_s)
 80018ec:	6823      	ldr	r3, [r4, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 858c 	beq.w	800240c <main+0x176c>
     {
	 // There is a primary wave
	 // Convert to cycles
	 w_n = w_n*w_s;
 80018f4:	4dab      	ldr	r5, [pc, #684]	; (8001ba4 <main+0xf04>)
 80018f6:	682a      	ldr	r2, [r5, #0]
 80018f8:	fb02 f303 	mul.w	r3, r2, r3
 80018fc:	602b      	str	r3, [r5, #0]
     // Use digital wave if present
	 w_n = w_n*w_d;
     }

 // Check of CRC
 if (!crcResponse()) return;
 80018fe:	f002 ff5f 	bl	80047c0 <crcResponse>
 8001902:	2800      	cmp	r0, #0
 8001904:	f43f ac78 	beq.w	80011f8 <main+0x558>

 sendByte(ACK);
 8001908:	20b5      	movs	r0, #181	; 0xb5
 800190a:	f002 f8e9 	bl	8003ae0 <sendByte>
 endTicker = 0;             // Ticker has not ended
 w_pos = 0;                 // Current wave position
 w_posd = 0;				// Current digital wave position

 // Clear overrun variables
 overrun_error = 0;
 800190e:	4da6      	ldr	r5, [pc, #664]	; (8001ba8 <main+0xf08>)
 overrun = 0;

 // Programs the ticker
 gptStart(&GPTD3, &wavePlayCFG);
 ticks = (int) TIM_FREQ_F*stime;
 8001910:	4ea6      	ldr	r6, [pc, #664]	; (8001bac <main+0xf0c>)
 if (!crcResponse()) return;

 sendByte(ACK);

 // Enable AC operation
 ACenable();
 8001912:	f002 fe75 	bl	8004600 <ACenable>

 // Configure ticker ISR
 endTicker = 0;             // Ticker has not ended
 w_pos = 0;                 // Current wave position
 w_posd = 0;				// Current digital wave position
 8001916:	4aa6      	ldr	r2, [pc, #664]	; (8001bb0 <main+0xf10>)
 // Enable AC operation
 ACenable();

 // Configure ticker ISR
 endTicker = 0;             // Ticker has not ended
 w_pos = 0;                 // Current wave position
 8001918:	49a6      	ldr	r1, [pc, #664]	; (8001bb4 <main+0xf14>)
 // Clear overrun variables
 overrun_error = 0;
 overrun = 0;

 // Programs the ticker
 gptStart(&GPTD3, &wavePlayCFG);
 800191a:	48a7      	ldr	r0, [pc, #668]	; (8001bb8 <main+0xf18>)

 // Enable AC operation
 ACenable();

 // Configure ticker ISR
 endTicker = 0;             // Ticker has not ended
 800191c:	2300      	movs	r3, #0
 800191e:	f8cb 3000 	str.w	r3, [fp]
 w_pos = 0;                 // Current wave position
 8001922:	600b      	str	r3, [r1, #0]
 w_posd = 0;				// Current digital wave position
 8001924:	6013      	str	r3, [r2, #0]

 // Clear overrun variables
 overrun_error = 0;
 8001926:	602b      	str	r3, [r5, #0]
 overrun = 0;
 8001928:	603b      	str	r3, [r7, #0]

 // Programs the ticker
 gptStart(&GPTD3, &wavePlayCFG);
 800192a:	f002 fe29 	bl	8004580 <gptStart.constprop.14>
 ticks = (int) TIM_FREQ_F*stime;
 800192e:	edd6 7a00 	vldr	s15, [r6]
 8001932:	ee67 7a88 	vmul.f32	s15, s15, s16
 gptStartContinuous(&GPTD3,ticks);
 8001936:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800193a:	ee17 0a90 	vmov	r0, s15
 800193e:	f001 fab7 	bl	8002eb0 <gptStartContinuous.constprop.10>

 // Wait till end
 while (!endTicker) overrun = 0;
 8001942:	f8db 2000 	ldr.w	r2, [fp]
 8001946:	b922      	cbnz	r2, 8001952 <main+0xcb2>
 8001948:	603a      	str	r2, [r7, #0]
 800194a:	f8db 3000 	ldr.w	r3, [fp]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0fa      	beq.n	8001948 <main+0xca8>

 // Disable gpt
 gptStopTimer(&GPTD3);
 8001952:	f001 facd 	bl	8002ef0 <gptStopTimer.constprop.8>
 gptStop(&GPTD3);
 8001956:	f001 fa83 	bl	8002e60 <gptStop.constprop.12>

 // Disable AC operation
 ACdisable();
 800195a:	f001 fc41 	bl	80031e0 <ACdisable>

 // Response code
 if (halt)
 800195e:	f8da 3000 	ldr.w	r3, [sl]
 8001962:	2b00      	cmp	r3, #0
 8001964:	f040 855d 	bne.w	8002422 <main+0x1782>
    sendByte(TRAN_HALT);
    else
     if (overrun_error)
 8001968:	f8df c23c 	ldr.w	ip, [pc, #572]	; 8001ba8 <main+0xf08>
 800196c:	f8dc 3000 	ldr.w	r3, [ip]
 8001970:	2b00      	cmp	r3, #0
 8001972:	f000 810d 	beq.w	8001b90 <main+0xef0>
        return;
        }

  if (overrun_error)
        {
        sendByte(TRAN_OVERRUN);
 8001976:	2001      	movs	r0, #1
 8001978:	f002 f8b2 	bl	8003ae0 <sendByte>
 800197c:	e10b      	b.n	8001b96 <main+0xef6>
void stepResponse(void)
 {
 int ticks; // Ticks for timer

 // Read step value
 stepValue = getU16();
 800197e:	f002 ff57 	bl	8004830 <getU16>
 8001982:	4b8e      	ldr	r3, [pc, #568]	; (8001bbc <main+0xf1c>)
 8001984:	6018      	str	r0, [r3, #0]

 // Check of CRC
 if (!crcResponse()) return;
 8001986:	f002 ff1b 	bl	80047c0 <crcResponse>
 800198a:	2800      	cmp	r0, #0
 800198c:	f43f ac34 	beq.w	80011f8 <main+0x558>
 // Configure ticker ISR
 samples = 0;               // Number of processed samples
 inBuffPos = 0;             // Current buffer position
 endTicker = 0;            // Ticker has not ended

 triggerSample = n_s/5;
 8001990:	4d8b      	ldr	r5, [pc, #556]	; (8001bc0 <main+0xf20>)

 // Current size for buffer
 if (n_di)
 8001992:	4e8c      	ldr	r6, [pc, #560]	; (8001bc4 <main+0xf24>)
 stepValue = getU16();

 // Check of CRC
 if (!crcResponse()) return;

 sendByte(ACK); // All Ok
 8001994:	20b5      	movs	r0, #181	; 0xb5
 8001996:	f002 f8a3 	bl	8003ae0 <sendByte>

 // Enable AC operation
 ACenable();
 800199a:	f002 fe31 	bl	8004600 <ACenable>
 // Configure ticker ISR
 samples = 0;               // Number of processed samples
 inBuffPos = 0;             // Current buffer position
 endTicker = 0;            // Ticker has not ended

 triggerSample = n_s/5;
 800199e:	682b      	ldr	r3, [r5, #0]
 80019a0:	4889      	ldr	r0, [pc, #548]	; (8001bc8 <main+0xf28>)

 // Current size for buffer
 if (n_di)
 80019a2:	6831      	ldr	r1, [r6, #0]

 // Enable AC operation
 ACenable();

 // Configure ticker ISR
 samples = 0;               // Number of processed samples
 80019a4:	4d89      	ldr	r5, [pc, #548]	; (8001bcc <main+0xf2c>)
 inBuffPos = 0;             // Current buffer position
 endTicker = 0;            // Ticker has not ended

 triggerSample = n_s/5;
 80019a6:	4e8a      	ldr	r6, [pc, #552]	; (8001bd0 <main+0xf30>)
 80019a8:	fb80 c003 	smull	ip, r0, r0, r3
 80019ac:	17da      	asrs	r2, r3, #31
 // Enable AC operation
 ACenable();

 // Configure ticker ISR
 samples = 0;               // Number of processed samples
 inBuffPos = 0;             // Current buffer position
 80019ae:	f8df c264 	ldr.w	ip, [pc, #612]	; 8001c14 <main+0xf74>
 endTicker = 0;            // Ticker has not ended

 triggerSample = n_s/5;
 80019b2:	ebc2 0060 	rsb	r0, r2, r0, asr #1

 // Enable AC operation
 ACenable();

 // Configure ticker ISR
 samples = 0;               // Number of processed samples
 80019b6:	2200      	movs	r2, #0
 inBuffPos = 0;             // Current buffer position
 endTicker = 0;            // Ticker has not ended
 80019b8:	f8cb 2000 	str.w	r2, [fp]

 // Enable AC operation
 ACenable();

 // Configure ticker ISR
 samples = 0;               // Number of processed samples
 80019bc:	602a      	str	r2, [r5, #0]
 inBuffPos = 0;             // Current buffer position
 endTicker = 0;            // Ticker has not ended

 triggerSample = n_s/5;
 80019be:	6030      	str	r0, [r6, #0]
 // Enable AC operation
 ACenable();

 // Configure ticker ISR
 samples = 0;               // Number of processed samples
 inBuffPos = 0;             // Current buffer position
 80019c0:	f8cc 2000 	str.w	r2, [ip]
 endTicker = 0;            // Ticker has not ended

 triggerSample = n_s/5;

 // Current size for buffer
 if (n_di)
 80019c4:	2900      	cmp	r1, #0
 80019c6:	f000 8688 	beq.w	80026da <main+0x1a3a>
	 currentBsize = (n_ai+1) * n_s;
 80019ca:	4882      	ldr	r0, [pc, #520]	; (8001bd4 <main+0xf34>)
 80019cc:	4982      	ldr	r1, [pc, #520]	; (8001bd8 <main+0xf38>)
 80019ce:	6802      	ldr	r2, [r0, #0]
 80019d0:	fb02 3303 	mla	r3, r2, r3, r3
 80019d4:	600b      	str	r3, [r1, #0]
   else
     currentBsize = n_ai * n_s;

 // Clear overrun variables
 overrun_error = 0;
 80019d6:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 8001ba8 <main+0xf08>
 overrun = 0;

 // Programs the ticker
 gptStart(&GPTD3, &stepCFG);
 80019da:	4880      	ldr	r0, [pc, #512]	; (8001bdc <main+0xf3c>)
	 currentBsize = (n_ai+1) * n_s;
   else
     currentBsize = n_ai * n_s;

 // Clear overrun variables
 overrun_error = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	f8cc 3000 	str.w	r3, [ip]
 overrun = 0;
 80019e2:	603b      	str	r3, [r7, #0]

 // Programs the ticker
 gptStart(&GPTD3, &stepCFG);
 80019e4:	f002 fdcc 	bl	8004580 <gptStart.constprop.14>
 ticks = (int) TIM_FREQ_F*stime;
 80019e8:	4870      	ldr	r0, [pc, #448]	; (8001bac <main+0xf0c>)
 80019ea:	edd0 7a00 	vldr	s15, [r0]
 80019ee:	ee67 7a88 	vmul.f32	s15, s15, s16
 gptStartContinuous(&GPTD3,ticks);
 80019f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019f6:	ee17 0a90 	vmov	r0, s15
 80019fa:	f001 fa59 	bl	8002eb0 <gptStartContinuous.constprop.10>

 // Wait till end
 while (!endTicker) overrun = 0;
 80019fe:	f8db 2000 	ldr.w	r2, [fp]
 8001a02:	2a00      	cmp	r2, #0
 8001a04:	f47f acfc 	bne.w	8001400 <main+0x760>
 8001a08:	603a      	str	r2, [r7, #0]
 8001a0a:	f8db 3000 	ldr.w	r3, [fp]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d0fa      	beq.n	8001a08 <main+0xd68>
 8001a12:	e4f5      	b.n	8001400 <main+0x760>
void loadDigitalTable(void)
 {
 int i;

 // Get size
 w_d = getU16();
 8001a14:	f002 ff0c 	bl	8004830 <getU16>
 8001a18:	4b71      	ldr	r3, [pc, #452]	; (8001be0 <main+0xf40>)
 8001a1a:	6018      	str	r0, [r3, #0]

 // Get mask
 waved_mask = getU16();
 8001a1c:	f002 ff08 	bl	8004830 <getU16>
 8001a20:	4b70      	ldr	r3, [pc, #448]	; (8001be4 <main+0xf44>)

 // Set mask
 if (waved_mask)
 8001a22:	2800      	cmp	r0, #0
 8001a24:	f000 84ed 	beq.w	8002402 <main+0x1762>
	 waved_mask = waved_mask & DIO_MASK;
 8001a28:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8001a2c:	6018      	str	r0, [r3, #0]
// Calculates available digital buff size
static inline uint16_t waveDbuffSize(void)
 {
 uint16_t size;

 size = BSIZE - w_s - w_s2;
 8001a2e:	4d6e      	ldr	r5, [pc, #440]	; (8001be8 <main+0xf48>)
 8001a30:	6821      	ldr	r1, [r4, #0]
 8001a32:	682b      	ldr	r3, [r5, #0]
	 waved_mask = waved_mask & DIO_MASK;
    else
     waved_mask = DIO_MASK;

 // Check size and primary wavetable
 if (w_d > waveDbuffSize())
 8001a34:	4e6a      	ldr	r6, [pc, #424]	; (8001be0 <main+0xf40>)
 8001a36:	4419      	add	r1, r3
// Calculates available digital buff size
static inline uint16_t waveDbuffSize(void)
 {
 uint16_t size;

 size = BSIZE - w_s - w_s2;
 8001a38:	f5c1 43ea 	rsb	r3, r1, #29952	; 0x7500
	 waved_mask = waved_mask & DIO_MASK;
    else
     waved_mask = DIO_MASK;

 // Check size and primary wavetable
 if (w_d > waveDbuffSize())
 8001a3c:	6832      	ldr	r2, [r6, #0]
// Calculates available digital buff size
static inline uint16_t waveDbuffSize(void)
 {
 uint16_t size;

 size = BSIZE - w_s - w_s2;
 8001a3e:	3330      	adds	r3, #48	; 0x30
	 waved_mask = waved_mask & DIO_MASK;
    else
     waved_mask = DIO_MASK;

 // Check size and primary wavetable
 if (w_d > waveDbuffSize())
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	4293      	cmp	r3, r2
 8001a44:	f2c0 85bf 	blt.w	80025c6 <main+0x1926>
    sendCRC();
    return;
    }

 // Calculate new memory configuration
 tranBuff = &buff[w_s+w_s2+w_d];
 8001a48:	1853      	adds	r3, r2, r1
 8001a4a:	4968      	ldr	r1, [pc, #416]	; (8001bec <main+0xf4c>)
 8001a4c:	4d68      	ldr	r5, [pc, #416]	; (8001bf0 <main+0xf50>)
 8001a4e:	eb01 0343 	add.w	r3, r1, r3, lsl #1

 if (w_d > 0)
    for(i=0;i<w_d;i++)
 8001a52:	2a00      	cmp	r2, #0
    sendCRC();
    return;
    }

 // Calculate new memory configuration
 tranBuff = &buff[w_s+w_s2+w_d];
 8001a54:	602b      	str	r3, [r5, #0]

 if (w_d > 0)
    for(i=0;i<w_d;i++)
 8001a56:	bfc8      	it	gt
 8001a58:	2500      	movgt	r5, #0
 8001a5a:	f77f ac3c 	ble.w	80012d6 <main+0x636>
       waveDbuff[i] = waved_mask & getU16();
 8001a5e:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8001c18 <main+0xf78>
 8001a62:	f8dc 6000 	ldr.w	r6, [ip]
 8001a66:	f002 fee3 	bl	8004830 <getU16>
 8001a6a:	495e      	ldr	r1, [pc, #376]	; (8001be4 <main+0xf44>)

 // Calculate new memory configuration
 tranBuff = &buff[w_s+w_s2+w_d];

 if (w_d > 0)
    for(i=0;i<w_d;i++)
 8001a6c:	f8df c170 	ldr.w	ip, [pc, #368]	; 8001be0 <main+0xf40>
       waveDbuff[i] = waved_mask & getU16();
 8001a70:	680b      	ldr	r3, [r1, #0]

 // Calculate new memory configuration
 tranBuff = &buff[w_s+w_s2+w_d];

 if (w_d > 0)
    for(i=0;i<w_d;i++)
 8001a72:	f8dc 2000 	ldr.w	r2, [ip]
       waveDbuff[i] = waved_mask & getU16();
 8001a76:	4018      	ands	r0, r3
 8001a78:	f826 0015 	strh.w	r0, [r6, r5, lsl #1]

 // Calculate new memory configuration
 tranBuff = &buff[w_s+w_s2+w_d];

 if (w_d > 0)
    for(i=0;i<w_d;i++)
 8001a7c:	3501      	adds	r5, #1
 8001a7e:	4295      	cmp	r5, r2
 8001a80:	dbed      	blt.n	8001a5e <main+0xdbe>
       waveDbuff[i] = waved_mask & getU16();

 // Check of CRC
 if (!crcResponse()) return;
 8001a82:	f002 fe9d 	bl	80047c0 <crcResponse>
 8001a86:	2800      	cmp	r0, #0
 8001a88:	f43f ad41 	beq.w	800150e <main+0x86e>
 8001a8c:	e428      	b.n	80012e0 <main+0x640>
void dioMode(void)
 {
 int line,mode,error;

 // Read line to configure
 line = getByte();
 8001a8e:	f002 febf 	bl	8004810 <getByte>
 8001a92:	4605      	mov	r5, r0

 // Read mode to set
 mode = getByte();
 8001a94:	f002 febc 	bl	8004810 <getByte>
 8001a98:	4606      	mov	r6, r0

 // Check of CRC
 if (!crcResponse()) return;
 8001a9a:	f002 fe91 	bl	80047c0 <crcResponse>
 8001a9e:	2800      	cmp	r0, #0
 8001aa0:	f000 8334 	beq.w	800210c <main+0x146c>

 // No error for now
 error = 0;

 // Check line number
 if (line >= NDIO) error = 1;
 8001aa4:	2d0c      	cmp	r5, #12
 8001aa6:	f300 849d 	bgt.w	80023e4 <main+0x1744>

 // Set dio mode
 if (!error)
    switch(mode)
 8001aaa:	3e0a      	subs	r6, #10
 8001aac:	2e0b      	cmp	r6, #11
 8001aae:	f200 8499 	bhi.w	80023e4 <main+0x1744>
 8001ab2:	e8df f016 	tbh	[pc, r6, lsl #1]
 8001ab6:	0330      	.short	0x0330
 8001ab8:	033e0320 	.word	0x033e0320
 8001abc:	04970497 	.word	0x04970497
 8001ac0:	04970497 	.word	0x04970497
 8001ac4:	04970497 	.word	0x04970497
 8001ac8:	03370497 	.word	0x03370497
 8001acc:	0345      	.short	0x0345

 PRO1_CLEAR
 PRO1_CLEAR

 // Get trigger point
 trigger = getU16();
 8001ace:	f002 feaf 	bl	8004830 <getU16>
 8001ad2:	4948      	ldr	r1, [pc, #288]	; (8001bf4 <main+0xf54>)
 8001ad4:	6008      	str	r0, [r1, #0]
 // Get trigger mode
 triggerMode = getByte();
 8001ad6:	f002 fe9b 	bl	8004810 <getByte>
 8001ada:	4a47      	ldr	r2, [pc, #284]	; (8001bf8 <main+0xf58>)
 8001adc:	6010      	str	r0, [r2, #0]
 // Get timeout in seconds
 timeOut = getByte();
 8001ade:	f002 fe97 	bl	8004810 <getByte>
 8001ae2:	4b46      	ldr	r3, [pc, #280]	; (8001bfc <main+0xf5c>)
 8001ae4:	6018      	str	r0, [r3, #0]

 if (timeOut)
 8001ae6:	2800      	cmp	r0, #0
 8001ae8:	f000 8487 	beq.w	80023fa <main+0x175a>
    {
    checkTimeOut=1;
    // Convert to samples
    timeOut=(int)(1.0*timeOut/stime);
 8001aec:	ee07 0a90 	vmov	s15, r0
 8001af0:	482e      	ldr	r0, [pc, #184]	; (8001bac <main+0xf0c>)
 // Get timeout in seconds
 timeOut = getByte();

 if (timeOut)
    {
    checkTimeOut=1;
 8001af2:	4943      	ldr	r1, [pc, #268]	; (8001c00 <main+0xf60>)
    // Convert to samples
    timeOut=(int)(1.0*timeOut/stime);
 8001af4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001af8:	edd0 7a00 	vldr	s15, [r0]
 8001afc:	eec7 7a27 	vdiv.f32	s15, s14, s15
 // Get timeout in seconds
 timeOut = getByte();

 if (timeOut)
    {
    checkTimeOut=1;
 8001b00:	2201      	movs	r2, #1
 8001b02:	600a      	str	r2, [r1, #0]
    // Convert to samples
    timeOut=(int)(1.0*timeOut/stime);
 8001b04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b08:	edc3 7a00 	vstr	s15, [r3]
    }
    else
    checkTimeOut = 0;

 // Erase timeout error
 timeout_error = 0;
 8001b0c:	4b3d      	ldr	r3, [pc, #244]	; (8001c04 <main+0xf64>)
 8001b0e:	2500      	movs	r5, #0
 8001b10:	601d      	str	r5, [r3, #0]

 // Check of CRC
 if (!crcResponse()) return;
 8001b12:	f002 fe55 	bl	80047c0 <crcResponse>
 8001b16:	2800      	cmp	r0, #0
 8001b18:	f43f ab6e 	beq.w	80011f8 <main+0x558>

 // Check mode
 if ( (triggerMode != 0) && (triggerMode != 1) )
 8001b1c:	4e36      	ldr	r6, [pc, #216]	; (8001bf8 <main+0xf58>)
 8001b1e:	6833      	ldr	r3, [r6, #0]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	f240 84aa 	bls.w	800247a <main+0x17da>
        	resetState=0;  // State change
        	break;

    default:
        // Unknown command
        sendByte(NACK);
 8001b26:	20e2      	movs	r0, #226	; 0xe2
 8001b28:	f001 ffda 	bl	8003ae0 <sendByte>
        sendCRC();
 8001b2c:	f001 ffc8 	bl	8003ac0 <sendCRC>
 8001b30:	f7ff bb62 	b.w	80011f8 <main+0x558>
        sendCRC();
        break;
    case 'L' : // Send pin list
        // Check CRC of command. Returns 1 if Ok
        // On error Sends ECRC + CRC and return 0
        if (!crcResponse()) return;
 8001b34:	f002 fe44 	bl	80047c0 <crcResponse>
 8001b38:	2800      	cmp	r0, #0
 8001b3a:	f43f ab5d 	beq.w	80011f8 <main+0x558>
        sendByte(ACK);
 8001b3e:	20b5      	movs	r0, #181	; 0xb5
 8001b40:	f001 ffce 	bl	8003ae0 <sendByte>
 8001b44:	4e30      	ldr	r6, [pc, #192]	; (8001c08 <main+0xf68>)
 }

// Send one string and computes crc
void sendString(char *str)
 {
 while (*str)
 8001b46:	2550      	movs	r5, #80	; 0x50
 }

// Send one byte and computes crc
void sendByte(int value)
 {
 sdPut(&SDRIVER,value);
 8001b48:	4629      	mov	r1, r5
 8001b4a:	4830      	ldr	r0, [pc, #192]	; (8001c0c <main+0xf6c>)
 8001b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b50:	f001 ff86 	bl	8003a60 <oqPutTimeout>
 crcTx = crcTx ^ value;
 8001b54:	f8d9 3000 	ldr.w	r3, [r9]
 8001b58:	406b      	eors	r3, r5
 }

// Send one string and computes crc
void sendString(char *str)
 {
 while (*str)
 8001b5a:	f816 5f01 	ldrb.w	r5, [r6, #1]!

// Send one byte and computes crc
void sendByte(int value)
 {
 sdPut(&SDRIVER,value);
 crcTx = crcTx ^ value;
 8001b5e:	f8c9 3000 	str.w	r3, [r9]
 }

// Send one string and computes crc
void sendString(char *str)
 {
 while (*str)
 8001b62:	2d00      	cmp	r5, #0
 8001b64:	d1f0      	bne.n	8001b48 <main+0xea8>
 8001b66:	e016      	b.n	8001b96 <main+0xef6>
void dioRead(void)
 {
 int line,value;

 // Read line to read
 line = getByte();
 8001b68:	f002 fe52 	bl	8004810 <getByte>
 8001b6c:	4605      	mov	r5, r0

 // Check of CRC
 if (!crcResponse()) return;
 8001b6e:	f002 fe27 	bl	80047c0 <crcResponse>
 8001b72:	2800      	cmp	r0, #0
 8001b74:	f43f ab40 	beq.w	80011f8 <main+0x558>

 // Check line number
 if (line >= NDIO)
 8001b78:	2d0c      	cmp	r5, #12
 8001b7a:	dcd4      	bgt.n	8001b26 <main+0xe86>
     sendCRC();
     return;
     }

 // Send ACK
 sendByte(ACK);
 8001b7c:	20b5      	movs	r0, #181	; 0xb5
 8001b7e:	f001 ffaf 	bl	8003ae0 <sendByte>

 // Read and send dio value
 value=palReadPad(DIO_PORT,DIO_PIN0+line);
 8001b82:	4b23      	ldr	r3, [pc, #140]	; (8001c10 <main+0xf70>)
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	fa23 f505 	lsr.w	r5, r3, r5
 if (value)
 8001b8a:	07eb      	lsls	r3, r5, #31
 8001b8c:	f53f aef3 	bmi.w	8001976 <main+0xcd6>
    sendByte(TRAN_HALT);
    else
     if (overrun_error)
        sendByte(TRAN_OVERRUN);
        else
        sendByte(TRAN_OK);
 8001b90:	2000      	movs	r0, #0
 8001b92:	f001 ffa5 	bl	8003ae0 <sendByte>

            softReset();
            resetState=1;  // Return to reset state

            sendByte(ACK);
            sendCRC();
 8001b96:	f001 ff93 	bl	8003ac0 <sendCRC>
 8001b9a:	f7ff bb2d 	b.w	80011f8 <main+0x558>
 8001b9e:	bf00      	nop
 8001ba0:	2000f9d8 	.word	0x2000f9d8
 8001ba4:	20000818 	.word	0x20000818
 8001ba8:	20000c90 	.word	0x20000c90
 8001bac:	2000080c 	.word	0x2000080c
 8001bb0:	20000f64 	.word	0x20000f64
 8001bb4:	20000e50 	.word	0x20000e50
 8001bb8:	080063d8 	.word	0x080063d8
 8001bbc:	20000e5c 	.word	0x20000e5c
 8001bc0:	20000814 	.word	0x20000814
 8001bc4:	20000f40 	.word	0x20000f40
 8001bc8:	66666667 	.word	0x66666667
 8001bcc:	20000c58 	.word	0x20000c58
 8001bd0:	20000c5c 	.word	0x20000c5c
 8001bd4:	20000804 	.word	0x20000804
 8001bd8:	20000c98 	.word	0x20000c98
 8001bdc:	080063b8 	.word	0x080063b8
 8001be0:	20000f44 	.word	0x20000f44
 8001be4:	20000cb4 	.word	0x20000cb4
 8001be8:	20000c8c 	.word	0x20000c8c
 8001bec:	20000f6c 	.word	0x20000f6c
 8001bf0:	20000cb8 	.word	0x20000cb8
 8001bf4:	20000f48 	.word	0x20000f48
 8001bf8:	20000c88 	.word	0x20000c88
 8001bfc:	20000ec0 	.word	0x20000ec0
 8001c00:	20000ec4 	.word	0x20000ec4
 8001c04:	20000c60 	.word	0x20000c60
 8001c08:	08006434 	.word	0x08006434
 8001c0c:	20000e90 	.word	0x20000e90
 8001c10:	48000800 	.word	0x48000800
 8001c14:	20000e58 	.word	0x20000e58
 8001c18:	20000f4c 	.word	0x20000f4c
void dioWrite(void)
 {
 int line,value;

 // Read line to write
 line = getByte();
 8001c1c:	f002 fdf8 	bl	8004810 <getByte>
 8001c20:	4605      	mov	r5, r0

 // Value to set
 value = getByte();
 8001c22:	f002 fdf5 	bl	8004810 <getByte>
 8001c26:	4606      	mov	r6, r0

 // Check of CRC
 if (!crcResponse()) return;
 8001c28:	f002 fdca 	bl	80047c0 <crcResponse>
 8001c2c:	2800      	cmp	r0, #0
 8001c2e:	f43f ad31 	beq.w	8001694 <main+0x9f4>

 // Check line number
 if (line >= NDIO)
 8001c32:	2d0c      	cmp	r5, #12
 8001c34:	f300 855e 	bgt.w	80026f4 <main+0x1a54>
     sendCRC();
     return;
     }

 // Set dio value
 if (value)
 8001c38:	2e00      	cmp	r6, #0
 8001c3a:	f000 8417 	beq.w	800246c <main+0x17cc>
	 palWritePad(DIO_PORT,DIO_PIN0+line,PAL_HIGH);
 8001c3e:	2201      	movs	r2, #1
 8001c40:	4bc2      	ldr	r3, [pc, #776]	; (8001f4c <main+0x12ac>)
 8001c42:	fa02 f505 	lsl.w	r5, r2, r5
 8001c46:	619d      	str	r5, [r3, #24]
 8001c48:	e51f      	b.n	800168a <main+0x9ea>
        // Send CRC
        sendCRC();
        break;
    case 'I': // Get board capabilities
        // Calculate vref mantisa and exponent
        vref_m = (int) (vref*1000.0);
 8001c4a:	4dc1      	ldr	r5, [pc, #772]	; (8001f50 <main+0x12b0>)
 8001c4c:	edd5 8a00 	vldr	s17, [r5]
        vref_e = -3;

        // Check CRC of command. Returns 1 if Ok
        // On error Sends ECRC + CRC and return 0
        if (!crcResponse()) return;
 8001c50:	f002 fdb6 	bl	80047c0 <crcResponse>
 8001c54:	2800      	cmp	r0, #0
 8001c56:	f43f aacf 	beq.w	80011f8 <main+0x558>
        // Send CRC
        sendCRC();
        break;
    case 'I': // Get board capabilities
        // Calculate vref mantisa and exponent
        vref_m = (int) (vref*1000.0);
 8001c5a:	eddf 7abe 	vldr	s15, [pc, #760]	; 8001f54 <main+0x12b4>
        sendMantExp(MAX_SF_M,MAX_SF_E); // 16
        sendMantExp(vref_m,vref_e);     // 29
        sendByte(DAC_BITS);             // 20
        sendByte(ADC_BITS);             // 21
        sendByte(NDIO);                 // 22
        sendByte(resetState);           // 23
 8001c5e:	4ebe      	ldr	r6, [pc, #760]	; (8001f58 <main+0x12b8>)
        vref_e = -3;

        // Check CRC of command. Returns 1 if Ok
        // On error Sends ECRC + CRC and return 0
        if (!crcResponse()) return;
        sendByte(ACK);
 8001c60:	20b5      	movs	r0, #181	; 0xb5
        // Send CRC
        sendCRC();
        break;
    case 'I': // Get board capabilities
        // Calculate vref mantisa and exponent
        vref_m = (int) (vref*1000.0);
 8001c62:	ee68 8aa7 	vmul.f32	s17, s17, s15
        vref_e = -3;

        // Check CRC of command. Returns 1 if Ok
        // On error Sends ECRC + CRC and return 0
        if (!crcResponse()) return;
        sendByte(ACK);
 8001c66:	f001 ff3b 	bl	8003ae0 <sendByte>

        sendByte(NDACS);                //  1
 8001c6a:	2002      	movs	r0, #2
 8001c6c:	f001 ff38 	bl	8003ae0 <sendByte>
        sendByte(NADCS);                //  2
 8001c70:	2008      	movs	r0, #8
 8001c72:	f001 ff35 	bl	8003ae0 <sendByte>
        sendU16(BSIZE);                 //  4 Buffer
 8001c76:	f247 5030 	movw	r0, #30000	; 0x7530
 8001c7a:	f001 ff49 	bl	8003b10 <sendU16>
        // Send CRC
        sendCRC();
        break;
    case 'I': // Get board capabilities
        // Calculate vref mantisa and exponent
        vref_m = (int) (vref*1000.0);
 8001c7e:	eefd 8ae8 	vcvt.s32.f32	s17, s17
        sendByte(ACK);

        sendByte(NDACS);                //  1
        sendByte(NADCS);                //  2
        sendU16(BSIZE);                 //  4 Buffer
        sendMantExp(MAX_S_M,MAX_S_E);   //  7
 8001c82:	203c      	movs	r0, #60	; 0x3c
 8001c84:	2100      	movs	r1, #0
 8001c86:	f001 ffeb 	bl	8003c60 <sendMantExp>
        sendMantExp(MIN_S_M,MIN_S_E);   // 10
 8001c8a:	200f      	movs	r0, #15
 8001c8c:	f06f 0105 	mvn.w	r1, #5
 8001c90:	f001 ffe6 	bl	8003c60 <sendMantExp>
        sendMantExp(vref_m,vref_e);     // 13
 8001c94:	ee18 0a90 	vmov	r0, s17
 8001c98:	f06f 0102 	mvn.w	r1, #2
 8001c9c:	f001 ffe0 	bl	8003c60 <sendMantExp>
        sendMantExp(MAX_SF_M,MAX_SF_E); // 16
 8001ca0:	203c      	movs	r0, #60	; 0x3c
 8001ca2:	2103      	movs	r1, #3
 8001ca4:	f001 ffdc 	bl	8003c60 <sendMantExp>
        sendMantExp(vref_m,vref_e);     // 29
 8001ca8:	f06f 0102 	mvn.w	r1, #2
 8001cac:	ee18 0a90 	vmov	r0, s17
 8001cb0:	f001 ffd6 	bl	8003c60 <sendMantExp>
        sendByte(DAC_BITS);             // 20
 8001cb4:	200c      	movs	r0, #12
 8001cb6:	f001 ff13 	bl	8003ae0 <sendByte>
        sendByte(ADC_BITS);             // 21
 8001cba:	200c      	movs	r0, #12
 8001cbc:	f001 ff10 	bl	8003ae0 <sendByte>
        sendByte(NDIO);                 // 22
 8001cc0:	200d      	movs	r0, #13
 8001cc2:	f001 ff0d 	bl	8003ae0 <sendByte>
        sendByte(resetState);           // 23
 8001cc6:	6830      	ldr	r0, [r6, #0]
 8001cc8:	f001 ff0a 	bl	8003ae0 <sendByte>

        // Send CRC
        sendCRC();
 8001ccc:	f001 fef8 	bl	8003ac0 <sendCRC>
 8001cd0:	f7ff ba92 	b.w	80011f8 <main+0x558>
        sendU16(value);
        sendCRC();
        break;

    case 'D' : // DAC Write
        i = getByte();          // Channel to write
 8001cd4:	f002 fd9c 	bl	8004810 <getByte>
 8001cd8:	4605      	mov	r5, r0
        value = getU16();       // Read value to set
 8001cda:	f002 fda9 	bl	8004830 <getU16>
 8001cde:	4606      	mov	r6, r0
        // Check CRC of command. Returns 1 if Ok
        // On error Sends ECRC + CRC and return 0
        if (!crcResponse()) return;
 8001ce0:	f002 fd6e 	bl	80047c0 <crcResponse>
 8001ce4:	2800      	cmp	r0, #0
 8001ce6:	f43f aa87 	beq.w	80011f8 <main+0x558>
        switch(i)
 8001cea:	2d01      	cmp	r5, #1
 8001cec:	f000 84d2 	beq.w	8002694 <main+0x19f4>
 8001cf0:	2d02      	cmp	r5, #2
 8001cf2:	f47f af18 	bne.w	8001b26 <main+0xe86>
            {
            case 1:
               DAC1_WRITE(value);   // Scale and send
               break;
            case 2:
               DAC2_WRITE(value);   // Scale and send
 8001cf6:	4b99      	ldr	r3, [pc, #612]	; (8001f5c <main+0x12bc>)
 8001cf8:	1136      	asrs	r6, r6, #4
 8001cfa:	615e      	str	r6, [r3, #20]
            default:
               sendByte(NACK);
               sendCRC();
               return;
            }
        sendByte(ACK);
 8001cfc:	20b5      	movs	r0, #181	; 0xb5
 8001cfe:	f001 feef 	bl	8003ae0 <sendByte>
        sendCRC();
 8001d02:	f001 fedd 	bl	8003ac0 <sendCRC>
        resetState=0;  // State change
 8001d06:	4a94      	ldr	r2, [pc, #592]	; (8001f58 <main+0x12b8>)
 8001d08:	2300      	movs	r3, #0
 8001d0a:	6013      	str	r3, [r2, #0]
 8001d0c:	f7ff ba74 	b.w	80011f8 <main+0x558>
        // Send CRC
        sendCRC();
        break;

    case 'A' : // ADC Read
        i = getByte();   // Channel to read
 8001d10:	f002 fd7e 	bl	8004810 <getByte>
 8001d14:	4605      	mov	r5, r0
        // Check CRC of command. Returns 1 if Ok
        // On error Sends ECRC + CRC and return 0
        if (!crcResponse()) return;
 8001d16:	f002 fd53 	bl	80047c0 <crcResponse>
 8001d1a:	2800      	cmp	r0, #0
 8001d1c:	f43f aa6c 	beq.w	80011f8 <main+0x558>

        // Check that DAC number is correct
        if ((i<1)||(i>NADCS))
 8001d20:	1e6b      	subs	r3, r5, #1
 8001d22:	2b07      	cmp	r3, #7
 8001d24:	f63f aeff 	bhi.w	8001b26 <main+0xe86>
 {
 int i,value=0;
 uint32_t sum;

 sum = 0;
 for(i=0;i<=nread;i++)
 8001d28:	f8df c240 	ldr.w	ip, [pc, #576]	; 8001f6c <main+0x12cc>
 8001d2c:	f8dc 6000 	ldr.w	r6, [ip]
 8001d30:	2e00      	cmp	r6, #0
 8001d32:	f2c0 851d 	blt.w	8002770 <main+0x1ad0>
 8001d36:	2600      	movs	r6, #0
 8001d38:	3d02      	subs	r5, #2
//                6 : 181.5 cycles
//                7 : 601.5 cycles
void adcSetSampleTime(ADC_TypeDef *adc,int channel,int value)
 {
 if (channel<10)
    BIT_FIELD_WRITE(adc->SMPR1,3*channel,7,value);
 8001d3a:	4989      	ldr	r1, [pc, #548]	; (8001f60 <main+0x12c0>)
 8001d3c:	4a89      	ldr	r2, [pc, #548]	; (8001f64 <main+0x12c4>)
 8001d3e:	4b8a      	ldr	r3, [pc, #552]	; (8001f68 <main+0x12c8>)
void adcOpamp(OPAMP_TypeDef *opamp,int nii)
 {
 // Enable clocks
 BIT_SET(RCC->APB2ENR,RCC_APB2ENR_SYSCFGEN);
 // Enable opamp
 BIT_SET(opamp->CSR,OPAMP_CSR_OPAMPxEN);
 8001d40:	f8df e244 	ldr.w	lr, [pc, #580]	; 8001f88 <main+0x12e8>
 8001d44:	9504      	str	r5, [sp, #16]
 {
 int i,value=0;
 uint32_t sum;

 sum = 0;
 for(i=0;i<=nread;i++)
 8001d46:	9605      	str	r6, [sp, #20]
 8001d48:	4635      	mov	r5, r6
    {
    switch(line)
 8001d4a:	f8dd c010 	ldr.w	ip, [sp, #16]
 8001d4e:	f1bc 0f06 	cmp.w	ip, #6
 8001d52:	f200 819d 	bhi.w	8002090 <main+0x13f0>
 8001d56:	e8df f01c 	tbh	[pc, ip, lsl #1]
 8001d5a:	011b      	.short	0x011b
 8001d5c:	014f016c 	.word	0x014f016c
 8001d60:	004b0097 	.word	0x004b0097
 8001d64:	036900c9 	.word	0x036900c9
        case 'k': // DIO Read All
            dioReadAll();
            break;

        case 'N': // Number of reads in DC
            value = getU16();             // Read value to set
 8001d68:	f002 fd62 	bl	8004830 <getU16>
 8001d6c:	4605      	mov	r5, r0
            if (!crcResponse()) return;   // Check CRC
 8001d6e:	f002 fd27 	bl	80047c0 <crcResponse>
 8001d72:	2800      	cmp	r0, #0
 8001d74:	f43f aa40 	beq.w	80011f8 <main+0x558>
            if (value==0) value=1;        // At least it shall be one
 8001d78:	2d00      	cmp	r5, #0
            nread = value;
 8001d7a:	497c      	ldr	r1, [pc, #496]	; (8001f6c <main+0x12cc>)
            break;

        case 'N': // Number of reads in DC
            value = getU16();             // Read value to set
            if (!crcResponse()) return;   // Check CRC
            if (value==0) value=1;        // At least it shall be one
 8001d7c:	bf08      	it	eq
 8001d7e:	2501      	moveq	r5, #1
            nread = value;
            sendByte(ACK);                // Send ACK and CRC
 8001d80:	20b5      	movs	r0, #181	; 0xb5

        case 'N': // Number of reads in DC
            value = getU16();             // Read value to set
            if (!crcResponse()) return;   // Check CRC
            if (value==0) value=1;        // At least it shall be one
            nread = value;
 8001d82:	600d      	str	r5, [r1, #0]
            sendByte(ACK);                // Send ACK and CRC
 8001d84:	f001 feac 	bl	8003ae0 <sendByte>
            sendCRC();
 8001d88:	f001 fe9a 	bl	8003ac0 <sendCRC>
 8001d8c:	f7ff ba34 	b.w	80011f8 <main+0x558>
 startTx();

 switch(car)
    {
    case 'F': // Get firmware string
    	chprintf(SDBASE,"%s%s%s",BSTRING,VSTRING,BREAK);
 8001d90:	4b77      	ldr	r3, [pc, #476]	; (8001f70 <main+0x12d0>)
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	4977      	ldr	r1, [pc, #476]	; (8001f74 <main+0x12d4>)
 8001d96:	4a78      	ldr	r2, [pc, #480]	; (8001f78 <main+0x12d8>)
 8001d98:	4b78      	ldr	r3, [pc, #480]	; (8001f7c <main+0x12dc>)
 8001d9a:	4879      	ldr	r0, [pc, #484]	; (8001f80 <main+0x12e0>)
 8001d9c:	f001 f8c0 	bl	8002f20 <chprintf.constprop.1>
 8001da0:	f7ff ba2a 	b.w	80011f8 <main+0x558>
            sendByte(ACK);                // Send ACK and CRC
            sendCRC();
            break;

        case 'E': // Soft Reset
            if (!crcResponse()) return;
 8001da4:	f002 fd0c 	bl	80047c0 <crcResponse>
 8001da8:	2800      	cmp	r0, #0
 8001daa:	f43f aa25 	beq.w	80011f8 <main+0x558>

            softReset();
 8001dae:	f002 f91f 	bl	8003ff0 <softReset>
            resetState=1;  // Return to reset state
 8001db2:	4a69      	ldr	r2, [pc, #420]	; (8001f58 <main+0x12b8>)
 8001db4:	2301      	movs	r3, #1

            sendByte(ACK);
 8001db6:	20b5      	movs	r0, #181	; 0xb5

        case 'E': // Soft Reset
            if (!crcResponse()) return;

            softReset();
            resetState=1;  // Return to reset state
 8001db8:	6013      	str	r3, [r2, #0]

            sendByte(ACK);
 8001dba:	f001 fe91 	bl	8003ae0 <sendByte>
 8001dbe:	e6ea      	b.n	8001b96 <main+0xef6>
    	chprintf(SDBASE,"%s%s%s",BSTRING,VSTRING,BREAK);
        break;
    case 'M': // Get magic
        // Check CRC of command. Returns 1 if Ok
        // On error Sends ECRC + CRC and return 0
        if (!crcResponse()) return;
 8001dc0:	f002 fcfe 	bl	80047c0 <crcResponse>
 8001dc4:	2800      	cmp	r0, #0
 8001dc6:	f43f aa17 	beq.w	80011f8 <main+0x558>
        sendByte(ACK);
 8001dca:	20b5      	movs	r0, #181	; 0xb5
 8001dcc:	f001 fe88 	bl	8003ae0 <sendByte>
        // Send magic
        for(i=0;i<MAGIC_SIZE;i++)
            sendByte(magic[i]);
 8001dd0:	2038      	movs	r0, #56	; 0x38
 8001dd2:	f001 fe85 	bl	8003ae0 <sendByte>
 8001dd6:	2029      	movs	r0, #41	; 0x29
 8001dd8:	f001 fe82 	bl	8003ae0 <sendByte>
 8001ddc:	2012      	movs	r0, #18
 8001dde:	f001 fe7f 	bl	8003ae0 <sendByte>
 8001de2:	2001      	movs	r0, #1
 8001de4:	f001 fe7c 	bl	8003ae0 <sendByte>
        // Send CRC
        sendCRC();
 8001de8:	f001 fe6a 	bl	8003ac0 <sendCRC>
 8001dec:	f7ff ba04 	b.w	80011f8 <main+0x558>
//                6 : 181.5 cycles
//                7 : 601.5 cycles
void adcSetSampleTime(ADC_TypeDef *adc,int channel,int value)
 {
 if (channel<10)
    BIT_FIELD_WRITE(adc->SMPR1,3*channel,7,value);
 8001df0:	6958      	ldr	r0, [r3, #20]

// Configure opamp
void adcOpamp(OPAMP_TypeDef *opamp,int nii)
 {
 // Enable clocks
 BIT_SET(RCC->APB2ENR,RCC_APB2ENR_SYSCFGEN);
 8001df2:	f8df c198 	ldr.w	ip, [pc, #408]	; 8001f8c <main+0x12ec>
//                6 : 181.5 cycles
//                7 : 601.5 cycles
void adcSetSampleTime(ADC_TypeDef *adc,int channel,int value)
 {
 if (channel<10)
    BIT_FIELD_WRITE(adc->SMPR1,3*channel,7,value);
 8001df6:	f440 6060 	orr.w	r0, r0, #3584	; 0xe00
 8001dfa:	6158      	str	r0, [r3, #20]

// Configure opamp
void adcOpamp(OPAMP_TypeDef *opamp,int nii)
 {
 // Enable clocks
 BIT_SET(RCC->APB2ENR,RCC_APB2ENR_SYSCFGEN);
 8001dfc:	f8dc 0018 	ldr.w	r0, [ip, #24]
 8001e00:	f040 0001 	orr.w	r0, r0, #1
 8001e04:	f8cc 0018 	str.w	r0, [ip, #24]
 // Enable opamp
 BIT_SET(opamp->CSR,OPAMP_CSR_OPAMPxEN);
 8001e08:	f8de 0000 	ldr.w	r0, [lr]
 8001e0c:	f040 0001 	orr.w	r0, r0, #1
 8001e10:	f8ce 0000 	str.w	r0, [lr]
 // Set as follower
 BIT_FIELD_WRITE(opamp->CSR,5,3,3);
 8001e14:	f8de 0000 	ldr.w	r0, [lr]
 8001e18:	f040 0060 	orr.w	r0, r0, #96	; 0x60
 8001e1c:	f8ce 0000 	str.w	r0, [lr]
 // Set nii
 BIT_FIELD_WRITE(opamp->CSR,2,3,nii);
 8001e20:	f8de 0000 	ldr.w	r0, [lr]
 8001e24:	f020 000c 	bic.w	r0, r0, #12
 8001e28:	f040 0004 	orr.w	r0, r0, #4
 8001e2c:	f8ce 0000 	str.w	r0, [lr]
//      adc  : Pointer to ADC to use
//   channel : Channel to read 1..
void adcSetChannel(ADC_TypeDef *adc,int channel)
 {
 // Configure for just one conversion
 BIT_FIELD_WRITE(adc->SQR1,0,15,0);
 8001e30:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001e32:	f020 000f 	bic.w	r0, r0, #15
 8001e36:	6318      	str	r0, [r3, #48]	; 0x30
 // Set channel to use
 BIT_FIELD_WRITE(adc->SQR1,6,31,channel);
 8001e38:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001e3a:	f420 60f8 	bic.w	r0, r0, #1984	; 0x7c0
 8001e3e:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 8001e42:	6318      	str	r0, [r3, #48]	; 0x30
// Parameters:
//      adc  : Pointer to ADC to use
int adcRead(ADC_TypeDef *adc)
  {
  PRO1_SET
  adc->CR |= ADC_CR_ADSTART;
 8001e44:	6898      	ldr	r0, [r3, #8]
 8001e46:	f040 0004 	orr.w	r0, r0, #4
 8001e4a:	6098      	str	r0, [r3, #8]
  while (!(adc->ISR & ADC_ISR_EOC));
 8001e4c:	6818      	ldr	r0, [r3, #0]
 8001e4e:	0740      	lsls	r0, r0, #29
 8001e50:	d5fc      	bpl.n	8001e4c <main+0x11ac>
  PRO1_CLEAR
  return adc->DR;
 8001e52:	4e45      	ldr	r6, [pc, #276]	; (8001f68 <main+0x12c8>)
 8001e54:	6c30      	ldr	r0, [r6, #64]	; 0x40
               break;
       case 8: value = readAD8();
               break;
       }

    if (i) sum+=(value<<4);
 8001e56:	b12d      	cbz	r5, 8001e64 <main+0x11c4>
 8001e58:	f8dd c014 	ldr.w	ip, [sp, #20]
 8001e5c:	eb0c 1c00 	add.w	ip, ip, r0, lsl #4
 8001e60:	f8cd c014 	str.w	ip, [sp, #20]
 {
 int i,value=0;
 uint32_t sum;

 sum = 0;
 for(i=0;i<=nread;i++)
 8001e64:	4841      	ldr	r0, [pc, #260]	; (8001f6c <main+0x12cc>)
 8001e66:	6806      	ldr	r6, [r0, #0]
 8001e68:	3501      	adds	r5, #1
 8001e6a:	42b5      	cmp	r5, r6
 8001e6c:	f77f af6d 	ble.w	8001d4a <main+0x10aa>
            return;
            }

        value = analogRead(i);

        sendByte(ACK);
 8001e70:	20b5      	movs	r0, #181	; 0xb5
 8001e72:	f001 fe35 	bl	8003ae0 <sendByte>
        sendU16(value);
 8001e76:	9905      	ldr	r1, [sp, #20]
 8001e78:	fbb1 f0f6 	udiv	r0, r1, r6
 8001e7c:	f001 fe48 	bl	8003b10 <sendU16>
        sendCRC();
 8001e80:	f001 fe1e 	bl	8003ac0 <sendCRC>
 8001e84:	f7ff b9b8 	b.w	80011f8 <main+0x558>
//                6 : 181.5 cycles
//                7 : 601.5 cycles
void adcSetSampleTime(ADC_TypeDef *adc,int channel,int value)
 {
 if (channel<10)
    BIT_FIELD_WRITE(adc->SMPR1,3*channel,7,value);
 8001e88:	6958      	ldr	r0, [r3, #20]

// Configure opamp
void adcOpamp(OPAMP_TypeDef *opamp,int nii)
 {
 // Enable clocks
 BIT_SET(RCC->APB2ENR,RCC_APB2ENR_SYSCFGEN);
 8001e8a:	f8df c100 	ldr.w	ip, [pc, #256]	; 8001f8c <main+0x12ec>
//                6 : 181.5 cycles
//                7 : 601.5 cycles
void adcSetSampleTime(ADC_TypeDef *adc,int channel,int value)
 {
 if (channel<10)
    BIT_FIELD_WRITE(adc->SMPR1,3*channel,7,value);
 8001e8e:	f440 6060 	orr.w	r0, r0, #3584	; 0xe00
 8001e92:	6158      	str	r0, [r3, #20]

// Configure opamp
void adcOpamp(OPAMP_TypeDef *opamp,int nii)
 {
 // Enable clocks
 BIT_SET(RCC->APB2ENR,RCC_APB2ENR_SYSCFGEN);
 8001e94:	f8dc 0018 	ldr.w	r0, [ip, #24]
 8001e98:	f040 0001 	orr.w	r0, r0, #1
 8001e9c:	f8cc 0018 	str.w	r0, [ip, #24]
 // Enable opamp
 BIT_SET(opamp->CSR,OPAMP_CSR_OPAMPxEN);
 8001ea0:	f8de 0000 	ldr.w	r0, [lr]
 8001ea4:	f040 0001 	orr.w	r0, r0, #1
 8001ea8:	f8ce 0000 	str.w	r0, [lr]
 // Set as follower
 BIT_FIELD_WRITE(opamp->CSR,5,3,3);
 8001eac:	f8de 0000 	ldr.w	r0, [lr]
 8001eb0:	f040 0060 	orr.w	r0, r0, #96	; 0x60
 8001eb4:	f8ce 0000 	str.w	r0, [lr]
 // Set nii
 BIT_FIELD_WRITE(opamp->CSR,2,3,nii);
 8001eb8:	f8de 0000 	ldr.w	r0, [lr]
 8001ebc:	f040 000c 	orr.w	r0, r0, #12
 8001ec0:	f8ce 0000 	str.w	r0, [lr]
//      adc  : Pointer to ADC to use
//   channel : Channel to read 1..
void adcSetChannel(ADC_TypeDef *adc,int channel)
 {
 // Configure for just one conversion
 BIT_FIELD_WRITE(adc->SQR1,0,15,0);
 8001ec4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001ec6:	f020 000f 	bic.w	r0, r0, #15
 8001eca:	6318      	str	r0, [r3, #48]	; 0x30
 // Set channel to use
 BIT_FIELD_WRITE(adc->SQR1,6,31,channel);
 8001ecc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001ece:	f420 60f8 	bic.w	r0, r0, #1984	; 0x7c0
 8001ed2:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 8001ed6:	6318      	str	r0, [r3, #48]	; 0x30
// Parameters:
//      adc  : Pointer to ADC to use
int adcRead(ADC_TypeDef *adc)
  {
  PRO1_SET
  adc->CR |= ADC_CR_ADSTART;
 8001ed8:	6898      	ldr	r0, [r3, #8]
 8001eda:	f040 0004 	orr.w	r0, r0, #4
 8001ede:	6098      	str	r0, [r3, #8]
  while (!(adc->ISR & ADC_ISR_EOC));
 8001ee0:	6818      	ldr	r0, [r3, #0]
 8001ee2:	0746      	lsls	r6, r0, #29
 8001ee4:	d5fc      	bpl.n	8001ee0 <main+0x1240>
  PRO1_CLEAR
  return adc->DR;
 8001ee6:	4e20      	ldr	r6, [pc, #128]	; (8001f68 <main+0x12c8>)
 8001ee8:	6c30      	ldr	r0, [r6, #64]	; 0x40
 8001eea:	e7b4      	b.n	8001e56 <main+0x11b6>
//                6 : 181.5 cycles
//                7 : 601.5 cycles
void adcSetSampleTime(ADC_TypeDef *adc,int channel,int value)
 {
 if (channel<10)
    BIT_FIELD_WRITE(adc->SMPR1,3*channel,7,value);
 8001eec:	6950      	ldr	r0, [r2, #20]

// Configure opamp
void adcOpamp(OPAMP_TypeDef *opamp,int nii)
 {
 // Enable clocks
 BIT_SET(RCC->APB2ENR,RCC_APB2ENR_SYSCFGEN);
 8001eee:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8001f8c <main+0x12ec>
 // Enable opamp
 BIT_SET(opamp->CSR,OPAMP_CSR_OPAMPxEN);
 8001ef2:	4e24      	ldr	r6, [pc, #144]	; (8001f84 <main+0x12e4>)
//                6 : 181.5 cycles
//                7 : 601.5 cycles
void adcSetSampleTime(ADC_TypeDef *adc,int channel,int value)
 {
 if (channel<10)
    BIT_FIELD_WRITE(adc->SMPR1,3*channel,7,value);
 8001ef4:	f040 0038 	orr.w	r0, r0, #56	; 0x38
 8001ef8:	6150      	str	r0, [r2, #20]

// Configure opamp
void adcOpamp(OPAMP_TypeDef *opamp,int nii)
 {
 // Enable clocks
 BIT_SET(RCC->APB2ENR,RCC_APB2ENR_SYSCFGEN);
 8001efa:	f8dc 0018 	ldr.w	r0, [ip, #24]
 8001efe:	f040 0001 	orr.w	r0, r0, #1
 8001f02:	f8cc 0018 	str.w	r0, [ip, #24]
 // Enable opamp
 BIT_SET(opamp->CSR,OPAMP_CSR_OPAMPxEN);
 8001f06:	6830      	ldr	r0, [r6, #0]
 8001f08:	f040 0001 	orr.w	r0, r0, #1
 8001f0c:	6030      	str	r0, [r6, #0]
 // Set as follower
 BIT_FIELD_WRITE(opamp->CSR,5,3,3);
 8001f0e:	6830      	ldr	r0, [r6, #0]
 8001f10:	f040 0060 	orr.w	r0, r0, #96	; 0x60
 8001f14:	6030      	str	r0, [r6, #0]
 // Set nii
 BIT_FIELD_WRITE(opamp->CSR,2,3,nii);
 8001f16:	6830      	ldr	r0, [r6, #0]
 8001f18:	f020 000c 	bic.w	r0, r0, #12
 8001f1c:	6030      	str	r0, [r6, #0]
//      adc  : Pointer to ADC to use
//   channel : Channel to read 1..
void adcSetChannel(ADC_TypeDef *adc,int channel)
 {
 // Configure for just one conversion
 BIT_FIELD_WRITE(adc->SQR1,0,15,0);
 8001f1e:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8001f20:	f020 000f 	bic.w	r0, r0, #15
 8001f24:	6310      	str	r0, [r2, #48]	; 0x30
 // Set channel to use
 BIT_FIELD_WRITE(adc->SQR1,6,31,channel);
 8001f26:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8001f28:	f420 60f8 	bic.w	r0, r0, #1984	; 0x7c0
 8001f2c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8001f30:	6310      	str	r0, [r2, #48]	; 0x30
// Parameters:
//      adc  : Pointer to ADC to use
int adcRead(ADC_TypeDef *adc)
  {
  PRO1_SET
  adc->CR |= ADC_CR_ADSTART;
 8001f32:	6890      	ldr	r0, [r2, #8]
 8001f34:	f040 0004 	orr.w	r0, r0, #4
 8001f38:	6090      	str	r0, [r2, #8]
  while (!(adc->ISR & ADC_ISR_EOC));
 8001f3a:	6810      	ldr	r0, [r2, #0]
 8001f3c:	0746      	lsls	r6, r0, #29
 8001f3e:	d5fc      	bpl.n	8001f3a <main+0x129a>
  PRO1_CLEAR
  return adc->DR;
 8001f40:	f8df c020 	ldr.w	ip, [pc, #32]	; 8001f64 <main+0x12c4>
 8001f44:	f8dc 0040 	ldr.w	r0, [ip, #64]	; 0x40
 8001f48:	e785      	b.n	8001e56 <main+0x11b6>
 8001f4a:	bf00      	nop
 8001f4c:	48000800 	.word	0x48000800
 8001f50:	20000808 	.word	0x20000808
 8001f54:	447a0000 	.word	0x447a0000
 8001f58:	20000810 	.word	0x20000810
 8001f5c:	40007400 	.word	0x40007400
 8001f60:	50000500 	.word	0x50000500
 8001f64:	50000400 	.word	0x50000400
 8001f68:	50000100 	.word	0x50000100
 8001f6c:	20000800 	.word	0x20000800
 8001f70:	08006430 	.word	0x08006430
 8001f74:	08006400 	.word	0x08006400
 8001f78:	08006408 	.word	0x08006408
 8001f7c:	08006428 	.word	0x08006428
 8001f80:	20000e60 	.word	0x20000e60
 8001f84:	40010040 	.word	0x40010040
 8001f88:	4001003c 	.word	0x4001003c
 8001f8c:	40021000 	.word	0x40021000
//                6 : 181.5 cycles
//                7 : 601.5 cycles
void adcSetSampleTime(ADC_TypeDef *adc,int channel,int value)
 {
 if (channel<10)
    BIT_FIELD_WRITE(adc->SMPR1,3*channel,7,value);
 8001f90:	6958      	ldr	r0, [r3, #20]

// Configure opamp
void adcOpamp(OPAMP_TypeDef *opamp,int nii)
 {
 // Enable clocks
 BIT_SET(RCC->APB2ENR,RCC_APB2ENR_SYSCFGEN);
 8001f92:	f8df c33c 	ldr.w	ip, [pc, #828]	; 80022d0 <main+0x1630>
//                6 : 181.5 cycles
//                7 : 601.5 cycles
void adcSetSampleTime(ADC_TypeDef *adc,int channel,int value)
 {
 if (channel<10)
    BIT_FIELD_WRITE(adc->SMPR1,3*channel,7,value);
 8001f96:	f440 6060 	orr.w	r0, r0, #3584	; 0xe00
 8001f9a:	6158      	str	r0, [r3, #20]

// Configure opamp
void adcOpamp(OPAMP_TypeDef *opamp,int nii)
 {
 // Enable clocks
 BIT_SET(RCC->APB2ENR,RCC_APB2ENR_SYSCFGEN);
 8001f9c:	f8dc 0018 	ldr.w	r0, [ip, #24]
 8001fa0:	f040 0001 	orr.w	r0, r0, #1
 8001fa4:	f8cc 0018 	str.w	r0, [ip, #24]
 // Enable opamp
 BIT_SET(opamp->CSR,OPAMP_CSR_OPAMPxEN);
 8001fa8:	f8de 0000 	ldr.w	r0, [lr]
 8001fac:	f040 0001 	orr.w	r0, r0, #1
 8001fb0:	f8ce 0000 	str.w	r0, [lr]
 // Set as follower
 BIT_FIELD_WRITE(opamp->CSR,5,3,3);
 8001fb4:	f8de 0000 	ldr.w	r0, [lr]
 8001fb8:	f040 0060 	orr.w	r0, r0, #96	; 0x60
 8001fbc:	f8ce 0000 	str.w	r0, [lr]
 // Set nii
 BIT_FIELD_WRITE(opamp->CSR,2,3,nii);
 8001fc0:	f8de 0000 	ldr.w	r0, [lr]
 8001fc4:	f020 000c 	bic.w	r0, r0, #12
 8001fc8:	f040 0008 	orr.w	r0, r0, #8
 8001fcc:	f8ce 0000 	str.w	r0, [lr]
//      adc  : Pointer to ADC to use
//   channel : Channel to read 1..
void adcSetChannel(ADC_TypeDef *adc,int channel)
 {
 // Configure for just one conversion
 BIT_FIELD_WRITE(adc->SQR1,0,15,0);
 8001fd0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001fd2:	f020 000f 	bic.w	r0, r0, #15
 8001fd6:	6318      	str	r0, [r3, #48]	; 0x30
 // Set channel to use
 BIT_FIELD_WRITE(adc->SQR1,6,31,channel);
 8001fd8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001fda:	f420 60f8 	bic.w	r0, r0, #1984	; 0x7c0
 8001fde:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 8001fe2:	6318      	str	r0, [r3, #48]	; 0x30
// Parameters:
//      adc  : Pointer to ADC to use
int adcRead(ADC_TypeDef *adc)
  {
  PRO1_SET
  adc->CR |= ADC_CR_ADSTART;
 8001fe4:	6898      	ldr	r0, [r3, #8]
 8001fe6:	f040 0004 	orr.w	r0, r0, #4
 8001fea:	6098      	str	r0, [r3, #8]
  while (!(adc->ISR & ADC_ISR_EOC));
 8001fec:	6818      	ldr	r0, [r3, #0]
 8001fee:	0740      	lsls	r0, r0, #29
 8001ff0:	d5fc      	bpl.n	8001fec <main+0x134c>
  PRO1_CLEAR
  return adc->DR;
 8001ff2:	4eb4      	ldr	r6, [pc, #720]	; (80022c4 <main+0x1624>)
 8001ff4:	6c30      	ldr	r0, [r6, #64]	; 0x40
 8001ff6:	e72e      	b.n	8001e56 <main+0x11b6>
//                6 : 181.5 cycles
//                7 : 601.5 cycles
void adcSetSampleTime(ADC_TypeDef *adc,int channel,int value)
 {
 if (channel<10)
    BIT_FIELD_WRITE(adc->SMPR1,3*channel,7,value);
 8001ff8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
//      adc  : Pointer to ADC to use
int adcRead(ADC_TypeDef *adc)
  {
  PRO1_SET
  adc->CR |= ADC_CR_ADSTART;
  while (!(adc->ISR & ADC_ISR_EOC));
 8001ffc:	4684      	mov	ip, r0
//                6 : 181.5 cycles
//                7 : 601.5 cycles
void adcSetSampleTime(ADC_TypeDef *adc,int channel,int value)
 {
 if (channel<10)
    BIT_FIELD_WRITE(adc->SMPR1,3*channel,7,value);
 8001ffe:	6946      	ldr	r6, [r0, #20]
 8002000:	f046 0638 	orr.w	r6, r6, #56	; 0x38
 8002004:	6146      	str	r6, [r0, #20]
//      adc  : Pointer to ADC to use
//   channel : Channel to read 1..
void adcSetChannel(ADC_TypeDef *adc,int channel)
 {
 // Configure for just one conversion
 BIT_FIELD_WRITE(adc->SQR1,0,15,0);
 8002006:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8002008:	f026 060f 	bic.w	r6, r6, #15
 800200c:	6306      	str	r6, [r0, #48]	; 0x30
 // Set channel to use
 BIT_FIELD_WRITE(adc->SQR1,6,31,channel);
 800200e:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8002010:	f426 66f8 	bic.w	r6, r6, #1984	; 0x7c0
 8002014:	f046 0640 	orr.w	r6, r6, #64	; 0x40
 8002018:	6306      	str	r6, [r0, #48]	; 0x30
// Parameters:
//      adc  : Pointer to ADC to use
int adcRead(ADC_TypeDef *adc)
  {
  PRO1_SET
  adc->CR |= ADC_CR_ADSTART;
 800201a:	6886      	ldr	r6, [r0, #8]
 800201c:	f046 0604 	orr.w	r6, r6, #4
 8002020:	6086      	str	r6, [r0, #8]
  while (!(adc->ISR & ADC_ISR_EOC));
 8002022:	f8dc 0000 	ldr.w	r0, [ip]
 8002026:	0740      	lsls	r0, r0, #29
 8002028:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
 800202c:	d5f9      	bpl.n	8002022 <main+0x1382>
  PRO1_CLEAR
  return adc->DR;
 800202e:	6c30      	ldr	r0, [r6, #64]	; 0x40
 8002030:	e711      	b.n	8001e56 <main+0x11b6>
//                6 : 181.5 cycles
//                7 : 601.5 cycles
void adcSetSampleTime(ADC_TypeDef *adc,int channel,int value)
 {
 if (channel<10)
    BIT_FIELD_WRITE(adc->SMPR1,3*channel,7,value);
 8002032:	694e      	ldr	r6, [r1, #20]

// Configure opamp
void adcOpamp(OPAMP_TypeDef *opamp,int nii)
 {
 // Enable clocks
 BIT_SET(RCC->APB2ENR,RCC_APB2ENR_SYSCFGEN);
 8002034:	f8df c298 	ldr.w	ip, [pc, #664]	; 80022d0 <main+0x1630>
 // Enable opamp
 BIT_SET(opamp->CSR,OPAMP_CSR_OPAMPxEN);
 8002038:	48a3      	ldr	r0, [pc, #652]	; (80022c8 <main+0x1628>)
//                6 : 181.5 cycles
//                7 : 601.5 cycles
void adcSetSampleTime(ADC_TypeDef *adc,int channel,int value)
 {
 if (channel<10)
    BIT_FIELD_WRITE(adc->SMPR1,3*channel,7,value);
 800203a:	f446 6660 	orr.w	r6, r6, #3584	; 0xe00
 800203e:	614e      	str	r6, [r1, #20]

// Configure opamp
void adcOpamp(OPAMP_TypeDef *opamp,int nii)
 {
 // Enable clocks
 BIT_SET(RCC->APB2ENR,RCC_APB2ENR_SYSCFGEN);
 8002040:	f8dc 6018 	ldr.w	r6, [ip, #24]
 8002044:	f046 0601 	orr.w	r6, r6, #1
 8002048:	f8cc 6018 	str.w	r6, [ip, #24]
 // Enable opamp
 BIT_SET(opamp->CSR,OPAMP_CSR_OPAMPxEN);
 800204c:	6806      	ldr	r6, [r0, #0]
 800204e:	f046 0601 	orr.w	r6, r6, #1
 8002052:	6006      	str	r6, [r0, #0]
 // Set as follower
 BIT_FIELD_WRITE(opamp->CSR,5,3,3);
 8002054:	6806      	ldr	r6, [r0, #0]
 8002056:	f046 0660 	orr.w	r6, r6, #96	; 0x60
 800205a:	6006      	str	r6, [r0, #0]
 // Set nii
 BIT_FIELD_WRITE(opamp->CSR,2,3,nii);
 800205c:	6806      	ldr	r6, [r0, #0]
 800205e:	f026 060c 	bic.w	r6, r6, #12
 8002062:	f046 0604 	orr.w	r6, r6, #4
 8002066:	6006      	str	r6, [r0, #0]
//      adc  : Pointer to ADC to use
//   channel : Channel to read 1..
void adcSetChannel(ADC_TypeDef *adc,int channel)
 {
 // Configure for just one conversion
 BIT_FIELD_WRITE(adc->SQR1,0,15,0);
 8002068:	6b08      	ldr	r0, [r1, #48]	; 0x30
 800206a:	f020 000f 	bic.w	r0, r0, #15
 800206e:	6308      	str	r0, [r1, #48]	; 0x30
 // Set channel to use
 BIT_FIELD_WRITE(adc->SQR1,6,31,channel);
 8002070:	6b08      	ldr	r0, [r1, #48]	; 0x30
 8002072:	f420 60f8 	bic.w	r0, r0, #1984	; 0x7c0
 8002076:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 800207a:	6308      	str	r0, [r1, #48]	; 0x30
// Parameters:
//      adc  : Pointer to ADC to use
int adcRead(ADC_TypeDef *adc)
  {
  PRO1_SET
  adc->CR |= ADC_CR_ADSTART;
 800207c:	6888      	ldr	r0, [r1, #8]
 800207e:	f040 0004 	orr.w	r0, r0, #4
 8002082:	6088      	str	r0, [r1, #8]
  while (!(adc->ISR & ADC_ISR_EOC));
 8002084:	6808      	ldr	r0, [r1, #0]
 8002086:	0746      	lsls	r6, r0, #29
 8002088:	d5fc      	bpl.n	8002084 <main+0x13e4>
  PRO1_CLEAR
  return adc->DR;
 800208a:	4e90      	ldr	r6, [pc, #576]	; (80022cc <main+0x162c>)
 800208c:	6c30      	ldr	r0, [r6, #64]	; 0x40
 800208e:	e6e2      	b.n	8001e56 <main+0x11b6>
//                6 : 181.5 cycles
//                7 : 601.5 cycles
void adcSetSampleTime(ADC_TypeDef *adc,int channel,int value)
 {
 if (channel<10)
    BIT_FIELD_WRITE(adc->SMPR1,3*channel,7,value);
 8002090:	6950      	ldr	r0, [r2, #20]

// Configure opamp
void adcOpamp(OPAMP_TypeDef *opamp,int nii)
 {
 // Enable clocks
 BIT_SET(RCC->APB2ENR,RCC_APB2ENR_SYSCFGEN);
 8002092:	4e8f      	ldr	r6, [pc, #572]	; (80022d0 <main+0x1630>)
 // Enable opamp
 BIT_SET(opamp->CSR,OPAMP_CSR_OPAMPxEN);
 8002094:	f8df c270 	ldr.w	ip, [pc, #624]	; 8002308 <main+0x1668>
//                6 : 181.5 cycles
//                7 : 601.5 cycles
void adcSetSampleTime(ADC_TypeDef *adc,int channel,int value)
 {
 if (channel<10)
    BIT_FIELD_WRITE(adc->SMPR1,3*channel,7,value);
 8002098:	f040 0038 	orr.w	r0, r0, #56	; 0x38
 800209c:	6150      	str	r0, [r2, #20]

// Configure opamp
void adcOpamp(OPAMP_TypeDef *opamp,int nii)
 {
 // Enable clocks
 BIT_SET(RCC->APB2ENR,RCC_APB2ENR_SYSCFGEN);
 800209e:	69b0      	ldr	r0, [r6, #24]
 80020a0:	f040 0001 	orr.w	r0, r0, #1
 80020a4:	61b0      	str	r0, [r6, #24]
 // Enable opamp
 BIT_SET(opamp->CSR,OPAMP_CSR_OPAMPxEN);
 80020a6:	f8dc 0000 	ldr.w	r0, [ip]
 80020aa:	f040 0001 	orr.w	r0, r0, #1
 80020ae:	f8cc 0000 	str.w	r0, [ip]
 // Set as follower
 BIT_FIELD_WRITE(opamp->CSR,5,3,3);
 80020b2:	f8dc 0000 	ldr.w	r0, [ip]
 80020b6:	f040 0060 	orr.w	r0, r0, #96	; 0x60
 80020ba:	f8cc 0000 	str.w	r0, [ip]
 // Set nii
 BIT_FIELD_WRITE(opamp->CSR,2,3,nii);
 80020be:	f8dc 0000 	ldr.w	r0, [ip]
 80020c2:	f020 000c 	bic.w	r0, r0, #12
 80020c6:	f040 0008 	orr.w	r0, r0, #8
 80020ca:	f8cc 0000 	str.w	r0, [ip]
//      adc  : Pointer to ADC to use
//   channel : Channel to read 1..
void adcSetChannel(ADC_TypeDef *adc,int channel)
 {
 // Configure for just one conversion
 BIT_FIELD_WRITE(adc->SQR1,0,15,0);
 80020ce:	6b10      	ldr	r0, [r2, #48]	; 0x30
 80020d0:	f020 000f 	bic.w	r0, r0, #15
 80020d4:	6310      	str	r0, [r2, #48]	; 0x30
 // Set channel to use
 BIT_FIELD_WRITE(adc->SQR1,6,31,channel);
 80020d6:	6b10      	ldr	r0, [r2, #48]	; 0x30
 80020d8:	f420 60f8 	bic.w	r0, r0, #1984	; 0x7c0
 80020dc:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 80020e0:	6310      	str	r0, [r2, #48]	; 0x30
// Parameters:
//      adc  : Pointer to ADC to use
int adcRead(ADC_TypeDef *adc)
  {
  PRO1_SET
  adc->CR |= ADC_CR_ADSTART;
 80020e2:	6890      	ldr	r0, [r2, #8]
 80020e4:	f040 0004 	orr.w	r0, r0, #4
 80020e8:	6090      	str	r0, [r2, #8]
  while (!(adc->ISR & ADC_ISR_EOC));
 80020ea:	6810      	ldr	r0, [r2, #0]
 80020ec:	0746      	lsls	r6, r0, #29
 80020ee:	d5fc      	bpl.n	80020ea <main+0x144a>
  PRO1_CLEAR
  return adc->DR;
 80020f0:	4e78      	ldr	r6, [pc, #480]	; (80022d4 <main+0x1634>)
 80020f2:	6c30      	ldr	r0, [r6, #64]	; 0x40
 80020f4:	e6af      	b.n	8001e56 <main+0x11b6>
        {
        case 10:
           palSetPadMode(DIO_PORT,DIO_PIN0+line,PAL_MODE_INPUT);
           break;
        case 11:
           palSetPadMode(DIO_PORT,DIO_PIN0+line,PAL_MODE_INPUT_PULLUP);
 80020f6:	2101      	movs	r1, #1
 80020f8:	40a9      	lsls	r1, r5
 80020fa:	4877      	ldr	r0, [pc, #476]	; (80022d8 <main+0x1638>)
 80020fc:	2220      	movs	r2, #32
 80020fe:	f001 f87f 	bl	8003200 <_pal_lld_setgroupmode>
        }

 if (error)
    sendByte(NACK);
    else
    sendByte(ACK);
 8002102:	20b5      	movs	r0, #181	; 0xb5
 8002104:	f001 fcec 	bl	8003ae0 <sendByte>

 // End sending CRC
 sendCRC();
 8002108:	f001 fcda 	bl	8003ac0 <sendCRC>
            dualWavePlay();
            break;

        case 'H': // DIO mode
            dioMode();
            resetState=0;  // State change
 800210c:	4e73      	ldr	r6, [pc, #460]	; (80022dc <main+0x163c>)
 800210e:	2300      	movs	r3, #0
 8002110:	6033      	str	r3, [r6, #0]
 8002112:	f7ff b871 	b.w	80011f8 <main+0x558>
 // Set dio mode
 if (!error)
    switch(mode)
        {
        case 10:
           palSetPadMode(DIO_PORT,DIO_PIN0+line,PAL_MODE_INPUT);
 8002116:	2101      	movs	r1, #1
 8002118:	40a9      	lsls	r1, r5
 800211a:	486f      	ldr	r0, [pc, #444]	; (80022d8 <main+0x1638>)
 800211c:	2200      	movs	r2, #0
 800211e:	f001 f86f 	bl	8003200 <_pal_lld_setgroupmode>
 8002122:	e7ee      	b.n	8002102 <main+0x1462>
           break;
        case 12:
           palSetPadMode(DIO_PORT,DIO_PIN0+line,PAL_MODE_INPUT_PULLDOWN);
           break;
        case 20:
           palSetPadMode(DIO_PORT,DIO_PIN0+line,PAL_MODE_OUTPUT_PUSHPULL);
 8002124:	2201      	movs	r2, #1
 8002126:	fa02 f105 	lsl.w	r1, r2, r5
 800212a:	486b      	ldr	r0, [pc, #428]	; (80022d8 <main+0x1638>)
 800212c:	f001 f868 	bl	8003200 <_pal_lld_setgroupmode>
 8002130:	e7e7      	b.n	8002102 <main+0x1462>
           break;
        case 11:
           palSetPadMode(DIO_PORT,DIO_PIN0+line,PAL_MODE_INPUT_PULLUP);
           break;
        case 12:
           palSetPadMode(DIO_PORT,DIO_PIN0+line,PAL_MODE_INPUT_PULLDOWN);
 8002132:	2101      	movs	r1, #1
 8002134:	40a9      	lsls	r1, r5
 8002136:	4868      	ldr	r0, [pc, #416]	; (80022d8 <main+0x1638>)
 8002138:	2240      	movs	r2, #64	; 0x40
 800213a:	f001 f861 	bl	8003200 <_pal_lld_setgroupmode>
 800213e:	e7e0      	b.n	8002102 <main+0x1462>
           break;
        case 20:
           palSetPadMode(DIO_PORT,DIO_PIN0+line,PAL_MODE_OUTPUT_PUSHPULL);
           break;
        case 21:
            palSetPadMode(DIO_PORT,DIO_PIN0+line,PAL_MODE_OUTPUT_OPENDRAIN);
 8002140:	2101      	movs	r1, #1
 8002142:	40a9      	lsls	r1, r5
 8002144:	4864      	ldr	r0, [pc, #400]	; (80022d8 <main+0x1638>)
 8002146:	2205      	movs	r2, #5
 8002148:	f001 f85a 	bl	8003200 <_pal_lld_setgroupmode>
 800214c:	e7d9      	b.n	8002102 <main+0x1462>
//                6 : 181.5 cycles
//                7 : 601.5 cycles
void adcSetSampleTime(ADC_TypeDef *adc,int channel,int value)
 {
 if (channel<10)
    BIT_FIELD_WRITE(adc->SMPR1,3*channel,7,value);
 800214e:	4b5f      	ldr	r3, [pc, #380]	; (80022cc <main+0x162c>)
 8002150:	695a      	ldr	r2, [r3, #20]
 8002152:	f422 3260 	bic.w	r2, r2, #229376	; 0x38000
 8002156:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800215a:	615a      	str	r2, [r3, #20]
//      adc  : Pointer to ADC to use
//   channel : Channel to read 1..
void adcSetChannel(ADC_TypeDef *adc,int channel)
 {
 // Configure for just one conversion
 BIT_FIELD_WRITE(adc->SQR1,0,15,0);
 800215c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800215e:	f022 020f 	bic.w	r2, r2, #15
 8002162:	631a      	str	r2, [r3, #48]	; 0x30
 // Set channel to use
 BIT_FIELD_WRITE(adc->SQR1,6,31,channel);
 8002164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002166:	f422 62f8 	bic.w	r2, r2, #1984	; 0x7c0
 800216a:	f442 72a0 	orr.w	r2, r2, #320	; 0x140
 800216e:	631a      	str	r2, [r3, #48]	; 0x30
 samples = 0;               // Number of processed samples
 inBuffPos = 0;             // Current buffer position
 endTicker = 0;             // Ticker has not ended
 w_pos = 0;                 // Current wave position

 currentBsize = n_s;        // Current size for buffer
 8002170:	485b      	ldr	r0, [pc, #364]	; (80022e0 <main+0x1640>)

 // Enable AC for the selected channel
 setADforAC(channelAC);

 // Configure ticker ISR
 samples = 0;               // Number of processed samples
 8002172:	495c      	ldr	r1, [pc, #368]	; (80022e4 <main+0x1644>)
 inBuffPos = 0;             // Current buffer position
 endTicker = 0;             // Ticker has not ended
 w_pos = 0;                 // Current wave position

 currentBsize = n_s;        // Current size for buffer
 8002174:	6802      	ldr	r2, [r0, #0]
 8002176:	485c      	ldr	r0, [pc, #368]	; (80022e8 <main+0x1648>)

 // Clear overrun variables
 overrun_error = 0;
 8002178:	f8df c180 	ldr.w	ip, [pc, #384]	; 80022fc <main+0x165c>

 // Configure ticker ISR
 samples = 0;               // Number of processed samples
 inBuffPos = 0;             // Current buffer position
 endTicker = 0;             // Ticker has not ended
 w_pos = 0;                 // Current wave position
 800217c:	4d5b      	ldr	r5, [pc, #364]	; (80022ec <main+0x164c>)
 // Enable AC for the selected channel
 setADforAC(channelAC);

 // Configure ticker ISR
 samples = 0;               // Number of processed samples
 inBuffPos = 0;             // Current buffer position
 800217e:	4e5c      	ldr	r6, [pc, #368]	; (80022f0 <main+0x1650>)
 endTicker = 0;             // Ticker has not ended
 w_pos = 0;                 // Current wave position

 currentBsize = n_s;        // Current size for buffer
 8002180:	6002      	str	r2, [r0, #0]

 // Enable AC for the selected channel
 setADforAC(channelAC);

 // Configure ticker ISR
 samples = 0;               // Number of processed samples
 8002182:	2300      	movs	r3, #0
 // Clear overrun variables
 overrun_error = 0;
 overrun = 0;

 // Programs the ticker
 gptStart(&GPTD3, &singleWaveCFG);
 8002184:	485b      	ldr	r0, [pc, #364]	; (80022f4 <main+0x1654>)
 setADforAC(channelAC);

 // Configure ticker ISR
 samples = 0;               // Number of processed samples
 inBuffPos = 0;             // Current buffer position
 endTicker = 0;             // Ticker has not ended
 8002186:	f8cb 3000 	str.w	r3, [fp]

 // Enable AC for the selected channel
 setADforAC(channelAC);

 // Configure ticker ISR
 samples = 0;               // Number of processed samples
 800218a:	600b      	str	r3, [r1, #0]
 inBuffPos = 0;             // Current buffer position
 endTicker = 0;             // Ticker has not ended
 w_pos = 0;                 // Current wave position
 800218c:	602b      	str	r3, [r5, #0]
 // Enable AC for the selected channel
 setADforAC(channelAC);

 // Configure ticker ISR
 samples = 0;               // Number of processed samples
 inBuffPos = 0;             // Current buffer position
 800218e:	6033      	str	r3, [r6, #0]
 w_pos = 0;                 // Current wave position

 currentBsize = n_s;        // Current size for buffer

 // Clear overrun variables
 overrun_error = 0;
 8002190:	f8cc 3000 	str.w	r3, [ip]
 overrun = 0;
 8002194:	603b      	str	r3, [r7, #0]

 // Programs the ticker
 gptStart(&GPTD3, &singleWaveCFG);
 8002196:	f002 f9f3 	bl	8004580 <gptStart.constprop.14>
 ticks = (int) TIM_FREQ_F*stime;
 800219a:	4957      	ldr	r1, [pc, #348]	; (80022f8 <main+0x1658>)
 800219c:	edd1 7a00 	vldr	s15, [r1]
 80021a0:	ee67 7a88 	vmul.f32	s15, s15, s16
 gptStartContinuous(&GPTD3,ticks);
 80021a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021a8:	ee17 0a90 	vmov	r0, s15
 80021ac:	f000 fe80 	bl	8002eb0 <gptStartContinuous.constprop.10>

 // Wait till end
 while (!endTicker) overrun = 0;
 80021b0:	f8db 2000 	ldr.w	r2, [fp]
 80021b4:	b922      	cbnz	r2, 80021c0 <main+0x1520>
 80021b6:	603a      	str	r2, [r7, #0]
 80021b8:	f8db 3000 	ldr.w	r3, [fp]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d0fa      	beq.n	80021b6 <main+0x1516>

 // Disable gpt
 gptStopTimer(&GPTD3);
 80021c0:	f000 fe96 	bl	8002ef0 <gptStopTimer.constprop.8>
 gptStop(&GPTD3);
 80021c4:	f000 fe4c 	bl	8002e60 <gptStop.constprop.12>

 // Disable AC operation
 ACdisable();
 80021c8:	f001 f80a 	bl	80031e0 <ACdisable>
  int is;

  PRO2_SET

  // Response code
  if (halt)
 80021cc:	f8da 3000 	ldr.w	r3, [sl]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f040 8126 	bne.w	8002422 <main+0x1782>
        {
        sendByte(TRAN_HALT);
        return;
        }

  if (overrun_error)
 80021d6:	4a49      	ldr	r2, [pc, #292]	; (80022fc <main+0x165c>)
 80021d8:	6815      	ldr	r5, [r2, #0]
 80021da:	2d00      	cmp	r5, #0
 80021dc:	f47f abcb 	bne.w	8001976 <main+0xcd6>
        {
        sendByte(TRAN_OVERRUN);
        return;
        }
        else
        sendByte(TRAN_OK);
 80021e0:	4628      	mov	r0, r5
 80021e2:	f001 fc7d 	bl	8003ae0 <sendByte>

  sendByte(1);  // Number of analog is 1
 80021e6:	2001      	movs	r0, #1
 80021e8:	f001 fc7a 	bl	8003ae0 <sendByte>
  sendByte(n_di);  // Number of digital (always zero)
 80021ec:	4b44      	ldr	r3, [pc, #272]	; (8002300 <main+0x1660>)
  sendU16(n_s);  // Number of samples
 80021ee:	4e3c      	ldr	r6, [pc, #240]	; (80022e0 <main+0x1640>)
        }
        else
        sendByte(TRAN_OK);

  sendByte(1);  // Number of analog is 1
  sendByte(n_di);  // Number of digital (always zero)
 80021f0:	6818      	ldr	r0, [r3, #0]
 80021f2:	f001 fc75 	bl	8003ae0 <sendByte>
  sendU16(n_s);  // Number of samples
 80021f6:	6830      	ldr	r0, [r6, #0]
 80021f8:	f001 fc8a 	bl	8003b10 <sendU16>

  for(is=0;is<n_s;is++)         // For every sample
 80021fc:	6833      	ldr	r3, [r6, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f77f acc9 	ble.w	8001b96 <main+0xef6>
       sendU16(tranBuff[is]);     // Send it
 8002204:	f8df c104 	ldr.w	ip, [pc, #260]	; 800230c <main+0x166c>
 8002208:	f8dc 3000 	ldr.w	r3, [ip]
 800220c:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
 8002210:	f001 fc7e 	bl	8003b10 <sendU16>

  sendByte(1);  // Number of analog is 1
  sendByte(n_di);  // Number of digital (always zero)
  sendU16(n_s);  // Number of samples

  for(is=0;is<n_s;is++)         // For every sample
 8002214:	4832      	ldr	r0, [pc, #200]	; (80022e0 <main+0x1640>)
 8002216:	6803      	ldr	r3, [r0, #0]
 8002218:	3501      	adds	r5, #1
 800221a:	429d      	cmp	r5, r3
 800221c:	dbf2      	blt.n	8002204 <main+0x1564>
 800221e:	e4ba      	b.n	8001b96 <main+0xef6>
//                6 : 181.5 cycles
//                7 : 601.5 cycles
void adcSetSampleTime(ADC_TypeDef *adc,int channel,int value)
 {
 if (channel<10)
    BIT_FIELD_WRITE(adc->SMPR1,3*channel,7,value);
 8002220:	4b2c      	ldr	r3, [pc, #176]	; (80022d4 <main+0x1634>)

// Configure opamp
void adcOpamp(OPAMP_TypeDef *opamp,int nii)
 {
 // Enable clocks
 BIT_SET(RCC->APB2ENR,RCC_APB2ENR_SYSCFGEN);
 8002222:	4e2b      	ldr	r6, [pc, #172]	; (80022d0 <main+0x1630>)
//                6 : 181.5 cycles
//                7 : 601.5 cycles
void adcSetSampleTime(ADC_TypeDef *adc,int channel,int value)
 {
 if (channel<10)
    BIT_FIELD_WRITE(adc->SMPR1,3*channel,7,value);
 8002224:	695a      	ldr	r2, [r3, #20]
void adcOpamp(OPAMP_TypeDef *opamp,int nii)
 {
 // Enable clocks
 BIT_SET(RCC->APB2ENR,RCC_APB2ENR_SYSCFGEN);
 // Enable opamp
 BIT_SET(opamp->CSR,OPAMP_CSR_OPAMPxEN);
 8002226:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 8002308 <main+0x1668>
//                6 : 181.5 cycles
//                7 : 601.5 cycles
void adcSetSampleTime(ADC_TypeDef *adc,int channel,int value)
 {
 if (channel<10)
    BIT_FIELD_WRITE(adc->SMPR1,3*channel,7,value);
 800222a:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 800222e:	f042 0210 	orr.w	r2, r2, #16
 8002232:	615a      	str	r2, [r3, #20]

// Configure opamp
void adcOpamp(OPAMP_TypeDef *opamp,int nii)
 {
 // Enable clocks
 BIT_SET(RCC->APB2ENR,RCC_APB2ENR_SYSCFGEN);
 8002234:	69b2      	ldr	r2, [r6, #24]
 8002236:	f042 0201 	orr.w	r2, r2, #1
 800223a:	61b2      	str	r2, [r6, #24]
 // Enable opamp
 BIT_SET(opamp->CSR,OPAMP_CSR_OPAMPxEN);
 800223c:	f8dc 2000 	ldr.w	r2, [ip]
 8002240:	f042 0201 	orr.w	r2, r2, #1
 8002244:	f8cc 2000 	str.w	r2, [ip]
 // Set as follower
 BIT_FIELD_WRITE(opamp->CSR,5,3,3);
 8002248:	f8dc 2000 	ldr.w	r2, [ip]
 800224c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8002250:	f8cc 2000 	str.w	r2, [ip]
 // Set nii
 BIT_FIELD_WRITE(opamp->CSR,2,3,nii);
 8002254:	f8dc 2000 	ldr.w	r2, [ip]
 8002258:	f022 020c 	bic.w	r2, r2, #12
 800225c:	f8cc 2000 	str.w	r2, [ip]
//      adc  : Pointer to ADC to use
//   channel : Channel to read 1..
void adcSetChannel(ADC_TypeDef *adc,int channel)
 {
 // Configure for just one conversion
 BIT_FIELD_WRITE(adc->SQR1,0,15,0);
 8002260:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002262:	f022 020f 	bic.w	r2, r2, #15
 8002266:	631a      	str	r2, [r3, #48]	; 0x30
 // Set channel to use
 BIT_FIELD_WRITE(adc->SQR1,6,31,channel);
 8002268:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800226a:	f422 62f8 	bic.w	r2, r2, #1984	; 0x7c0
 800226e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002272:	631a      	str	r2, [r3, #48]	; 0x30
 8002274:	e77c      	b.n	8002170 <main+0x14d0>
//                6 : 181.5 cycles
//                7 : 601.5 cycles
void adcSetSampleTime(ADC_TypeDef *adc,int channel,int value)
 {
 if (channel<10)
    BIT_FIELD_WRITE(adc->SMPR1,3*channel,7,value);
 8002276:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <main+0x1624>)

// Configure opamp
void adcOpamp(OPAMP_TypeDef *opamp,int nii)
 {
 // Enable clocks
 BIT_SET(RCC->APB2ENR,RCC_APB2ENR_SYSCFGEN);
 8002278:	4d15      	ldr	r5, [pc, #84]	; (80022d0 <main+0x1630>)
//                6 : 181.5 cycles
//                7 : 601.5 cycles
void adcSetSampleTime(ADC_TypeDef *adc,int channel,int value)
 {
 if (channel<10)
    BIT_FIELD_WRITE(adc->SMPR1,3*channel,7,value);
 800227a:	6959      	ldr	r1, [r3, #20]
void adcOpamp(OPAMP_TypeDef *opamp,int nii)
 {
 // Enable clocks
 BIT_SET(RCC->APB2ENR,RCC_APB2ENR_SYSCFGEN);
 // Enable opamp
 BIT_SET(opamp->CSR,OPAMP_CSR_OPAMPxEN);
 800227c:	4a21      	ldr	r2, [pc, #132]	; (8002304 <main+0x1664>)
//                6 : 181.5 cycles
//                7 : 601.5 cycles
void adcSetSampleTime(ADC_TypeDef *adc,int channel,int value)
 {
 if (channel<10)
    BIT_FIELD_WRITE(adc->SMPR1,3*channel,7,value);
 800227e:	f421 6160 	bic.w	r1, r1, #3584	; 0xe00
 8002282:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8002286:	6159      	str	r1, [r3, #20]

// Configure opamp
void adcOpamp(OPAMP_TypeDef *opamp,int nii)
 {
 // Enable clocks
 BIT_SET(RCC->APB2ENR,RCC_APB2ENR_SYSCFGEN);
 8002288:	69a9      	ldr	r1, [r5, #24]
 800228a:	f041 0101 	orr.w	r1, r1, #1
 800228e:	61a9      	str	r1, [r5, #24]
 // Enable opamp
 BIT_SET(opamp->CSR,OPAMP_CSR_OPAMPxEN);
 8002290:	6811      	ldr	r1, [r2, #0]
 8002292:	f041 0101 	orr.w	r1, r1, #1
 8002296:	6011      	str	r1, [r2, #0]
 // Set as follower
 BIT_FIELD_WRITE(opamp->CSR,5,3,3);
 8002298:	6811      	ldr	r1, [r2, #0]
 800229a:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 800229e:	6011      	str	r1, [r2, #0]
 // Set nii
 BIT_FIELD_WRITE(opamp->CSR,2,3,nii);
 80022a0:	6811      	ldr	r1, [r2, #0]
 80022a2:	f021 010c 	bic.w	r1, r1, #12
 80022a6:	f041 0104 	orr.w	r1, r1, #4
 80022aa:	6011      	str	r1, [r2, #0]
//      adc  : Pointer to ADC to use
//   channel : Channel to read 1..
void adcSetChannel(ADC_TypeDef *adc,int channel)
 {
 // Configure for just one conversion
 BIT_FIELD_WRITE(adc->SQR1,0,15,0);
 80022ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ae:	f022 020f 	bic.w	r2, r2, #15
 80022b2:	631a      	str	r2, [r3, #48]	; 0x30
 // Set channel to use
 BIT_FIELD_WRITE(adc->SQR1,6,31,channel);
 80022b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022b6:	f422 62f8 	bic.w	r2, r2, #1984	; 0x7c0
 80022ba:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80022be:	631a      	str	r2, [r3, #48]	; 0x30
 80022c0:	e756      	b.n	8002170 <main+0x14d0>
 80022c2:	bf00      	nop
 80022c4:	50000100 	.word	0x50000100
 80022c8:	40010044 	.word	0x40010044
 80022cc:	50000500 	.word	0x50000500
 80022d0:	40021000 	.word	0x40021000
 80022d4:	50000400 	.word	0x50000400
 80022d8:	48000800 	.word	0x48000800
 80022dc:	20000810 	.word	0x20000810
 80022e0:	20000814 	.word	0x20000814
 80022e4:	20000c58 	.word	0x20000c58
 80022e8:	20000c98 	.word	0x20000c98
 80022ec:	20000e50 	.word	0x20000e50
 80022f0:	20000e58 	.word	0x20000e58
 80022f4:	0800649c 	.word	0x0800649c
 80022f8:	2000080c 	.word	0x2000080c
 80022fc:	20000c90 	.word	0x20000c90
 8002300:	20000f40 	.word	0x20000f40
 8002304:	4001003c 	.word	0x4001003c
 8002308:	40010040 	.word	0x40010040
 800230c:	20000cb8 	.word	0x20000cb8
//                6 : 181.5 cycles
//                7 : 601.5 cycles
void adcSetSampleTime(ADC_TypeDef *adc,int channel,int value)
 {
 if (channel<10)
    BIT_FIELD_WRITE(adc->SMPR1,3*channel,7,value);
 8002310:	4bb4      	ldr	r3, [pc, #720]	; (80025e4 <main+0x1944>)

// Configure opamp
void adcOpamp(OPAMP_TypeDef *opamp,int nii)
 {
 // Enable clocks
 BIT_SET(RCC->APB2ENR,RCC_APB2ENR_SYSCFGEN);
 8002312:	48b5      	ldr	r0, [pc, #724]	; (80025e8 <main+0x1948>)
//                6 : 181.5 cycles
//                7 : 601.5 cycles
void adcSetSampleTime(ADC_TypeDef *adc,int channel,int value)
 {
 if (channel<10)
    BIT_FIELD_WRITE(adc->SMPR1,3*channel,7,value);
 8002314:	6959      	ldr	r1, [r3, #20]
void adcOpamp(OPAMP_TypeDef *opamp,int nii)
 {
 // Enable clocks
 BIT_SET(RCC->APB2ENR,RCC_APB2ENR_SYSCFGEN);
 // Enable opamp
 BIT_SET(opamp->CSR,OPAMP_CSR_OPAMPxEN);
 8002316:	4ab5      	ldr	r2, [pc, #724]	; (80025ec <main+0x194c>)
//                6 : 181.5 cycles
//                7 : 601.5 cycles
void adcSetSampleTime(ADC_TypeDef *adc,int channel,int value)
 {
 if (channel<10)
    BIT_FIELD_WRITE(adc->SMPR1,3*channel,7,value);
 8002318:	f421 6160 	bic.w	r1, r1, #3584	; 0xe00
 800231c:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8002320:	6159      	str	r1, [r3, #20]

// Configure opamp
void adcOpamp(OPAMP_TypeDef *opamp,int nii)
 {
 // Enable clocks
 BIT_SET(RCC->APB2ENR,RCC_APB2ENR_SYSCFGEN);
 8002322:	6981      	ldr	r1, [r0, #24]
 8002324:	f041 0101 	orr.w	r1, r1, #1
 8002328:	6181      	str	r1, [r0, #24]
 // Enable opamp
 BIT_SET(opamp->CSR,OPAMP_CSR_OPAMPxEN);
 800232a:	6811      	ldr	r1, [r2, #0]
 800232c:	f041 0101 	orr.w	r1, r1, #1
 8002330:	6011      	str	r1, [r2, #0]
 // Set as follower
 BIT_FIELD_WRITE(opamp->CSR,5,3,3);
 8002332:	6811      	ldr	r1, [r2, #0]
 8002334:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 8002338:	6011      	str	r1, [r2, #0]
 // Set nii
 BIT_FIELD_WRITE(opamp->CSR,2,3,nii);
 800233a:	6811      	ldr	r1, [r2, #0]
 800233c:	f041 010c 	orr.w	r1, r1, #12
 8002340:	e7b3      	b.n	80022aa <main+0x160a>
//                6 : 181.5 cycles
//                7 : 601.5 cycles
void adcSetSampleTime(ADC_TypeDef *adc,int channel,int value)
 {
 if (channel<10)
    BIT_FIELD_WRITE(adc->SMPR1,3*channel,7,value);
 8002342:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002346:	695a      	ldr	r2, [r3, #20]
 8002348:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 800234c:	f042 0210 	orr.w	r2, r2, #16
 8002350:	615a      	str	r2, [r3, #20]
 8002352:	e785      	b.n	8002260 <main+0x15c0>
 8002354:	4ba6      	ldr	r3, [pc, #664]	; (80025f0 <main+0x1950>)

// Configure opamp
void adcOpamp(OPAMP_TypeDef *opamp,int nii)
 {
 // Enable clocks
 BIT_SET(RCC->APB2ENR,RCC_APB2ENR_SYSCFGEN);
 8002356:	f8df c290 	ldr.w	ip, [pc, #656]	; 80025e8 <main+0x1948>
//                6 : 181.5 cycles
//                7 : 601.5 cycles
void adcSetSampleTime(ADC_TypeDef *adc,int channel,int value)
 {
 if (channel<10)
    BIT_FIELD_WRITE(adc->SMPR1,3*channel,7,value);
 800235a:	6959      	ldr	r1, [r3, #20]
void adcOpamp(OPAMP_TypeDef *opamp,int nii)
 {
 // Enable clocks
 BIT_SET(RCC->APB2ENR,RCC_APB2ENR_SYSCFGEN);
 // Enable opamp
 BIT_SET(opamp->CSR,OPAMP_CSR_OPAMPxEN);
 800235c:	4aa5      	ldr	r2, [pc, #660]	; (80025f4 <main+0x1954>)
//                6 : 181.5 cycles
//                7 : 601.5 cycles
void adcSetSampleTime(ADC_TypeDef *adc,int channel,int value)
 {
 if (channel<10)
    BIT_FIELD_WRITE(adc->SMPR1,3*channel,7,value);
 800235e:	f421 6160 	bic.w	r1, r1, #3584	; 0xe00
 8002362:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8002366:	6159      	str	r1, [r3, #20]

// Configure opamp
void adcOpamp(OPAMP_TypeDef *opamp,int nii)
 {
 // Enable clocks
 BIT_SET(RCC->APB2ENR,RCC_APB2ENR_SYSCFGEN);
 8002368:	f8dc 1018 	ldr.w	r1, [ip, #24]
 800236c:	f041 0101 	orr.w	r1, r1, #1
 8002370:	f8cc 1018 	str.w	r1, [ip, #24]
 8002374:	e78c      	b.n	8002290 <main+0x15f0>
//                6 : 181.5 cycles
//                7 : 601.5 cycles
void adcSetSampleTime(ADC_TypeDef *adc,int channel,int value)
 {
 if (channel<10)
    BIT_FIELD_WRITE(adc->SMPR1,3*channel,7,value);
 8002376:	4ba0      	ldr	r3, [pc, #640]	; (80025f8 <main+0x1958>)

// Configure opamp
void adcOpamp(OPAMP_TypeDef *opamp,int nii)
 {
 // Enable clocks
 BIT_SET(RCC->APB2ENR,RCC_APB2ENR_SYSCFGEN);
 8002378:	499b      	ldr	r1, [pc, #620]	; (80025e8 <main+0x1948>)
//                6 : 181.5 cycles
//                7 : 601.5 cycles
void adcSetSampleTime(ADC_TypeDef *adc,int channel,int value)
 {
 if (channel<10)
    BIT_FIELD_WRITE(adc->SMPR1,3*channel,7,value);
 800237a:	695a      	ldr	r2, [r3, #20]
void adcOpamp(OPAMP_TypeDef *opamp,int nii)
 {
 // Enable clocks
 BIT_SET(RCC->APB2ENR,RCC_APB2ENR_SYSCFGEN);
 // Enable opamp
 BIT_SET(opamp->CSR,OPAMP_CSR_OPAMPxEN);
 800237c:	4d9f      	ldr	r5, [pc, #636]	; (80025fc <main+0x195c>)
//                6 : 181.5 cycles
//                7 : 601.5 cycles
void adcSetSampleTime(ADC_TypeDef *adc,int channel,int value)
 {
 if (channel<10)
    BIT_FIELD_WRITE(adc->SMPR1,3*channel,7,value);
 800237e:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8002382:	f042 0210 	orr.w	r2, r2, #16
 8002386:	615a      	str	r2, [r3, #20]

// Configure opamp
void adcOpamp(OPAMP_TypeDef *opamp,int nii)
 {
 // Enable clocks
 BIT_SET(RCC->APB2ENR,RCC_APB2ENR_SYSCFGEN);
 8002388:	698a      	ldr	r2, [r1, #24]
 800238a:	f042 0201 	orr.w	r2, r2, #1
 800238e:	618a      	str	r2, [r1, #24]
 // Enable opamp
 BIT_SET(opamp->CSR,OPAMP_CSR_OPAMPxEN);
 8002390:	682a      	ldr	r2, [r5, #0]
 8002392:	f042 0201 	orr.w	r2, r2, #1
 8002396:	602a      	str	r2, [r5, #0]
 // Set as follower
 BIT_FIELD_WRITE(opamp->CSR,5,3,3);
 8002398:	682a      	ldr	r2, [r5, #0]
 800239a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800239e:	602a      	str	r2, [r5, #0]
 // Set nii
 BIT_FIELD_WRITE(opamp->CSR,2,3,nii);
 80023a0:	682a      	ldr	r2, [r5, #0]
 80023a2:	f022 020c 	bic.w	r2, r2, #12
 80023a6:	f042 0208 	orr.w	r2, r2, #8
 80023aa:	602a      	str	r2, [r5, #0]
 80023ac:	e758      	b.n	8002260 <main+0x15c0>
//                6 : 181.5 cycles
//                7 : 601.5 cycles
void adcSetSampleTime(ADC_TypeDef *adc,int channel,int value)
 {
 if (channel<10)
    BIT_FIELD_WRITE(adc->SMPR1,3*channel,7,value);
 80023ae:	4b8d      	ldr	r3, [pc, #564]	; (80025e4 <main+0x1944>)

// Configure opamp
void adcOpamp(OPAMP_TypeDef *opamp,int nii)
 {
 // Enable clocks
 BIT_SET(RCC->APB2ENR,RCC_APB2ENR_SYSCFGEN);
 80023b0:	4e8d      	ldr	r6, [pc, #564]	; (80025e8 <main+0x1948>)
//                6 : 181.5 cycles
//                7 : 601.5 cycles
void adcSetSampleTime(ADC_TypeDef *adc,int channel,int value)
 {
 if (channel<10)
    BIT_FIELD_WRITE(adc->SMPR1,3*channel,7,value);
 80023b2:	6959      	ldr	r1, [r3, #20]
void adcOpamp(OPAMP_TypeDef *opamp,int nii)
 {
 // Enable clocks
 BIT_SET(RCC->APB2ENR,RCC_APB2ENR_SYSCFGEN);
 // Enable opamp
 BIT_SET(opamp->CSR,OPAMP_CSR_OPAMPxEN);
 80023b4:	4a8d      	ldr	r2, [pc, #564]	; (80025ec <main+0x194c>)
//                6 : 181.5 cycles
//                7 : 601.5 cycles
void adcSetSampleTime(ADC_TypeDef *adc,int channel,int value)
 {
 if (channel<10)
    BIT_FIELD_WRITE(adc->SMPR1,3*channel,7,value);
 80023b6:	f421 6160 	bic.w	r1, r1, #3584	; 0xe00
 80023ba:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80023be:	6159      	str	r1, [r3, #20]

// Configure opamp
void adcOpamp(OPAMP_TypeDef *opamp,int nii)
 {
 // Enable clocks
 BIT_SET(RCC->APB2ENR,RCC_APB2ENR_SYSCFGEN);
 80023c0:	69b1      	ldr	r1, [r6, #24]
 80023c2:	f041 0101 	orr.w	r1, r1, #1
 80023c6:	61b1      	str	r1, [r6, #24]
 // Enable opamp
 BIT_SET(opamp->CSR,OPAMP_CSR_OPAMPxEN);
 80023c8:	6811      	ldr	r1, [r2, #0]
 80023ca:	f041 0101 	orr.w	r1, r1, #1
 80023ce:	6011      	str	r1, [r2, #0]
 // Set as follower
 BIT_FIELD_WRITE(opamp->CSR,5,3,3);
 80023d0:	6811      	ldr	r1, [r2, #0]
 80023d2:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 80023d6:	6011      	str	r1, [r2, #0]
 // Set nii
 BIT_FIELD_WRITE(opamp->CSR,2,3,nii);
 80023d8:	6811      	ldr	r1, [r2, #0]
 80023da:	f021 010c 	bic.w	r1, r1, #12
 80023de:	f041 0108 	orr.w	r1, r1, #8
 80023e2:	e762      	b.n	80022aa <main+0x160a>
           error = 1;
           break;
        }

 if (error)
    sendByte(NACK);
 80023e4:	20e2      	movs	r0, #226	; 0xe2
 80023e6:	f001 fb7b 	bl	8003ae0 <sendByte>
 80023ea:	e68d      	b.n	8002108 <main+0x1468>
 n_ai = getByte();
 if (n_ai > 4) error = 1;

 // Get number of digital inputs
 n_di = getByte();
 if (n_di >= NDIO) error = 1;
 80023ec:	2501      	movs	r5, #1
 80023ee:	f7ff b929 	b.w	8001644 <main+0x9a4>

 // Mask to set
 mask = getU16();

 if (!mask)
	 mask = DIO_MASK;
 80023f2:	f641 76ff 	movw	r6, #8191	; 0x1fff
 80023f6:	f7ff b87b 	b.w	80014f0 <main+0x850>
    checkTimeOut=1;
    // Convert to samples
    timeOut=(int)(1.0*timeOut/stime);
    }
    else
    checkTimeOut = 0;
 80023fa:	4a81      	ldr	r2, [pc, #516]	; (8002600 <main+0x1960>)
 80023fc:	6010      	str	r0, [r2, #0]
 80023fe:	f7ff bb85 	b.w	8001b0c <main+0xe6c>

 // Set mask
 if (waved_mask)
	 waved_mask = waved_mask & DIO_MASK;
    else
     waved_mask = DIO_MASK;
 8002402:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	f7ff bb11 	b.w	8001a2e <main+0xd8e>
     }
    else
     {
     // There is no primary wave
     // Use digital wave if present
	 w_n = w_n*w_d;
 800240c:	4e7d      	ldr	r6, [pc, #500]	; (8002604 <main+0x1964>)
 800240e:	f8df c234 	ldr.w	ip, [pc, #564]	; 8002644 <main+0x19a4>
 8002412:	6832      	ldr	r2, [r6, #0]
 8002414:	f8dc 3000 	ldr.w	r3, [ip]
 8002418:	fb03 f302 	mul.w	r3, r3, r2
 800241c:	6033      	str	r3, [r6, #0]
 800241e:	f7ff ba6e 	b.w	80018fe <main+0xc5e>
  int ia,is,pos,sample,first,pre,ssize;

  // Response code
  if (halt)
        {
        sendByte(TRAN_HALT);
 8002422:	2003      	movs	r0, #3
 8002424:	f001 fb5c 	bl	8003ae0 <sendByte>
 8002428:	f7ff bbb5 	b.w	8001b96 <main+0xef6>
//                6 : 181.5 cycles
//                7 : 601.5 cycles
void adcSetSampleTime(ADC_TypeDef *adc,int channel,int value)
 {
 if (channel<10)
    BIT_FIELD_WRITE(adc->SMPR1,3*channel,7,value);
 800242c:	6948      	ldr	r0, [r1, #20]
 800242e:	f440 3060 	orr.w	r0, r0, #229376	; 0x38000
 8002432:	6148      	str	r0, [r1, #20]
//      adc  : Pointer to ADC to use
//   channel : Channel to read 1..
void adcSetChannel(ADC_TypeDef *adc,int channel)
 {
 // Configure for just one conversion
 BIT_FIELD_WRITE(adc->SQR1,0,15,0);
 8002434:	6b08      	ldr	r0, [r1, #48]	; 0x30
 8002436:	f020 000f 	bic.w	r0, r0, #15
 800243a:	6308      	str	r0, [r1, #48]	; 0x30
 // Set channel to use
 BIT_FIELD_WRITE(adc->SQR1,6,31,channel);
 800243c:	6b08      	ldr	r0, [r1, #48]	; 0x30
 800243e:	f420 60f8 	bic.w	r0, r0, #1984	; 0x7c0
 8002442:	f440 70a0 	orr.w	r0, r0, #320	; 0x140
 8002446:	6308      	str	r0, [r1, #48]	; 0x30
// Parameters:
//      adc  : Pointer to ADC to use
int adcRead(ADC_TypeDef *adc)
  {
  PRO1_SET
  adc->CR |= ADC_CR_ADSTART;
 8002448:	6888      	ldr	r0, [r1, #8]
 800244a:	f040 0004 	orr.w	r0, r0, #4
 800244e:	6088      	str	r0, [r1, #8]
  while (!(adc->ISR & ADC_ISR_EOC));
 8002450:	6808      	ldr	r0, [r1, #0]
 8002452:	0740      	lsls	r0, r0, #29
 8002454:	d5fc      	bpl.n	8002450 <main+0x17b0>
  PRO1_CLEAR
  return adc->DR;
 8002456:	4e66      	ldr	r6, [pc, #408]	; (80025f0 <main+0x1950>)
 8002458:	e618      	b.n	800208c <main+0x13ec>
 size = n_s*sample_size;
 if (size > tranBuffSize()) error = 1;

 // Response depending on errors
 if (error)
      sendByte(NACK);
 800245a:	20e2      	movs	r0, #226	; 0xe2
 800245c:	f001 fb40 	bl	8003ae0 <sendByte>
 8002460:	f7ff b916 	b.w	8001690 <main+0x9f0>

 // Check if it fits the buffer
 if (n_di)
    sample_size = n_ai+1;
    else
    sample_size = n_ai;
 8002464:	4e68      	ldr	r6, [pc, #416]	; (8002608 <main+0x1968>)
 8002466:	6830      	ldr	r0, [r6, #0]
 8002468:	f7ff b8fb 	b.w	8001662 <main+0x9c2>

 // Set dio value
 if (value)
	 palWritePad(DIO_PORT,DIO_PIN0+line,PAL_HIGH);
     else
     palWritePad(DIO_PORT,DIO_PIN0+line,PAL_LOW);
 800246c:	3510      	adds	r5, #16
 800246e:	2201      	movs	r2, #1
 8002470:	4b66      	ldr	r3, [pc, #408]	; (800260c <main+0x196c>)
 8002472:	40aa      	lsls	r2, r5
 8002474:	619a      	str	r2, [r3, #24]
 8002476:	f7ff b908 	b.w	800168a <main+0x9ea>
    sendCRC();
    return;
    }

 // All ok
 sendByte(ACK);
 800247a:	20b5      	movs	r0, #181	; 0xb5
 800247c:	f001 fb30 	bl	8003ae0 <sendByte>

 // Enable AC operation
 ACenable();
 8002480:	f002 f8be 	bl	8004600 <ACenable>
 // Configure ticker ISR
 samples = 0;    // Number of processed samples
 inBuffPos = 0;  // Current buffer position
 endTicker = 0;  // Ticker has not ended

 presamples = n_s/2;               // Number of samples before trigger
 8002484:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8002634 <main+0x1994>
 8002488:	4861      	ldr	r0, [pc, #388]	; (8002610 <main+0x1970>)
 800248a:	f8dc 3000 	ldr.w	r3, [ip]
 ACenable();

 // Configure ticker ISR
 samples = 0;    // Number of processed samples
 inBuffPos = 0;  // Current buffer position
 endTicker = 0;  // Ticker has not ended
 800248e:	f8cb 5000 	str.w	r5, [fp]

 presamples = n_s/2;               // Number of samples before trigger
 8002492:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
 8002496:	1052      	asrs	r2, r2, #1
 8002498:	6002      	str	r2, [r0, #0]
 postsamples = n_s - presamples;   // Number of samples after trigger
 800249a:	6801      	ldr	r1, [r0, #0]

 // Current size for buffer
 if (n_di)
 800249c:	4e5d      	ldr	r6, [pc, #372]	; (8002614 <main+0x1974>)

 // Enable AC operation
 ACenable();

 // Configure ticker ISR
 samples = 0;    // Number of processed samples
 800249e:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8002648 <main+0x19a8>
 inBuffPos = 0;  // Current buffer position
 80024a2:	485d      	ldr	r0, [pc, #372]	; (8002618 <main+0x1978>)

 // Enable AC operation
 ACenable();

 // Configure ticker ISR
 samples = 0;    // Number of processed samples
 80024a4:	f8cc 5000 	str.w	r5, [ip]
 inBuffPos = 0;  // Current buffer position
 80024a8:	6005      	str	r5, [r0, #0]

 presamples = n_s/2;               // Number of samples before trigger
 postsamples = n_s - presamples;   // Number of samples after trigger

 // Current size for buffer
 if (n_di)
 80024aa:	6832      	ldr	r2, [r6, #0]
 samples = 0;    // Number of processed samples
 inBuffPos = 0;  // Current buffer position
 endTicker = 0;  // Ticker has not ended

 presamples = n_s/2;               // Number of samples before trigger
 postsamples = n_s - presamples;   // Number of samples after trigger
 80024ac:	4d5b      	ldr	r5, [pc, #364]	; (800261c <main+0x197c>)
 80024ae:	1a59      	subs	r1, r3, r1
 80024b0:	6029      	str	r1, [r5, #0]

 // Current size for buffer
 if (n_di)
 80024b2:	2a00      	cmp	r2, #0
 80024b4:	f000 8125 	beq.w	8002702 <main+0x1a62>
	 currentBsize = (n_ai+1) * n_s;
 80024b8:	4e53      	ldr	r6, [pc, #332]	; (8002608 <main+0x1968>)
 80024ba:	f8df c190 	ldr.w	ip, [pc, #400]	; 800264c <main+0x19ac>
 80024be:	6832      	ldr	r2, [r6, #0]
 80024c0:	fb02 3303 	mla	r3, r2, r3, r3
 80024c4:	f8cc 3000 	str.w	r3, [ip]
   else
     currentBsize = n_ai * n_s;

 samplePhase = 0; // First phase: buffer prefill
 80024c8:	4a55      	ldr	r2, [pc, #340]	; (8002620 <main+0x1980>)

 // Clear overrun variables
 overrun_error = 0;
 80024ca:	4d56      	ldr	r5, [pc, #344]	; (8002624 <main+0x1984>)
 overrun = 0;

 // Programs the timer
 gptStart(&GPTD3, &trigCFG);
 ticks = (int) TIM_FREQ_F*stime;
 80024cc:	4e56      	ldr	r6, [pc, #344]	; (8002628 <main+0x1988>)
 // Clear overrun variables
 overrun_error = 0;
 overrun = 0;

 // Programs the timer
 gptStart(&GPTD3, &trigCFG);
 80024ce:	4857      	ldr	r0, [pc, #348]	; (800262c <main+0x198c>)
 if (n_di)
	 currentBsize = (n_ai+1) * n_s;
   else
     currentBsize = n_ai * n_s;

 samplePhase = 0; // First phase: buffer prefill
 80024d0:	2300      	movs	r3, #0
 80024d2:	6013      	str	r3, [r2, #0]

 // Clear overrun variables
 overrun_error = 0;
 80024d4:	602b      	str	r3, [r5, #0]
 overrun = 0;
 80024d6:	603b      	str	r3, [r7, #0]

 // Programs the timer
 gptStart(&GPTD3, &trigCFG);
 80024d8:	f002 f852 	bl	8004580 <gptStart.constprop.14>
 ticks = (int) TIM_FREQ_F*stime;
 80024dc:	edd6 7a00 	vldr	s15, [r6]
 80024e0:	ee67 7a88 	vmul.f32	s15, s15, s16
 gptStartContinuous(&GPTD3,ticks);
 80024e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024e8:	ee17 0a90 	vmov	r0, s15
 80024ec:	f000 fce0 	bl	8002eb0 <gptStartContinuous.constprop.10>

 // Wait till end
 while (!endTicker) { overrun = 0; }
 80024f0:	f8db 2000 	ldr.w	r2, [fp]
 80024f4:	b922      	cbnz	r2, 8002500 <main+0x1860>
 80024f6:	603a      	str	r2, [r7, #0]
 80024f8:	f8db 3000 	ldr.w	r3, [fp]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0fa      	beq.n	80024f6 <main+0x1856>

 // Disable gpt
 gptStopTimer(&GPTD3);
 8002500:	f000 fcf6 	bl	8002ef0 <gptStopTimer.constprop.8>
 gptStop(&GPTD3);
 8002504:	f000 fcac 	bl	8002e60 <gptStop.constprop.12>

 // Disable AC operation
 ACdisable();
 8002508:	f000 fe6a 	bl	80031e0 <ACdisable>
void dumpTriggeredInBuffer(void)
  {
  int ia,is,pos,sample,first,pre,ssize;

  // Response code
  if (halt)
 800250c:	f8da 3000 	ldr.w	r3, [sl]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d186      	bne.n	8002422 <main+0x1782>
        {
        sendByte(TRAN_HALT);
        return;
        }

  if (overrun_error)
 8002514:	f8df c10c 	ldr.w	ip, [pc, #268]	; 8002624 <main+0x1984>
 8002518:	f8dc 3000 	ldr.w	r3, [ip]
 800251c:	2b00      	cmp	r3, #0
 800251e:	f47f aa2a 	bne.w	8001976 <main+0xcd6>
        {
        sendByte(TRAN_OVERRUN);
        return;
        }

  if (timeout_error)
 8002522:	4943      	ldr	r1, [pc, #268]	; (8002630 <main+0x1990>)
 8002524:	6808      	ldr	r0, [r1, #0]
 8002526:	2800      	cmp	r0, #0
 8002528:	f040 8119 	bne.w	800275e <main+0x1abe>
        {
        sendByte(TRAN_TIMEOUT);
        return;
        }

  sendByte(TRAN_OK);
 800252c:	f001 fad8 	bl	8003ae0 <sendByte>

  sendByte(n_ai);  // Number of analog
 8002530:	4a35      	ldr	r2, [pc, #212]	; (8002608 <main+0x1968>)
  sendByte(n_di);  // Number of digital (always zero)
  sendU16(n_s);    // Number of samples
 8002532:	4e40      	ldr	r6, [pc, #256]	; (8002634 <main+0x1994>)
        return;
        }

  sendByte(TRAN_OK);

  sendByte(n_ai);  // Number of analog
 8002534:	6810      	ldr	r0, [r2, #0]
 8002536:	4615      	mov	r5, r2
 8002538:	f001 fad2 	bl	8003ae0 <sendByte>
  sendByte(n_di);  // Number of digital (always zero)
 800253c:	4b35      	ldr	r3, [pc, #212]	; (8002614 <main+0x1974>)
 800253e:	6818      	ldr	r0, [r3, #0]
 8002540:	f001 face 	bl	8003ae0 <sendByte>
  sendU16(n_s);    // Number of samples
 8002544:	6830      	ldr	r0, [r6, #0]
 8002546:	f001 fae3 	bl	8003b10 <sendU16>

  pre = n_s/2;               // Number of samples before trigger

  // Determine space used by each sample
  if (n_di)
 800254a:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 8002614 <main+0x1974>

  sendByte(n_ai);  // Number of analog
  sendByte(n_di);  // Number of digital (always zero)
  sendU16(n_s);    // Number of samples

  pre = n_s/2;               // Number of samples before trigger
 800254e:	6832      	ldr	r2, [r6, #0]

  // Determine space used by each sample
  if (n_di)
 8002550:	f8dc 3000 	ldr.w	r3, [ip]

  sendByte(n_ai);  // Number of analog
  sendByte(n_di);  // Number of digital (always zero)
  sendU16(n_s);    // Number of samples

  pre = n_s/2;               // Number of samples before trigger
 8002554:	eb02 70d2 	add.w	r0, r2, r2, lsr #31
 8002558:	1040      	asrs	r0, r0, #1

  // Determine space used by each sample
  if (n_di)
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 8104 	beq.w	8002768 <main+0x1ac8>
      ssize = n_ai+1;
 8002560:	6829      	ldr	r1, [r5, #0]
 8002562:	1c4d      	adds	r5, r1, #1
 8002564:	9505      	str	r5, [sp, #20]
     else
      ssize = n_ai;

  // First sample to send
  first = (n_s + triggerSample - pre + 1)%n_s;
 8002566:	4e34      	ldr	r6, [pc, #208]	; (8002638 <main+0x1998>)
 8002568:	6835      	ldr	r5, [r6, #0]
 800256a:	4415      	add	r5, r2
 800256c:	1a28      	subs	r0, r5, r0
 800256e:	3001      	adds	r0, #1
 8002570:	fb90 f6f2 	sdiv	r6, r0, r2
 8002574:	fb02 0616 	mls	r6, r2, r6, r0

  // Send analog data
  if (n_ai)
    for(ia=0;ia<n_ai;ia++)                  // For every analog input
 8002578:	2900      	cmp	r1, #0
      ssize = n_ai+1;
     else
      ssize = n_ai;

  // First sample to send
  first = (n_s + triggerSample - pre + 1)%n_s;
 800257a:	9604      	str	r6, [sp, #16]

  // Send analog data
  if (n_ai)
    for(ia=0;ia<n_ai;ia++)                  // For every analog input
 800257c:	f340 80ca 	ble.w	8002714 <main+0x1a74>
 8002580:	2500      	movs	r5, #0
       for(is=0;is<n_s;is++)                // For every sample
 8002582:	2a00      	cmp	r2, #0
 8002584:	dd16      	ble.n	80025b4 <main+0x1914>
 8002586:	2600      	movs	r6, #0
 8002588:	9904      	ldr	r1, [sp, #16]
          {
          sample = (first+is)%n_s;          // Calculate sample
          pos = sample*ssize+ia;            // Calculate buff position
          sendU16(tranBuff[pos]);           // Send it
 800258a:	4b2c      	ldr	r3, [pc, #176]	; (800263c <main+0x199c>)
 800258c:	4431      	add	r1, r6
  // Send analog data
  if (n_ai)
    for(ia=0;ia<n_ai;ia++)                  // For every analog input
       for(is=0;is<n_s;is++)                // For every sample
          {
          sample = (first+is)%n_s;          // Calculate sample
 800258e:	fb91 f0f2 	sdiv	r0, r1, r2
 8002592:	fb02 1210 	mls	r2, r2, r0, r1
          pos = sample*ssize+ia;            // Calculate buff position
          sendU16(tranBuff[pos]);           // Send it
 8002596:	9905      	ldr	r1, [sp, #20]
 8002598:	6818      	ldr	r0, [r3, #0]
 800259a:	fb01 5202 	mla	r2, r1, r2, r5
  first = (n_s + triggerSample - pre + 1)%n_s;

  // Send analog data
  if (n_ai)
    for(ia=0;ia<n_ai;ia++)                  // For every analog input
       for(is=0;is<n_s;is++)                // For every sample
 800259e:	3601      	adds	r6, #1
          {
          sample = (first+is)%n_s;          // Calculate sample
          pos = sample*ssize+ia;            // Calculate buff position
          sendU16(tranBuff[pos]);           // Send it
 80025a0:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
 80025a4:	f001 fab4 	bl	8003b10 <sendU16>
  first = (n_s + triggerSample - pre + 1)%n_s;

  // Send analog data
  if (n_ai)
    for(ia=0;ia<n_ai;ia++)                  // For every analog input
       for(is=0;is<n_s;is++)                // For every sample
 80025a8:	f8df c088 	ldr.w	ip, [pc, #136]	; 8002634 <main+0x1994>
 80025ac:	f8dc 2000 	ldr.w	r2, [ip]
 80025b0:	42b2      	cmp	r2, r6
 80025b2:	dce9      	bgt.n	8002588 <main+0x18e8>
  // First sample to send
  first = (n_s + triggerSample - pre + 1)%n_s;

  // Send analog data
  if (n_ai)
    for(ia=0;ia<n_ai;ia++)                  // For every analog input
 80025b4:	4814      	ldr	r0, [pc, #80]	; (8002608 <main+0x1968>)
 80025b6:	6803      	ldr	r3, [r0, #0]
 80025b8:	3501      	adds	r5, #1
 80025ba:	429d      	cmp	r5, r3
 80025bc:	f280 80a8 	bge.w	8002710 <main+0x1a70>
 80025c0:	4b1c      	ldr	r3, [pc, #112]	; (8002634 <main+0x1994>)
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	e7dd      	b.n	8002582 <main+0x18e2>
 // Check size and primary wavetable
 if (w_d > waveDbuffSize())
    {
	w_d = 0;
    // Calculate new memory configuration
    tranBuff = &buff[w_s+w_s2+w_d];
 80025c6:	f8df c078 	ldr.w	ip, [pc, #120]	; 8002640 <main+0x19a0>
 80025ca:	481c      	ldr	r0, [pc, #112]	; (800263c <main+0x199c>)
 80025cc:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     waved_mask = DIO_MASK;

 // Check size and primary wavetable
 if (w_d > waveDbuffSize())
    {
	w_d = 0;
 80025d0:	2300      	movs	r3, #0
    // Calculate new memory configuration
    tranBuff = &buff[w_s+w_s2+w_d];
 80025d2:	6001      	str	r1, [r0, #0]

    sendByte(NACK);
 80025d4:	20e2      	movs	r0, #226	; 0xe2
     waved_mask = DIO_MASK;

 // Check size and primary wavetable
 if (w_d > waveDbuffSize())
    {
	w_d = 0;
 80025d6:	6033      	str	r3, [r6, #0]
    // Calculate new memory configuration
    tranBuff = &buff[w_s+w_s2+w_d];

    sendByte(NACK);
 80025d8:	f001 fa82 	bl	8003ae0 <sendByte>
    sendCRC();
 80025dc:	f001 fa70 	bl	8003ac0 <sendCRC>
 80025e0:	f7fe bf95 	b.w	800150e <main+0x86e>
 80025e4:	50000100 	.word	0x50000100
 80025e8:	40021000 	.word	0x40021000
 80025ec:	4001003c 	.word	0x4001003c
 80025f0:	50000500 	.word	0x50000500
 80025f4:	40010044 	.word	0x40010044
 80025f8:	50000400 	.word	0x50000400
 80025fc:	40010040 	.word	0x40010040
 8002600:	20000ec4 	.word	0x20000ec4
 8002604:	20000818 	.word	0x20000818
 8002608:	20000804 	.word	0x20000804
 800260c:	48000800 	.word	0x48000800
 8002610:	20000cac 	.word	0x20000cac
 8002614:	20000f40 	.word	0x20000f40
 8002618:	20000e58 	.word	0x20000e58
 800261c:	20000f50 	.word	0x20000f50
 8002620:	20000c64 	.word	0x20000c64
 8002624:	20000c90 	.word	0x20000c90
 8002628:	2000080c 	.word	0x2000080c
 800262c:	08006368 	.word	0x08006368
 8002630:	20000c60 	.word	0x20000c60
 8002634:	20000814 	.word	0x20000814
 8002638:	20000c5c 	.word	0x20000c5c
 800263c:	20000cb8 	.word	0x20000cb8
 8002640:	20000f6c 	.word	0x20000f6c
 8002644:	20000f44 	.word	0x20000f44
 8002648:	20000c58 	.word	0x20000c58
 800264c:	20000c98 	.word	0x20000c98
 // Check size and primary wavetable
 if (w_s2 > wave2buffSize())
    {
    w_s2 = 0;
    // Calculate new memory configuration
    waveDbuff=&buff[w_s+w_s2];
 8002650:	4e4d      	ldr	r6, [pc, #308]	; (8002788 <main+0x1ae8>)
 8002652:	f8df c140 	ldr.w	ip, [pc, #320]	; 8002794 <main+0x1af4>
    tranBuff =&buff[w_s+w_s2];
 8002656:	4b4d      	ldr	r3, [pc, #308]	; (800278c <main+0x1aec>)
 w_s2 = getU16();

 // Check size and primary wavetable
 if (w_s2 > wave2buffSize())
    {
    w_s2 = 0;
 8002658:	600d      	str	r5, [r1, #0]
    // Calculate new memory configuration
    waveDbuff=&buff[w_s+w_s2];
 800265a:	eb06 0242 	add.w	r2, r6, r2, lsl #1
    tranBuff =&buff[w_s+w_s2];

    sendByte(NACK);
 800265e:	20e2      	movs	r0, #226	; 0xe2
 // Check size and primary wavetable
 if (w_s2 > wave2buffSize())
    {
    w_s2 = 0;
    // Calculate new memory configuration
    waveDbuff=&buff[w_s+w_s2];
 8002660:	f8cc 2000 	str.w	r2, [ip]
    tranBuff =&buff[w_s+w_s2];
 8002664:	601a      	str	r2, [r3, #0]

    sendByte(NACK);
 8002666:	f001 fa3b 	bl	8003ae0 <sendByte>
    sendCRC();
 800266a:	f001 fa29 	bl	8003ac0 <sendCRC>
 800266e:	f7fe bf4e 	b.w	800150e <main+0x86e>
 w_s = getU16();

 // Check size
 if (w_s > BSIZE)
    {
    w_s = 0; // Eliminate table
 8002672:	6015      	str	r5, [r2, #0]

    // Calculate new memory configuration
    wave2buff=&buff[w_s];
    waveDbuff=&buff[w_s];
    tranBuff =&buff[w_s];
 8002674:	f8df c114 	ldr.w	ip, [pc, #276]	; 800278c <main+0x1aec>
 if (w_s > BSIZE)
    {
    w_s = 0; // Eliminate table

    // Calculate new memory configuration
    wave2buff=&buff[w_s];
 8002678:	4d45      	ldr	r5, [pc, #276]	; (8002790 <main+0x1af0>)
    waveDbuff=&buff[w_s];
 800267a:	4e46      	ldr	r6, [pc, #280]	; (8002794 <main+0x1af4>)
 if (w_s > BSIZE)
    {
    w_s = 0; // Eliminate table

    // Calculate new memory configuration
    wave2buff=&buff[w_s];
 800267c:	4b42      	ldr	r3, [pc, #264]	; (8002788 <main+0x1ae8>)
 800267e:	602b      	str	r3, [r5, #0]
    waveDbuff=&buff[w_s];
    tranBuff =&buff[w_s];

    sendByte(NACK);
 8002680:	20e2      	movs	r0, #226	; 0xe2
    {
    w_s = 0; // Eliminate table

    // Calculate new memory configuration
    wave2buff=&buff[w_s];
    waveDbuff=&buff[w_s];
 8002682:	6033      	str	r3, [r6, #0]
    tranBuff =&buff[w_s];
 8002684:	f8cc 3000 	str.w	r3, [ip]

    sendByte(NACK);
 8002688:	f001 fa2a 	bl	8003ae0 <sendByte>
    sendCRC();
 800268c:	f001 fa18 	bl	8003ac0 <sendCRC>
 8002690:	f7fe bf3d 	b.w	800150e <main+0x86e>
        // On error Sends ECRC + CRC and return 0
        if (!crcResponse()) return;
        switch(i)
            {
            case 1:
               DAC1_WRITE(value);   // Scale and send
 8002694:	4b40      	ldr	r3, [pc, #256]	; (8002798 <main+0x1af8>)
 8002696:	1136      	asrs	r6, r6, #4
 8002698:	609e      	str	r6, [r3, #8]
 800269a:	f7ff bb2f 	b.w	8001cfc <main+0x105c>

 // Current size for buffer
 if (n_di)
	 currentBsize = (n_ai+1) * n_s;
   else
     currentBsize = n_ai * n_s;
 800269e:	493f      	ldr	r1, [pc, #252]	; (800279c <main+0x1afc>)
 80026a0:	4d3f      	ldr	r5, [pc, #252]	; (80027a0 <main+0x1b00>)
 80026a2:	680b      	ldr	r3, [r1, #0]
 80026a4:	682a      	ldr	r2, [r5, #0]
 80026a6:	4e3f      	ldr	r6, [pc, #252]	; (80027a4 <main+0x1b04>)
 80026a8:	fb02 f303 	mul.w	r3, r2, r3
 80026ac:	6033      	str	r3, [r6, #0]
 80026ae:	f7ff b8c0 	b.w	8001832 <main+0xb92>

 // Current size for buffer
 if (n_di)
	 currentBsize = (n_ai+1) * n_s;
   else
     currentBsize = n_ai * n_s;
 80026b2:	493a      	ldr	r1, [pc, #232]	; (800279c <main+0x1afc>)
 80026b4:	4d3a      	ldr	r5, [pc, #232]	; (80027a0 <main+0x1b00>)
 80026b6:	680b      	ldr	r3, [r1, #0]
 80026b8:	682a      	ldr	r2, [r5, #0]
 80026ba:	4e3a      	ldr	r6, [pc, #232]	; (80027a4 <main+0x1b04>)
 80026bc:	fb02 f303 	mul.w	r3, r2, r3
 80026c0:	6033      	str	r3, [r6, #0]
 80026c2:	f7fe be79 	b.w	80013b8 <main+0x718>

 // Current size for buffer
 if (n_di)
	 currentBsize = (n_ai+1) * n_s;
   else
     currentBsize = n_ai * n_s;
 80026c6:	4935      	ldr	r1, [pc, #212]	; (800279c <main+0x1afc>)
 80026c8:	4d35      	ldr	r5, [pc, #212]	; (80027a0 <main+0x1b00>)
 80026ca:	680b      	ldr	r3, [r1, #0]
 80026cc:	682a      	ldr	r2, [r5, #0]
 80026ce:	4e35      	ldr	r6, [pc, #212]	; (80027a4 <main+0x1b04>)
 80026d0:	fb02 f303 	mul.w	r3, r2, r3
 80026d4:	6033      	str	r3, [r6, #0]
 80026d6:	f7fe bf51 	b.w	800157c <main+0x8dc>

 // Current size for buffer
 if (n_di)
	 currentBsize = (n_ai+1) * n_s;
   else
     currentBsize = n_ai * n_s;
 80026da:	4d30      	ldr	r5, [pc, #192]	; (800279c <main+0x1afc>)
 80026dc:	4e31      	ldr	r6, [pc, #196]	; (80027a4 <main+0x1b04>)
 80026de:	682a      	ldr	r2, [r5, #0]
 80026e0:	fb02 f303 	mul.w	r3, r2, r3
 80026e4:	6033      	str	r3, [r6, #0]
 80026e6:	f7ff b976 	b.w	80019d6 <main+0xd36>

 // Check limits
 if ((stime < MIN_STIME) || (stime > MAX_STIME))
      sendByte(NACK);
      else
      sendByte(ACK);
 80026ea:	20b5      	movs	r0, #181	; 0xb5
 80026ec:	f001 f9f8 	bl	8003ae0 <sendByte>
 80026f0:	f7ff b879 	b.w	80017e6 <main+0xb46>
 if (!crcResponse()) return;

 // Check line number
 if (line >= NDIO)
     {
     sendByte(NACK);
 80026f4:	20e2      	movs	r0, #226	; 0xe2
 80026f6:	f001 f9f3 	bl	8003ae0 <sendByte>
     sendCRC();
 80026fa:	f001 f9e1 	bl	8003ac0 <sendCRC>
 80026fe:	f7fe bfc9 	b.w	8001694 <main+0x9f4>

 // Current size for buffer
 if (n_di)
	 currentBsize = (n_ai+1) * n_s;
   else
     currentBsize = n_ai * n_s;
 8002702:	4826      	ldr	r0, [pc, #152]	; (800279c <main+0x1afc>)
 8002704:	4927      	ldr	r1, [pc, #156]	; (80027a4 <main+0x1b04>)
 8002706:	6802      	ldr	r2, [r0, #0]
 8002708:	fb02 f303 	mul.w	r3, r2, r3
 800270c:	600b      	str	r3, [r1, #0]
 800270e:	e6db      	b.n	80024c8 <main+0x1828>
 8002710:	4925      	ldr	r1, [pc, #148]	; (80027a8 <main+0x1b08>)
 8002712:	680b      	ldr	r3, [r1, #0]
          pos = sample*ssize+ia;            // Calculate buff position
          sendU16(tranBuff[pos]);           // Send it
          }

  // Send digital data
  if (n_di)
 8002714:	2b00      	cmp	r3, #0
 8002716:	f43f aa3e 	beq.w	8001b96 <main+0xef6>
	  for(is=0;is<n_s;is++)                // For every sample
 800271a:	4d21      	ldr	r5, [pc, #132]	; (80027a0 <main+0x1b00>)
 800271c:	682b      	ldr	r3, [r5, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	f77f aa39 	ble.w	8001b96 <main+0xef6>
 8002724:	9e05      	ldr	r6, [sp, #20]
 8002726:	2500      	movs	r5, #0
 8002728:	9904      	ldr	r1, [sp, #16]
	  {
	  sample = (first+is)%n_s;          // Calculate sample
	  pos = sample*ssize+n_ai;          // Calculate buff position
	  sendU16((tranBuff[pos])&(DIO_MASK));
 800272a:	f8df c070 	ldr.w	ip, [pc, #112]	; 800279c <main+0x1afc>
 800272e:	4429      	add	r1, r5

  // Send digital data
  if (n_di)
	  for(is=0;is<n_s;is++)                // For every sample
	  {
	  sample = (first+is)%n_s;          // Calculate sample
 8002730:	fb91 fef3 	sdiv	lr, r1, r3
 8002734:	fb03 131e 	mls	r3, r3, lr, r1
	  pos = sample*ssize+n_ai;          // Calculate buff position
	  sendU16((tranBuff[pos])&(DIO_MASK));
 8002738:	f8dc 0000 	ldr.w	r0, [ip]
 800273c:	4913      	ldr	r1, [pc, #76]	; (800278c <main+0x1aec>)
 800273e:	fb03 0006 	mla	r0, r3, r6, r0
 8002742:	680b      	ldr	r3, [r1, #0]
 8002744:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8002748:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800274c:	f001 f9e0 	bl	8003b10 <sendU16>
          sendU16(tranBuff[pos]);           // Send it
          }

  // Send digital data
  if (n_di)
	  for(is=0;is<n_s;is++)                // For every sample
 8002750:	4a13      	ldr	r2, [pc, #76]	; (80027a0 <main+0x1b00>)
 8002752:	6813      	ldr	r3, [r2, #0]
 8002754:	3501      	adds	r5, #1
 8002756:	42ab      	cmp	r3, r5
 8002758:	dce6      	bgt.n	8002728 <main+0x1a88>
 800275a:	f7ff ba1c 	b.w	8001b96 <main+0xef6>
        return;
        }

  if (timeout_error)
        {
        sendByte(TRAN_TIMEOUT);
 800275e:	2002      	movs	r0, #2
 8002760:	f001 f9be 	bl	8003ae0 <sendByte>
 8002764:	f7ff ba17 	b.w	8001b96 <main+0xef6>

  // Determine space used by each sample
  if (n_di)
      ssize = n_ai+1;
     else
      ssize = n_ai;
 8002768:	682d      	ldr	r5, [r5, #0]
 800276a:	9505      	str	r5, [sp, #20]
 800276c:	4629      	mov	r1, r5
 800276e:	e6fa      	b.n	8002566 <main+0x18c6>
 {
 int i,value=0;
 uint32_t sum;

 sum = 0;
 for(i=0;i<=nread;i++)
 8002770:	2100      	movs	r1, #0
 8002772:	9105      	str	r1, [sp, #20]
 8002774:	f7ff bb7c 	b.w	8001e70 <main+0x11d0>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8002778:	f885 7020 	strb.w	r7, [r5, #32]
 800277c:	e7fe      	b.n	800277c <main+0x1adc>
  /* Deciding mask to be applied on the data register on receive, this is
     required in order to mask out the parity bit.*/
  if ((config->cr1 & USART_CR1_PCE) != 0U) {
    switch (config->cr1 & (USART_CR1_M_1 | USART_CR1_M_0)) {
    case 0:
      sdp->rxmask = 0x7F;
 800277e:	237f      	movs	r3, #127	; 0x7f
 8002780:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
 8002784:	f7fe bd0f 	b.w	80011a6 <main+0x506>
 8002788:	20000f6c 	.word	0x20000f6c
 800278c:	20000cb8 	.word	0x20000cb8
 8002790:	20000cd0 	.word	0x20000cd0
 8002794:	20000f4c 	.word	0x20000f4c
 8002798:	40007400 	.word	0x40007400
 800279c:	20000804 	.word	0x20000804
 80027a0:	20000814 	.word	0x20000814
 80027a4:	20000c98 	.word	0x20000c98
 80027a8:	20000f40 	.word	0x20000f40
 80027ac:	f3af 8000 	nop.w

080027b0 <wakeup.4726.4215>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 80027b0:	b410      	push	{r4}
 80027b2:	2320      	movs	r3, #32
 80027b4:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->state) {
 80027b8:	f890 3020 	ldrb.w	r3, [r0, #32]
 80027bc:	2b07      	cmp	r3, #7
 80027be:	d80e      	bhi.n	80027de <wakeup.4726.4215+0x2e>
 80027c0:	e8df f003 	tbb	[pc, r3]
 80027c4:	240d0d28 	.word	0x240d0d28
 80027c8:	080d0408 	.word	0x080d0408
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 80027cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 80027ce:	689a      	ldr	r2, [r3, #8]
 80027d0:	3201      	adds	r2, #1
 80027d2:	609a      	str	r2, [r3, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 80027d4:	e890 000c 	ldmia.w	r0, {r2, r3}
 80027d8:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 80027da:	6802      	ldr	r2, [r0, #0]
 80027dc:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
 80027de:	f04f 34ff 	mov.w	r4, #4294967295
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 80027e2:	2200      	movs	r2, #0
 80027e4:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 80027e6:	4b0e      	ldr	r3, [pc, #56]	; (8002820 <wakeup.4726.4215+0x70>)
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
 80027e8:	6244      	str	r4, [r0, #36]	; 0x24
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 80027ea:	f880 2020 	strb.w	r2, [r0, #32]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
 80027ee:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80027f0:	689a      	ldr	r2, [r3, #8]
 80027f2:	428a      	cmp	r2, r1
 80027f4:	d2fb      	bcs.n	80027ee <wakeup.4726.4215+0x3e>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	6042      	str	r2, [r0, #4]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio >= tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 80027fa:	6003      	str	r3, [r0, #0]
 80027fc:	2100      	movs	r1, #0
  tp->queue.prev             = cp->queue.prev;
  tp->queue.prev->queue.next = tp;
 80027fe:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8002800:	6058      	str	r0, [r3, #4]
 8002802:	f381 8811 	msr	BASEPRI, r1
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8002806:	f85d 4b04 	ldr.w	r4, [sp], #4
 800280a:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
 800280c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]
 8002812:	e7e4      	b.n	80027de <wakeup.4726.4215+0x2e>
 8002814:	2300      	movs	r3, #0
 8002816:	f383 8811 	msr	BASEPRI, r3
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 800281a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	20000ec8 	.word	0x20000ec8
 8002824:	f3af 8000 	nop.w
 8002828:	f3af 8000 	nop.w
 800282c:	f3af 8000 	nop.w

08002830 <long_to_string_with_divisor.9360.constprop.3.4409>:
#include "memstreams.h"

#define MAX_FILLER 11
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
 8002830:	b4f0      	push	{r4, r5, r6, r7}
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 8002832:	f100 070b 	add.w	r7, r0, #11
 8002836:	f100 050a 	add.w	r5, r0, #10
 800283a:	460c      	mov	r4, r1
  do {
    i = (int)(l % radix);
 800283c:	fbb1 f6f2 	udiv	r6, r1, r2
 8002840:	fb02 1116 	mls	r1, r2, r6, r1
    i += '0';
 8002844:	f101 0330 	add.w	r3, r1, #48	; 0x30
    if (i > '9')
 8002848:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 800284a:	bfc8      	it	gt
 800284c:	f101 0337 	addgt.w	r3, r1, #55	; 0x37
    *--q = i;
 8002850:	b2db      	uxtb	r3, r3
    l /= radix;
  } while ((ll /= radix) != 0);
 8002852:	fbb4 f4f2 	udiv	r4, r4, r2
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    l /= radix;
 8002856:	4631      	mov	r1, r6
  do {
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
 8002858:	462e      	mov	r6, r5
 800285a:	f805 3901 	strb.w	r3, [r5], #-1
    l /= radix;
  } while ((ll /= radix) != 0);
 800285e:	2c00      	cmp	r4, #0
 8002860:	d1ec      	bne.n	800283c <long_to_string_with_divisor.9360.constprop.3.4409+0xc>

  i = (int)(p + MAX_FILLER - q);
 8002862:	1bb9      	subs	r1, r7, r6
 8002864:	4632      	mov	r2, r6
 8002866:	4401      	add	r1, r0
 8002868:	e001      	b.n	800286e <long_to_string_with_divisor.9360.constprop.3.4409+0x3e>
 800286a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  do
    *p++ = *q++;
 800286e:	f800 3b01 	strb.w	r3, [r0], #1
  while (--i);
 8002872:	4288      	cmp	r0, r1
 8002874:	d1f9      	bne.n	800286a <long_to_string_with_divisor.9360.constprop.3.4409+0x3a>

  return p;
}
 8002876:	bcf0      	pop	{r4, r5, r6, r7}
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	f3af 8000 	nop.w

08002880 <buttonCall.10500>:
static void buttonCall(EXTDriver *extp, expchannel_t channel)
  {
  (void)extp;
  (void)channel;

  halt = 1;
 8002880:	4b01      	ldr	r3, [pc, #4]	; (8002888 <buttonCall.10500+0x8>)
 8002882:	2201      	movs	r2, #1
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	4770      	bx	lr
 8002888:	20000e4c 	.word	0x20000e4c
 800288c:	f3af 8000 	nop.w

08002890 <dualWavePlayCallback.9910>:
void dualWavePlayCallback(GPTDriver *gptp)
 {
 (void)gptp; // So that the compiler don't complain about gptp usage

 // Write DACs (New faster code)
 DAC1_WRITE(buff[w_pos++]);
 8002890:	4a2c      	ldr	r2, [pc, #176]	; (8002944 <dualWavePlayCallback.9910+0xb4>)
 8002892:	4b2d      	ldr	r3, [pc, #180]	; (8002948 <dualWavePlayCallback.9910+0xb8>)
 8002894:	6810      	ldr	r0, [r2, #0]
 8002896:	492d      	ldr	r1, [pc, #180]	; (800294c <dualWavePlayCallback.9910+0xbc>)

/****************** DUAL WAVE PLAY CODE *************************/

// ISR for the dualWavePlay function
void dualWavePlayCallback(GPTDriver *gptp)
 {
 8002898:	b4f0      	push	{r4, r5, r6, r7}
 (void)gptp; // So that the compiler don't complain about gptp usage

 // Write DACs (New faster code)
 DAC1_WRITE(buff[w_pos++]);
 800289a:	f833 6010 	ldrh.w	r6, [r3, r0, lsl #1]
 DAC2_WRITE(wave2buff[w_pos2++]);
 800289e:	4d2c      	ldr	r5, [pc, #176]	; (8002950 <dualWavePlayCallback.9910+0xc0>)
 80028a0:	4b2c      	ldr	r3, [pc, #176]	; (8002954 <dualWavePlayCallback.9910+0xc4>)
 80028a2:	682d      	ldr	r5, [r5, #0]

 // Write digital if enabled
 if (w_d)
 80028a4:	4c2c      	ldr	r4, [pc, #176]	; (8002958 <dualWavePlayCallback.9910+0xc8>)
void dualWavePlayCallback(GPTDriver *gptp)
 {
 (void)gptp; // So that the compiler don't complain about gptp usage

 // Write DACs (New faster code)
 DAC1_WRITE(buff[w_pos++]);
 80028a6:	3001      	adds	r0, #1
 80028a8:	0936      	lsrs	r6, r6, #4
 80028aa:	6010      	str	r0, [r2, #0]
 80028ac:	608e      	str	r6, [r1, #8]
 DAC2_WRITE(wave2buff[w_pos2++]);
 80028ae:	6818      	ldr	r0, [r3, #0]
 80028b0:	f835 5010 	ldrh.w	r5, [r5, r0, lsl #1]
 80028b4:	3001      	adds	r0, #1
 80028b6:	092d      	lsrs	r5, r5, #4
 80028b8:	6018      	str	r0, [r3, #0]
 80028ba:	614d      	str	r5, [r1, #20]

 // Write digital if enabled
 if (w_d)
 80028bc:	6821      	ldr	r1, [r4, #0]
 80028be:	b161      	cbz	r1, 80028da <dualWavePlayCallback.9910+0x4a>
	 (DIO_PORT->ODR) = (waveDbuff[w_posd++])|waved_base;
 80028c0:	4c26      	ldr	r4, [pc, #152]	; (800295c <dualWavePlayCallback.9910+0xcc>)
 80028c2:	4827      	ldr	r0, [pc, #156]	; (8002960 <dualWavePlayCallback.9910+0xd0>)
 80028c4:	6826      	ldr	r6, [r4, #0]
 80028c6:	4d27      	ldr	r5, [pc, #156]	; (8002964 <dualWavePlayCallback.9910+0xd4>)
 80028c8:	6804      	ldr	r4, [r0, #0]
 80028ca:	f836 7014 	ldrh.w	r7, [r6, r4, lsl #1]
 80028ce:	682e      	ldr	r6, [r5, #0]
 80028d0:	4d25      	ldr	r5, [pc, #148]	; (8002968 <dualWavePlayCallback.9910+0xd8>)
 80028d2:	3401      	adds	r4, #1
 80028d4:	433e      	orrs	r6, r7
 80028d6:	6004      	str	r4, [r0, #0]
 80028d8:	616e      	str	r6, [r5, #20]

 // Check infinite wave
 if (!infiniteWave)
 80028da:	4824      	ldr	r0, [pc, #144]	; (800296c <dualWavePlayCallback.9910+0xdc>)
 80028dc:	6800      	ldr	r0, [r0, #0]
 80028de:	b940      	cbnz	r0, 80028f2 <dualWavePlayCallback.9910+0x62>
 	{
	if (!w_n)
 80028e0:	4823      	ldr	r0, [pc, #140]	; (8002970 <dualWavePlayCallback.9910+0xe0>)
 80028e2:	6804      	ldr	r4, [r0, #0]
 80028e4:	2c00      	cmp	r4, #0
 80028e6:	d028      	beq.n	800293a <dualWavePlayCallback.9910+0xaa>
		endTicker = 1;
		return;
		}
	   else
	    {
		w_n--;
 80028e8:	6804      	ldr	r4, [r0, #0]
 80028ea:	3c01      	subs	r4, #1
 80028ec:	6004      	str	r4, [r0, #0]
		if (!w_n)
 80028ee:	6800      	ldr	r0, [r0, #0]
 80028f0:	b318      	cbz	r0, 800293a <dualWavePlayCallback.9910+0xaa>
		    }
	    }
 	}

 // Check primary wave rollover
 if (w_pos == w_s) w_pos = 0;
 80028f2:	4c20      	ldr	r4, [pc, #128]	; (8002974 <dualWavePlayCallback.9910+0xe4>)
 80028f4:	6810      	ldr	r0, [r2, #0]
 80028f6:	6822      	ldr	r2, [r4, #0]
 80028f8:	4c12      	ldr	r4, [pc, #72]	; (8002944 <dualWavePlayCallback.9910+0xb4>)
 80028fa:	4290      	cmp	r0, r2
 80028fc:	bf08      	it	eq
 80028fe:	2200      	moveq	r2, #0

 // Check for secondary wave rollover
 if (w_pos2 == w_s2) w_pos2 = 0;
 8002900:	481d      	ldr	r0, [pc, #116]	; (8002978 <dualWavePlayCallback.9910+0xe8>)
		    }
	    }
 	}

 // Check primary wave rollover
 if (w_pos == w_s) w_pos = 0;
 8002902:	bf08      	it	eq
 8002904:	6022      	streq	r2, [r4, #0]

 // Check for secondary wave rollover
 if (w_pos2 == w_s2) w_pos2 = 0;
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	6803      	ldr	r3, [r0, #0]
 800290a:	4812      	ldr	r0, [pc, #72]	; (8002954 <dualWavePlayCallback.9910+0xc4>)
 800290c:	429a      	cmp	r2, r3
 800290e:	bf04      	itt	eq
 8002910:	2300      	moveq	r3, #0
 8002912:	6003      	streq	r3, [r0, #0]

 // Check for digital wave rollover
 if (w_posd == w_d) w_posd = 0;
 8002914:	4b12      	ldr	r3, [pc, #72]	; (8002960 <dualWavePlayCallback.9910+0xd0>)
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	4291      	cmp	r1, r2
 800291a:	bf04      	itt	eq
 800291c:	2200      	moveq	r2, #0
 800291e:	601a      	streq	r2, [r3, #0]

 // Check for halt
 if (halt)
 8002920:	4b16      	ldr	r3, [pc, #88]	; (800297c <dualWavePlayCallback.9910+0xec>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	b94b      	cbnz	r3, 800293a <dualWavePlayCallback.9910+0xaa>
      endTicker = 1;
      return;
      }

 // Check for overrun
 if (overrun)
 8002926:	4b16      	ldr	r3, [pc, #88]	; (8002980 <dualWavePlayCallback.9910+0xf0>)
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	b112      	cbz	r2, 8002932 <dualWavePlayCallback.9910+0xa2>
    overrun_error = 1;
 800292c:	4a15      	ldr	r2, [pc, #84]	; (8002984 <dualWavePlayCallback.9910+0xf4>)
 800292e:	2101      	movs	r1, #1
 8002930:	6011      	str	r1, [r2, #0]

 overrun = 1;
 8002932:	2201      	movs	r2, #1
 8002934:	601a      	str	r2, [r3, #0]
 }
 8002936:	bcf0      	pop	{r4, r5, r6, r7}
 8002938:	4770      	bx	lr

 // Check for halt
 if (halt)
      {
      // Signal end
      endTicker = 1;
 800293a:	4b13      	ldr	r3, [pc, #76]	; (8002988 <dualWavePlayCallback.9910+0xf8>)
 800293c:	2201      	movs	r2, #1
 800293e:	601a      	str	r2, [r3, #0]
 // Check for overrun
 if (overrun)
    overrun_error = 1;

 overrun = 1;
 }
 8002940:	bcf0      	pop	{r4, r5, r6, r7}
 8002942:	4770      	bx	lr
 8002944:	20000e50 	.word	0x20000e50
 8002948:	20000f6c 	.word	0x20000f6c
 800294c:	40007400 	.word	0x40007400
 8002950:	20000cd0 	.word	0x20000cd0
 8002954:	20000e38 	.word	0x20000e38
 8002958:	20000f44 	.word	0x20000f44
 800295c:	20000f4c 	.word	0x20000f4c
 8002960:	20000f64 	.word	0x20000f64
 8002964:	20000cb0 	.word	0x20000cb0
 8002968:	48000800 	.word	0x48000800
 800296c:	2000f9d8 	.word	0x2000f9d8
 8002970:	20000818 	.word	0x20000818
 8002974:	2000f9cc 	.word	0x2000f9cc
 8002978:	20000c8c 	.word	0x20000c8c
 800297c:	20000e4c 	.word	0x20000e4c
 8002980:	20000c94 	.word	0x20000c94
 8002984:	20000c90 	.word	0x20000c90
 8002988:	20000f68 	.word	0x20000f68
 800298c:	f3af 8000 	nop.w

08002990 <wavePlayCallback.9907>:
void wavePlayCallback(GPTDriver *gptp)
 {
 (void)gptp; // So that the compiler don't complain about gptp usage

 // Write DAC if enabled
 if (w_s)
 8002990:	4b23      	ldr	r3, [pc, #140]	; (8002a20 <wavePlayCallback.9907+0x90>)
 8002992:	681a      	ldr	r2, [r3, #0]

/****************** WAVE PLAY CODE *************************/

// ISR for the wavePlay function
void wavePlayCallback(GPTDriver *gptp)
 {
 8002994:	b470      	push	{r4, r5, r6}
 (void)gptp; // So that the compiler don't complain about gptp usage

 // Write DAC if enabled
 if (w_s)
 8002996:	b14a      	cbz	r2, 80029ac <wavePlayCallback.9907+0x1c>
	 DAC1_WRITE(buff[w_pos++]);
 8002998:	4b22      	ldr	r3, [pc, #136]	; (8002a24 <wavePlayCallback.9907+0x94>)
 800299a:	4c23      	ldr	r4, [pc, #140]	; (8002a28 <wavePlayCallback.9907+0x98>)
 800299c:	6819      	ldr	r1, [r3, #0]
 800299e:	4823      	ldr	r0, [pc, #140]	; (8002a2c <wavePlayCallback.9907+0x9c>)
 80029a0:	f834 4011 	ldrh.w	r4, [r4, r1, lsl #1]
 80029a4:	3101      	adds	r1, #1
 80029a6:	0924      	lsrs	r4, r4, #4
 80029a8:	6019      	str	r1, [r3, #0]
 80029aa:	6084      	str	r4, [r0, #8]
 // Write digital if enabled
 if (w_d)
 80029ac:	4b20      	ldr	r3, [pc, #128]	; (8002a30 <wavePlayCallback.9907+0xa0>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	b163      	cbz	r3, 80029cc <wavePlayCallback.9907+0x3c>
	 (DIO_PORT->ODR) = (waveDbuff[w_posd++])|waved_base;
 80029b2:	4820      	ldr	r0, [pc, #128]	; (8002a34 <wavePlayCallback.9907+0xa4>)
 80029b4:	4920      	ldr	r1, [pc, #128]	; (8002a38 <wavePlayCallback.9907+0xa8>)
 80029b6:	6805      	ldr	r5, [r0, #0]
 80029b8:	4c20      	ldr	r4, [pc, #128]	; (8002a3c <wavePlayCallback.9907+0xac>)
 80029ba:	6808      	ldr	r0, [r1, #0]
 80029bc:	f835 6010 	ldrh.w	r6, [r5, r0, lsl #1]
 80029c0:	6825      	ldr	r5, [r4, #0]
 80029c2:	4c1f      	ldr	r4, [pc, #124]	; (8002a40 <wavePlayCallback.9907+0xb0>)
 80029c4:	3001      	adds	r0, #1
 80029c6:	4335      	orrs	r5, r6
 80029c8:	6008      	str	r0, [r1, #0]
 80029ca:	6165      	str	r5, [r4, #20]

 // Check infinite wave
 if (!infiniteWave)
 80029cc:	491d      	ldr	r1, [pc, #116]	; (8002a44 <wavePlayCallback.9907+0xb4>)
 80029ce:	6809      	ldr	r1, [r1, #0]
 80029d0:	b939      	cbnz	r1, 80029e2 <wavePlayCallback.9907+0x52>
 	{
	if (!w_n)
 80029d2:	491d      	ldr	r1, [pc, #116]	; (8002a48 <wavePlayCallback.9907+0xb8>)
 80029d4:	6808      	ldr	r0, [r1, #0]
 80029d6:	b1e8      	cbz	r0, 8002a14 <wavePlayCallback.9907+0x84>
		endTicker = 1;
		return;
		}
	   else
	    {
		w_n--;
 80029d8:	6808      	ldr	r0, [r1, #0]
 80029da:	3801      	subs	r0, #1
 80029dc:	6008      	str	r0, [r1, #0]
		if (!w_n)
 80029de:	6809      	ldr	r1, [r1, #0]
 80029e0:	b1c1      	cbz	r1, 8002a14 <wavePlayCallback.9907+0x84>
		    }
	    }
 	}

 // Check for wave rollover
 if (w_pos == w_s) w_pos = 0;
 80029e2:	4910      	ldr	r1, [pc, #64]	; (8002a24 <wavePlayCallback.9907+0x94>)
 80029e4:	6808      	ldr	r0, [r1, #0]
 80029e6:	4282      	cmp	r2, r0
 80029e8:	bf04      	itt	eq
 80029ea:	2200      	moveq	r2, #0
 80029ec:	600a      	streq	r2, [r1, #0]
 if (w_posd == w_d) w_posd = 0;
 80029ee:	4a12      	ldr	r2, [pc, #72]	; (8002a38 <wavePlayCallback.9907+0xa8>)
 80029f0:	6811      	ldr	r1, [r2, #0]
 80029f2:	428b      	cmp	r3, r1
 80029f4:	bf04      	itt	eq
 80029f6:	2300      	moveq	r3, #0
 80029f8:	6013      	streq	r3, [r2, #0]

 // Check for halt
 if (halt)
 80029fa:	4b14      	ldr	r3, [pc, #80]	; (8002a4c <wavePlayCallback.9907+0xbc>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	b94b      	cbnz	r3, 8002a14 <wavePlayCallback.9907+0x84>
      endTicker = 1;
      return;
      }

 // Check for overrun
 if (overrun)
 8002a00:	4b13      	ldr	r3, [pc, #76]	; (8002a50 <wavePlayCallback.9907+0xc0>)
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	b112      	cbz	r2, 8002a0c <wavePlayCallback.9907+0x7c>
    overrun_error = 1;
 8002a06:	4a13      	ldr	r2, [pc, #76]	; (8002a54 <wavePlayCallback.9907+0xc4>)
 8002a08:	2101      	movs	r1, #1
 8002a0a:	6011      	str	r1, [r2, #0]

 overrun = 1;
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	601a      	str	r2, [r3, #0]
 }
 8002a10:	bc70      	pop	{r4, r5, r6}
 8002a12:	4770      	bx	lr

 // Check for halt
 if (halt)
      {
      // Signal end
      endTicker = 1;
 8002a14:	4b10      	ldr	r3, [pc, #64]	; (8002a58 <wavePlayCallback.9907+0xc8>)
 8002a16:	2201      	movs	r2, #1
 8002a18:	601a      	str	r2, [r3, #0]
 // Check for overrun
 if (overrun)
    overrun_error = 1;

 overrun = 1;
 }
 8002a1a:	bc70      	pop	{r4, r5, r6}
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	2000f9cc 	.word	0x2000f9cc
 8002a24:	20000e50 	.word	0x20000e50
 8002a28:	20000f6c 	.word	0x20000f6c
 8002a2c:	40007400 	.word	0x40007400
 8002a30:	20000f44 	.word	0x20000f44
 8002a34:	20000f4c 	.word	0x20000f4c
 8002a38:	20000f64 	.word	0x20000f64
 8002a3c:	20000cb0 	.word	0x20000cb0
 8002a40:	48000800 	.word	0x48000800
 8002a44:	2000f9d8 	.word	0x2000f9d8
 8002a48:	20000818 	.word	0x20000818
 8002a4c:	20000e4c 	.word	0x20000e4c
 8002a50:	20000c94 	.word	0x20000c94
 8002a54:	20000c90 	.word	0x20000c90
 8002a58:	20000f68 	.word	0x20000f68
 8002a5c:	f3af 8000 	nop.w

08002a60 <singleWaveResponseCallback.9904>:
void singleWaveResponseCallback(GPTDriver *gptp)
 {
 (void)gptp;

 // Write DAC1
 DAC1_WRITE(buff[w_pos++]);
 8002a60:	4b42      	ldr	r3, [pc, #264]	; (8002b6c <singleWaveResponseCallback.9904+0x10c>)
 8002a62:	4a43      	ldr	r2, [pc, #268]	; (8002b70 <singleWaveResponseCallback.9904+0x110>)
 8002a64:	6819      	ldr	r1, [r3, #0]
 8002a66:	4843      	ldr	r0, [pc, #268]	; (8002b74 <singleWaveResponseCallback.9904+0x114>)
//   PRO1 line high during ISR
//   PRO2 line mimics overrun variable

// Callback for the singleWaveResponse function
void singleWaveResponseCallback(GPTDriver *gptp)
 {
 8002a68:	b4f0      	push	{r4, r5, r6, r7}
 (void)gptp;

 // Write DAC1
 DAC1_WRITE(buff[w_pos++]);
 8002a6a:	f832 4011 	ldrh.w	r4, [r2, r1, lsl #1]

 // Check if we are in store stage
 if (!w_n)
 8002a6e:	4a42      	ldr	r2, [pc, #264]	; (8002b78 <singleWaveResponseCallback.9904+0x118>)
void singleWaveResponseCallback(GPTDriver *gptp)
 {
 (void)gptp;

 // Write DAC1
 DAC1_WRITE(buff[w_pos++]);
 8002a70:	3101      	adds	r1, #1
 8002a72:	0924      	lsrs	r4, r4, #4
 8002a74:	6019      	str	r1, [r3, #0]
 8002a76:	6084      	str	r4, [r0, #8]

 // Check if we are in store stage
 if (!w_n)
 8002a78:	6811      	ldr	r1, [r2, #0]
 8002a7a:	b1e1      	cbz	r1, 8002ab6 <singleWaveResponseCallback.9904+0x56>
      }
    else
      // We are in waves before storing
      {
      // Decrease counter
      w_n--;
 8002a7c:	6810      	ldr	r0, [r2, #0]
 8002a7e:	493f      	ldr	r1, [pc, #252]	; (8002b7c <singleWaveResponseCallback.9904+0x11c>)
 8002a80:	3801      	subs	r0, #1
 8002a82:	6010      	str	r0, [r2, #0]
 8002a84:	680a      	ldr	r2, [r1, #0]
      }

 // Check wave rollover
 if (w_pos == w_s) w_pos = 0;
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4938      	ldr	r1, [pc, #224]	; (8002b6c <singleWaveResponseCallback.9904+0x10c>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	bf04      	itt	eq
 8002a8e:	2300      	moveq	r3, #0
 8002a90:	600b      	streq	r3, [r1, #0]

 // Check for overrun
 if (overrun)
 8002a92:	4b3b      	ldr	r3, [pc, #236]	; (8002b80 <singleWaveResponseCallback.9904+0x120>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	b112      	cbz	r2, 8002a9e <singleWaveResponseCallback.9904+0x3e>
    overrun_error = 1;
 8002a98:	4a3a      	ldr	r2, [pc, #232]	; (8002b84 <singleWaveResponseCallback.9904+0x124>)
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	6011      	str	r1, [r2, #0]

 // Check halt
 if (halt)
 8002a9e:	4a3a      	ldr	r2, [pc, #232]	; (8002b88 <singleWaveResponseCallback.9904+0x128>)
 8002aa0:	6812      	ldr	r2, [r2, #0]
 8002aa2:	b91a      	cbnz	r2, 8002aac <singleWaveResponseCallback.9904+0x4c>
    // Signal end
    endTicker = 1;
    return;
    }

 overrun = 1;
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]
 }
 8002aa8:	bcf0      	pop	{r4, r5, r6, r7}
 8002aaa:	4770      	bx	lr

 // Check halt
 if (halt)
    {
    // Signal end
    endTicker = 1;
 8002aac:	4b37      	ldr	r3, [pc, #220]	; (8002b8c <singleWaveResponseCallback.9904+0x12c>)
 8002aae:	2201      	movs	r2, #1
 8002ab0:	601a      	str	r2, [r3, #0]
    return;
    }

 overrun = 1;
 }
 8002ab2:	bcf0      	pop	{r4, r5, r6, r7}
 8002ab4:	4770      	bx	lr
 if (!w_n)
      {
      // Store data
      //a1 = ReadAnalogAC(channelAC);
      //tranBuff[inBuffPos++]=a1;
	  storeSingleADC(channelAC);
 8002ab6:	4a36      	ldr	r2, [pc, #216]	; (8002b90 <singleWaveResponseCallback.9904+0x130>)
// Store a single ADC read
static inline int storeSingleADC(int line)
 {
 int a=0;

 switch(line)
 8002ab8:	6812      	ldr	r2, [r2, #0]
 8002aba:	3a01      	subs	r2, #1
 8002abc:	2a07      	cmp	r2, #7
 8002abe:	d851      	bhi.n	8002b64 <singleWaveResponseCallback.9904+0x104>
 8002ac0:	e8df f002 	tbb	[pc, r2]
 8002ac4:	0432463c 	.word	0x0432463c
 8002ac8:	323c4646 	.word	0x323c4646
	{
    case 4: // ADC1 channels
    	ADC1->CR |= ADC_CR_ADSTART;
 8002acc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    	while (!(ADC1->ISR & ADC_ISR_EOC));
 8002ad0:	4610      	mov	r0, r2
 int a=0;

 switch(line)
	{
    case 4: // ADC1 channels
    	ADC1->CR |= ADC_CR_ADSTART;
 8002ad2:	6891      	ldr	r1, [r2, #8]
 8002ad4:	f041 0104 	orr.w	r1, r1, #4
 8002ad8:	6091      	str	r1, [r2, #8]
    	while (!(ADC1->ISR & ADC_ISR_EOC));
 8002ada:	6802      	ldr	r2, [r0, #0]
 8002adc:	0756      	lsls	r6, r2, #29
 8002ade:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8002ae2:	d5fa      	bpl.n	8002ada <singleWaveResponseCallback.9904+0x7a>
    	break;
    case 3: // ADC4 channel
    case 8:
    	ADC4->CR |= ADC_CR_ADSTART;
    	while (!(ADC4->ISR & ADC_ISR_EOC));
    	a = (ADC4->DR)<<4;
 8002ae4:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8002ae6:	ea4f 1c02 	mov.w	ip, r2, lsl #4
 8002aea:	fa1f fc8c 	uxth.w	ip, ip
      //a1 = ReadAnalogAC(channelAC);
      //tranBuff[inBuffPos++]=a1;
	  storeSingleADC(channelAC);

      // Increase sample
      samples++;
 8002aee:	4929      	ldr	r1, [pc, #164]	; (8002b94 <singleWaveResponseCallback.9904+0x134>)
    	while (!(ADC4->ISR & ADC_ISR_EOC));
    	a = (ADC4->DR)<<4;
    	break;
	}

 tranBuff[inBuffPos++] = a;
 8002af0:	4c29      	ldr	r4, [pc, #164]	; (8002b98 <singleWaveResponseCallback.9904+0x138>)

      // Increase sample
      samples++;

      // Check if we should end
      if (samples >= n_s)
 8002af2:	4d2a      	ldr	r5, [pc, #168]	; (8002b9c <singleWaveResponseCallback.9904+0x13c>)
      //a1 = ReadAnalogAC(channelAC);
      //tranBuff[inBuffPos++]=a1;
	  storeSingleADC(channelAC);

      // Increase sample
      samples++;
 8002af4:	680a      	ldr	r2, [r1, #0]
    	while (!(ADC4->ISR & ADC_ISR_EOC));
    	a = (ADC4->DR)<<4;
    	break;
	}

 tranBuff[inBuffPos++] = a;
 8002af6:	4e2a      	ldr	r6, [pc, #168]	; (8002ba0 <singleWaveResponseCallback.9904+0x140>)
 8002af8:	6820      	ldr	r0, [r4, #0]

      // Increase sample
      samples++;

      // Check if we should end
      if (samples >= n_s)
 8002afa:	682d      	ldr	r5, [r5, #0]
    	while (!(ADC4->ISR & ADC_ISR_EOC));
    	a = (ADC4->DR)<<4;
    	break;
	}

 tranBuff[inBuffPos++] = a;
 8002afc:	6836      	ldr	r6, [r6, #0]
      //a1 = ReadAnalogAC(channelAC);
      //tranBuff[inBuffPos++]=a1;
	  storeSingleADC(channelAC);

      // Increase sample
      samples++;
 8002afe:	3201      	adds	r2, #1
    	while (!(ADC4->ISR & ADC_ISR_EOC));
    	a = (ADC4->DR)<<4;
    	break;
	}

 tranBuff[inBuffPos++] = a;
 8002b00:	1c47      	adds	r7, r0, #1

      // Increase sample
      samples++;

      // Check if we should end
      if (samples >= n_s)
 8002b02:	42aa      	cmp	r2, r5
    	while (!(ADC4->ISR & ADC_ISR_EOC));
    	a = (ADC4->DR)<<4;
    	break;
	}

 tranBuff[inBuffPos++] = a;
 8002b04:	6027      	str	r7, [r4, #0]
 8002b06:	f826 c010 	strh.w	ip, [r6, r0, lsl #1]
      //a1 = ReadAnalogAC(channelAC);
      //tranBuff[inBuffPos++]=a1;
	  storeSingleADC(channelAC);

      // Increase sample
      samples++;
 8002b0a:	600a      	str	r2, [r1, #0]

      // Check if we should end
      if (samples >= n_s)
 8002b0c:	db02      	blt.n	8002b14 <singleWaveResponseCallback.9904+0xb4>
           {
           // Signal end
           endTicker = 1;
 8002b0e:	4a1f      	ldr	r2, [pc, #124]	; (8002b8c <singleWaveResponseCallback.9904+0x12c>)
 8002b10:	2101      	movs	r1, #1
 8002b12:	6011      	str	r1, [r2, #0]
           }

      // Check wave rollover
      if (w_pos == w_s) w_pos = 0;
 8002b14:	4a19      	ldr	r2, [pc, #100]	; (8002b7c <singleWaveResponseCallback.9904+0x11c>)
 8002b16:	6819      	ldr	r1, [r3, #0]
 8002b18:	6812      	ldr	r2, [r2, #0]
 8002b1a:	4814      	ldr	r0, [pc, #80]	; (8002b6c <singleWaveResponseCallback.9904+0x10c>)
 8002b1c:	4291      	cmp	r1, r2
 8002b1e:	d1b2      	bne.n	8002a86 <singleWaveResponseCallback.9904+0x26>
 8002b20:	2400      	movs	r4, #0
 8002b22:	460a      	mov	r2, r1
 8002b24:	6004      	str	r4, [r0, #0]
 8002b26:	e7ae      	b.n	8002a86 <singleWaveResponseCallback.9904+0x26>
    	while (!(ADC3->ISR & ADC_ISR_EOC));
    	a = (ADC3->DR)<<4;
    	break;
    case 3: // ADC4 channel
    case 8:
    	ADC4->CR |= ADC_CR_ADSTART;
 8002b28:	481e      	ldr	r0, [pc, #120]	; (8002ba4 <singleWaveResponseCallback.9904+0x144>)
 8002b2a:	6882      	ldr	r2, [r0, #8]
 8002b2c:	f042 0204 	orr.w	r2, r2, #4
 8002b30:	6082      	str	r2, [r0, #8]
    	while (!(ADC4->ISR & ADC_ISR_EOC));
 8002b32:	6802      	ldr	r2, [r0, #0]
 8002b34:	491b      	ldr	r1, [pc, #108]	; (8002ba4 <singleWaveResponseCallback.9904+0x144>)
 8002b36:	0752      	lsls	r2, r2, #29
 8002b38:	d5fb      	bpl.n	8002b32 <singleWaveResponseCallback.9904+0xd2>
 8002b3a:	e7d3      	b.n	8002ae4 <singleWaveResponseCallback.9904+0x84>
    	while (!(ADC2->ISR & ADC_ISR_EOC));
    	a = (ADC2->DR)<<4;
    	break;
    case 1: // ADC3 channels
    case 7:
    	ADC3->CR |= ADC_CR_ADSTART;
 8002b3c:	481a      	ldr	r0, [pc, #104]	; (8002ba8 <singleWaveResponseCallback.9904+0x148>)
 8002b3e:	6882      	ldr	r2, [r0, #8]
 8002b40:	f042 0204 	orr.w	r2, r2, #4
 8002b44:	6082      	str	r2, [r0, #8]
    	while (!(ADC3->ISR & ADC_ISR_EOC));
 8002b46:	6802      	ldr	r2, [r0, #0]
 8002b48:	4917      	ldr	r1, [pc, #92]	; (8002ba8 <singleWaveResponseCallback.9904+0x148>)
 8002b4a:	0754      	lsls	r4, r2, #29
 8002b4c:	d5fb      	bpl.n	8002b46 <singleWaveResponseCallback.9904+0xe6>
 8002b4e:	e7c9      	b.n	8002ae4 <singleWaveResponseCallback.9904+0x84>
    	a = (ADC1->DR)<<4;
    	break;
    case 2: // ADC2 channels
    case 5:
    case 6:
    	ADC2->CR |= ADC_CR_ADSTART;
 8002b50:	4816      	ldr	r0, [pc, #88]	; (8002bac <singleWaveResponseCallback.9904+0x14c>)
 8002b52:	6882      	ldr	r2, [r0, #8]
 8002b54:	f042 0204 	orr.w	r2, r2, #4
 8002b58:	6082      	str	r2, [r0, #8]
    	while (!(ADC2->ISR & ADC_ISR_EOC));
 8002b5a:	6802      	ldr	r2, [r0, #0]
 8002b5c:	4913      	ldr	r1, [pc, #76]	; (8002bac <singleWaveResponseCallback.9904+0x14c>)
 8002b5e:	0755      	lsls	r5, r2, #29
 8002b60:	d5fb      	bpl.n	8002b5a <singleWaveResponseCallback.9904+0xfa>
 8002b62:	e7bf      	b.n	8002ae4 <singleWaveResponseCallback.9904+0x84>
// Store a single ADC read
static inline int storeSingleADC(int line)
 {
 int a=0;

 switch(line)
 8002b64:	f04f 0c00 	mov.w	ip, #0
 8002b68:	e7c1      	b.n	8002aee <singleWaveResponseCallback.9904+0x8e>
 8002b6a:	bf00      	nop
 8002b6c:	20000e50 	.word	0x20000e50
 8002b70:	20000f6c 	.word	0x20000f6c
 8002b74:	40007400 	.word	0x40007400
 8002b78:	20000818 	.word	0x20000818
 8002b7c:	2000f9cc 	.word	0x2000f9cc
 8002b80:	20000c94 	.word	0x20000c94
 8002b84:	20000c90 	.word	0x20000c90
 8002b88:	20000e4c 	.word	0x20000e4c
 8002b8c:	20000f68 	.word	0x20000f68
 8002b90:	20000e54 	.word	0x20000e54
 8002b94:	20000c58 	.word	0x20000c58
 8002b98:	20000e58 	.word	0x20000e58
 8002b9c:	20000814 	.word	0x20000814
 8002ba0:	20000cb8 	.word	0x20000cb8
 8002ba4:	50000500 	.word	0x50000500
 8002ba8:	50000400 	.word	0x50000400
 8002bac:	50000100 	.word	0x50000100

08002bb0 <dualWaveResponseCallback.9901>:
void dualWaveResponseCallback(GPTDriver *gptp)
 {
 (void)gptp; // So that the compiler don't complain about gptp usage

 // Write DACs
 DAC1_WRITE(buff[w_pos++]);
 8002bb0:	4a69      	ldr	r2, [pc, #420]	; (8002d58 <dualWaveResponseCallback.9901+0x1a8>)
 8002bb2:	4b6a      	ldr	r3, [pc, #424]	; (8002d5c <dualWaveResponseCallback.9901+0x1ac>)
 8002bb4:	6810      	ldr	r0, [r2, #0]
 8002bb6:	496a      	ldr	r1, [pc, #424]	; (8002d60 <dualWaveResponseCallback.9901+0x1b0>)

/*************** DUAL WAVE RESPONSE CODE *************************/

// ISR for the dualWaveResponse function
void dualWaveResponseCallback(GPTDriver *gptp)
 {
 8002bb8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 (void)gptp; // So that the compiler don't complain about gptp usage

 // Write DACs
 DAC1_WRITE(buff[w_pos++]);
 8002bbc:	f833 6010 	ldrh.w	r6, [r3, r0, lsl #1]
 DAC2_WRITE(wave2buff[w_pos2++]);
 8002bc0:	4c68      	ldr	r4, [pc, #416]	; (8002d64 <dualWaveResponseCallback.9901+0x1b4>)
 8002bc2:	4b69      	ldr	r3, [pc, #420]	; (8002d68 <dualWaveResponseCallback.9901+0x1b8>)
 8002bc4:	6824      	ldr	r4, [r4, #0]

 // Write digital if enabled
 if (w_d)
 8002bc6:	4d69      	ldr	r5, [pc, #420]	; (8002d6c <dualWaveResponseCallback.9901+0x1bc>)
void dualWaveResponseCallback(GPTDriver *gptp)
 {
 (void)gptp; // So that the compiler don't complain about gptp usage

 // Write DACs
 DAC1_WRITE(buff[w_pos++]);
 8002bc8:	3001      	adds	r0, #1
 8002bca:	0936      	lsrs	r6, r6, #4
 8002bcc:	6010      	str	r0, [r2, #0]
 8002bce:	608e      	str	r6, [r1, #8]
 DAC2_WRITE(wave2buff[w_pos2++]);
 8002bd0:	6818      	ldr	r0, [r3, #0]
 8002bd2:	f834 4010 	ldrh.w	r4, [r4, r0, lsl #1]
 8002bd6:	3001      	adds	r0, #1
 8002bd8:	0924      	lsrs	r4, r4, #4
 8002bda:	6018      	str	r0, [r3, #0]
 8002bdc:	614c      	str	r4, [r1, #20]

 // Write digital if enabled
 if (w_d)
 8002bde:	682c      	ldr	r4, [r5, #0]
 8002be0:	2c00      	cmp	r4, #0
 8002be2:	d148      	bne.n	8002c76 <dualWaveResponseCallback.9901+0xc6>
 8002be4:	4862      	ldr	r0, [pc, #392]	; (8002d70 <dualWaveResponseCallback.9901+0x1c0>)
 	 (DIO_PORT->ODR) = (waveDbuff[w_posd++])|waved_base;

 // Check if we are in store stage
 if (!w_n)
 8002be6:	4963      	ldr	r1, [pc, #396]	; (8002d74 <dualWaveResponseCallback.9901+0x1c4>)
 8002be8:	680e      	ldr	r6, [r1, #0]
 8002bea:	b9fe      	cbnz	r6, 8002c2c <dualWaveResponseCallback.9901+0x7c>
      {
	  // Store analog data (Non pipelined mode)
	  if (n_ai) storeAnalog();
 8002bec:	4962      	ldr	r1, [pc, #392]	; (8002d78 <dualWaveResponseCallback.9901+0x1c8>)
 8002bee:	680f      	ldr	r7, [r1, #0]
 8002bf0:	2f00      	cmp	r7, #0
 8002bf2:	d15b      	bne.n	8002cac <dualWaveResponseCallback.9901+0xfc>

	  // Store digital data
	  if (n_di) storeDigital();
 8002bf4:	4961      	ldr	r1, [pc, #388]	; (8002d7c <dualWaveResponseCallback.9901+0x1cc>)
 8002bf6:	6809      	ldr	r1, [r1, #0]
 8002bf8:	b159      	cbz	r1, 8002c12 <dualWaveResponseCallback.9901+0x62>
 }

// Store digital inputs in circular buffer
static inline void storeDigital(void)
 {
 tranBuff[inBuffPos++] = DIO_PORT->IDR;
 8002bfa:	4c61      	ldr	r4, [pc, #388]	; (8002d80 <dualWaveResponseCallback.9901+0x1d0>)
 8002bfc:	4e61      	ldr	r6, [pc, #388]	; (8002d84 <dualWaveResponseCallback.9901+0x1d4>)
 8002bfe:	6821      	ldr	r1, [r4, #0]
 8002c00:	4f61      	ldr	r7, [pc, #388]	; (8002d88 <dualWaveResponseCallback.9901+0x1d8>)
 8002c02:	6836      	ldr	r6, [r6, #0]
 8002c04:	f101 0c01 	add.w	ip, r1, #1
 8002c08:	f8c4 c000 	str.w	ip, [r4]
 8002c0c:	693c      	ldr	r4, [r7, #16]
 8002c0e:	f826 4011 	strh.w	r4, [r6, r1, lsl #1]

	  // Store digital data
	  if (n_di) storeDigital();

      // Increase sample
      samples++;
 8002c12:	4c5e      	ldr	r4, [pc, #376]	; (8002d8c <dualWaveResponseCallback.9901+0x1dc>)

      // Check if we should end
      if (samples >= n_s)
 8002c14:	4e5e      	ldr	r6, [pc, #376]	; (8002d90 <dualWaveResponseCallback.9901+0x1e0>)

	  // Store digital data
	  if (n_di) storeDigital();

      // Increase sample
      samples++;
 8002c16:	6821      	ldr	r1, [r4, #0]

      // Check if we should end
      if (samples >= n_s)
 8002c18:	6836      	ldr	r6, [r6, #0]

	  // Store digital data
	  if (n_di) storeDigital();

      // Increase sample
      samples++;
 8002c1a:	3101      	adds	r1, #1

      // Check if we should end
      if (samples >= n_s)
 8002c1c:	42b1      	cmp	r1, r6

	  // Store digital data
	  if (n_di) storeDigital();

      // Increase sample
      samples++;
 8002c1e:	6021      	str	r1, [r4, #0]

      // Check if we should end
      if (samples >= n_s)
 8002c20:	db3c      	blt.n	8002c9c <dualWaveResponseCallback.9901+0xec>
           {
           // Signal end
           endTicker = 1;
 8002c22:	495c      	ldr	r1, [pc, #368]	; (8002d94 <dualWaveResponseCallback.9901+0x1e4>)
 8002c24:	682c      	ldr	r4, [r5, #0]
 8002c26:	2501      	movs	r5, #1
 8002c28:	600d      	str	r5, [r1, #0]
 8002c2a:	e002      	b.n	8002c32 <dualWaveResponseCallback.9901+0x82>
           }
      }
     else
      {
      // Decrease counter
      w_n--;
 8002c2c:	680d      	ldr	r5, [r1, #0]
 8002c2e:	3d01      	subs	r5, #1
 8002c30:	600d      	str	r5, [r1, #0]
      }

 // Check wave rollover
 if (w_pos == w_s)   w_pos = 0;
 8002c32:	4d59      	ldr	r5, [pc, #356]	; (8002d98 <dualWaveResponseCallback.9901+0x1e8>)
 8002c34:	6811      	ldr	r1, [r2, #0]
 8002c36:	682a      	ldr	r2, [r5, #0]
 8002c38:	4d47      	ldr	r5, [pc, #284]	; (8002d58 <dualWaveResponseCallback.9901+0x1a8>)
 8002c3a:	4291      	cmp	r1, r2
 8002c3c:	bf08      	it	eq
 8002c3e:	2200      	moveq	r2, #0
 if (w_pos2 == w_s2) w_pos2 = 0;
 8002c40:	4956      	ldr	r1, [pc, #344]	; (8002d9c <dualWaveResponseCallback.9901+0x1ec>)
      // Decrease counter
      w_n--;
      }

 // Check wave rollover
 if (w_pos == w_s)   w_pos = 0;
 8002c42:	bf08      	it	eq
 8002c44:	602a      	streq	r2, [r5, #0]
 if (w_pos2 == w_s2) w_pos2 = 0;
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	680b      	ldr	r3, [r1, #0]
 8002c4a:	4947      	ldr	r1, [pc, #284]	; (8002d68 <dualWaveResponseCallback.9901+0x1b8>)
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	bf04      	itt	eq
 8002c50:	2300      	moveq	r3, #0
 8002c52:	600b      	streq	r3, [r1, #0]
 if (w_posd == w_d) w_posd = 0;
 8002c54:	6803      	ldr	r3, [r0, #0]
 8002c56:	4a46      	ldr	r2, [pc, #280]	; (8002d70 <dualWaveResponseCallback.9901+0x1c0>)
 8002c58:	42a3      	cmp	r3, r4
 8002c5a:	bf04      	itt	eq
 8002c5c:	2300      	moveq	r3, #0
 8002c5e:	6013      	streq	r3, [r2, #0]

 // Check halt
 if (halt)
 8002c60:	4b4f      	ldr	r3, [pc, #316]	; (8002da0 <dualWaveResponseCallback.9901+0x1f0>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	b9e3      	cbnz	r3, 8002ca0 <dualWaveResponseCallback.9901+0xf0>
    endTicker = 1;
    return;
    }

 // Check for overrun
 if (overrun)
 8002c66:	4b4f      	ldr	r3, [pc, #316]	; (8002da4 <dualWaveResponseCallback.9901+0x1f4>)
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	b99a      	cbnz	r2, 8002c94 <dualWaveResponseCallback.9901+0xe4>
    overrun_error = 1;

 overrun = 1;
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]
 }
 8002c70:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002c74:	4770      	bx	lr
 DAC1_WRITE(buff[w_pos++]);
 DAC2_WRITE(wave2buff[w_pos2++]);

 // Write digital if enabled
 if (w_d)
 	 (DIO_PORT->ODR) = (waveDbuff[w_posd++])|waved_base;
 8002c76:	494c      	ldr	r1, [pc, #304]	; (8002da8 <dualWaveResponseCallback.9901+0x1f8>)
 8002c78:	483d      	ldr	r0, [pc, #244]	; (8002d70 <dualWaveResponseCallback.9901+0x1c0>)
 8002c7a:	680f      	ldr	r7, [r1, #0]
 8002c7c:	4e4b      	ldr	r6, [pc, #300]	; (8002dac <dualWaveResponseCallback.9901+0x1fc>)
 8002c7e:	6801      	ldr	r1, [r0, #0]
 8002c80:	f837 c011 	ldrh.w	ip, [r7, r1, lsl #1]
 8002c84:	6837      	ldr	r7, [r6, #0]
 8002c86:	4e40      	ldr	r6, [pc, #256]	; (8002d88 <dualWaveResponseCallback.9901+0x1d8>)
 8002c88:	3101      	adds	r1, #1
 8002c8a:	ea4c 0707 	orr.w	r7, ip, r7
 8002c8e:	6001      	str	r1, [r0, #0]
 8002c90:	6177      	str	r7, [r6, #20]
 8002c92:	e7a8      	b.n	8002be6 <dualWaveResponseCallback.9901+0x36>
    return;
    }

 // Check for overrun
 if (overrun)
    overrun_error = 1;
 8002c94:	4a46      	ldr	r2, [pc, #280]	; (8002db0 <dualWaveResponseCallback.9901+0x200>)
 8002c96:	2101      	movs	r1, #1
 8002c98:	6011      	str	r1, [r2, #0]
 8002c9a:	e7e7      	b.n	8002c6c <dualWaveResponseCallback.9901+0xbc>
 8002c9c:	682c      	ldr	r4, [r5, #0]
 8002c9e:	e7c8      	b.n	8002c32 <dualWaveResponseCallback.9901+0x82>

 // Check halt
 if (halt)
    {
    // Signal end
    endTicker = 1;
 8002ca0:	4b3c      	ldr	r3, [pc, #240]	; (8002d94 <dualWaveResponseCallback.9901+0x1e4>)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	601a      	str	r2, [r3, #0]
 // Check for overrun
 if (overrun)
    overrun_error = 1;

 overrun = 1;
 }
 8002ca6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002caa:	4770      	bx	lr
// Checked with hardware profiling that it is inlined
static inline int storeAnalog(void)
 {
 int a1,a2,a3,a4;

 if (inBuffPos == currentBsize) inBuffPos = 0;
 8002cac:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 8002d80 <dualWaveResponseCallback.9901+0x1d0>
 8002cb0:	4c40      	ldr	r4, [pc, #256]	; (8002db4 <dualWaveResponseCallback.9901+0x204>)
 8002cb2:	f8dc 1000 	ldr.w	r1, [ip]
 8002cb6:	6824      	ldr	r4, [r4, #0]
 8002cb8:	42a1      	cmp	r1, r4

 ADC1->CR |= ADC_CR_ADSTART;
 8002cba:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
// Checked with hardware profiling that it is inlined
static inline int storeAnalog(void)
 {
 int a1,a2,a3,a4;

 if (inBuffPos == currentBsize) inBuffPos = 0;
 8002cbe:	bf08      	it	eq
 8002cc0:	f8cc 6000 	streq.w	r6, [ip]

 ADC1->CR |= ADC_CR_ADSTART;
 8002cc4:	688c      	ldr	r4, [r1, #8]
 ADC3->CR |= ADC_CR_ADSTART;
 8002cc6:	4e3c      	ldr	r6, [pc, #240]	; (8002db8 <dualWaveResponseCallback.9901+0x208>)
 {
 int a1,a2,a3,a4;

 if (inBuffPos == currentBsize) inBuffPos = 0;

 ADC1->CR |= ADC_CR_ADSTART;
 8002cc8:	f044 0404 	orr.w	r4, r4, #4
 8002ccc:	608c      	str	r4, [r1, #8]
 ADC3->CR |= ADC_CR_ADSTART;
 8002cce:	68b1      	ldr	r1, [r6, #8]
 8002cd0:	f041 0104 	orr.w	r1, r1, #4
 8002cd4:	60b1      	str	r1, [r6, #8]
 while (!(ADC3->ISR & ADC_ISR_EOC));
 8002cd6:	6831      	ldr	r1, [r6, #0]
 8002cd8:	4c37      	ldr	r4, [pc, #220]	; (8002db8 <dualWaveResponseCallback.9901+0x208>)
 8002cda:	0749      	lsls	r1, r1, #29
 8002cdc:	d5fb      	bpl.n	8002cd6 <dualWaveResponseCallback.9901+0x126>

 a4 = (ADC1->DR)<<4;
 8002cde:	f04f 48a0 	mov.w	r8, #1342177280	; 0x50000000
 a2 = (ADC2->DR)<<4;
 8002ce2:	4e36      	ldr	r6, [pc, #216]	; (8002dbc <dualWaveResponseCallback.9901+0x20c>)
 a1 = (ADC3->DR)<<4;
 a3 = (ADC4->DR)<<4;
 8002ce4:	4936      	ldr	r1, [pc, #216]	; (8002dc0 <dualWaveResponseCallback.9901+0x210>)

 ADC1->CR |= ADC_CR_ADSTART;
 ADC3->CR |= ADC_CR_ADSTART;
 while (!(ADC3->ISR & ADC_ISR_EOC));

 a4 = (ADC1->DR)<<4;
 8002ce6:	f8d8 9040 	ldr.w	r9, [r8, #64]	; 0x40
 a2 = (ADC2->DR)<<4;
 8002cea:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
 a1 = (ADC3->DR)<<4;
 8002cee:	6c26      	ldr	r6, [r4, #64]	; 0x40
 a3 = (ADC4->DR)<<4;
 8002cf0:	f8d1 a040 	ldr.w	sl, [r1, #64]	; 0x40

 if (n_ai >= 1) tranBuff[inBuffPos++] = a1;
 8002cf4:	2f00      	cmp	r7, #0
 8002cf6:	f77f af7d 	ble.w	8002bf4 <dualWaveResponseCallback.9901+0x44>
 8002cfa:	4c22      	ldr	r4, [pc, #136]	; (8002d84 <dualWaveResponseCallback.9901+0x1d4>)
 8002cfc:	f8dc 1000 	ldr.w	r1, [ip]
 8002d00:	6824      	ldr	r4, [r4, #0]
 ADC3->CR |= ADC_CR_ADSTART;
 while (!(ADC3->ISR & ADC_ISR_EOC));

 a4 = (ADC1->DR)<<4;
 a2 = (ADC2->DR)<<4;
 a1 = (ADC3->DR)<<4;
 8002d02:	0136      	lsls	r6, r6, #4
 a3 = (ADC4->DR)<<4;

 if (n_ai >= 1) tranBuff[inBuffPos++] = a1;
 8002d04:	f101 0b01 	add.w	fp, r1, #1
 if (n_ai >= 2) tranBuff[inBuffPos++] = a2;
 8002d08:	2f01      	cmp	r7, #1
 a4 = (ADC1->DR)<<4;
 a2 = (ADC2->DR)<<4;
 a1 = (ADC3->DR)<<4;
 a3 = (ADC4->DR)<<4;

 if (n_ai >= 1) tranBuff[inBuffPos++] = a1;
 8002d0a:	f8cc b000 	str.w	fp, [ip]
 8002d0e:	f824 6011 	strh.w	r6, [r4, r1, lsl #1]
 8002d12:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8002d16:	4e1a      	ldr	r6, [pc, #104]	; (8002d80 <dualWaveResponseCallback.9901+0x1d0>)
 if (n_ai >= 2) tranBuff[inBuffPos++] = a2;
 8002d18:	f43f af6c 	beq.w	8002bf4 <dualWaveResponseCallback.9901+0x44>
 8002d1c:	4464      	add	r4, ip
 ADC1->CR |= ADC_CR_ADSTART;
 ADC3->CR |= ADC_CR_ADSTART;
 while (!(ADC3->ISR & ADC_ISR_EOC));

 a4 = (ADC1->DR)<<4;
 a2 = (ADC2->DR)<<4;
 8002d1e:	ea4f 1808 	mov.w	r8, r8, lsl #4
 a1 = (ADC3->DR)<<4;
 a3 = (ADC4->DR)<<4;

 if (n_ai >= 1) tranBuff[inBuffPos++] = a1;
 if (n_ai >= 2) tranBuff[inBuffPos++] = a2;
 8002d22:	f101 0c02 	add.w	ip, r1, #2
 if (n_ai >= 3) tranBuff[inBuffPos++] = a3;
 8002d26:	2f02      	cmp	r7, #2
 a2 = (ADC2->DR)<<4;
 a1 = (ADC3->DR)<<4;
 a3 = (ADC4->DR)<<4;

 if (n_ai >= 1) tranBuff[inBuffPos++] = a1;
 if (n_ai >= 2) tranBuff[inBuffPos++] = a2;
 8002d28:	f8c6 c000 	str.w	ip, [r6]
 8002d2c:	f8a4 8002 	strh.w	r8, [r4, #2]
 if (n_ai >= 3) tranBuff[inBuffPos++] = a3;
 8002d30:	f43f af60 	beq.w	8002bf4 <dualWaveResponseCallback.9901+0x44>
 while (!(ADC3->ISR & ADC_ISR_EOC));

 a4 = (ADC1->DR)<<4;
 a2 = (ADC2->DR)<<4;
 a1 = (ADC3->DR)<<4;
 a3 = (ADC4->DR)<<4;
 8002d34:	ea4f 1a0a 	mov.w	sl, sl, lsl #4

 if (n_ai >= 1) tranBuff[inBuffPos++] = a1;
 if (n_ai >= 2) tranBuff[inBuffPos++] = a2;
 if (n_ai >= 3) tranBuff[inBuffPos++] = a3;
 8002d38:	f101 0c03 	add.w	ip, r1, #3
 if (n_ai >= 4) tranBuff[inBuffPos++] = a4;
 8002d3c:	2f03      	cmp	r7, #3
 a1 = (ADC3->DR)<<4;
 a3 = (ADC4->DR)<<4;

 if (n_ai >= 1) tranBuff[inBuffPos++] = a1;
 if (n_ai >= 2) tranBuff[inBuffPos++] = a2;
 if (n_ai >= 3) tranBuff[inBuffPos++] = a3;
 8002d3e:	f8c6 c000 	str.w	ip, [r6]
 8002d42:	f8a4 a004 	strh.w	sl, [r4, #4]
 if (n_ai >= 4) tranBuff[inBuffPos++] = a4;
 8002d46:	f43f af55 	beq.w	8002bf4 <dualWaveResponseCallback.9901+0x44>
 8002d4a:	3104      	adds	r1, #4

 ADC1->CR |= ADC_CR_ADSTART;
 ADC3->CR |= ADC_CR_ADSTART;
 while (!(ADC3->ISR & ADC_ISR_EOC));

 a4 = (ADC1->DR)<<4;
 8002d4c:	ea4f 1909 	mov.w	r9, r9, lsl #4
 a3 = (ADC4->DR)<<4;

 if (n_ai >= 1) tranBuff[inBuffPos++] = a1;
 if (n_ai >= 2) tranBuff[inBuffPos++] = a2;
 if (n_ai >= 3) tranBuff[inBuffPos++] = a3;
 if (n_ai >= 4) tranBuff[inBuffPos++] = a4;
 8002d50:	6031      	str	r1, [r6, #0]
 8002d52:	f8a4 9006 	strh.w	r9, [r4, #6]
 8002d56:	e74d      	b.n	8002bf4 <dualWaveResponseCallback.9901+0x44>
 8002d58:	20000e50 	.word	0x20000e50
 8002d5c:	20000f6c 	.word	0x20000f6c
 8002d60:	40007400 	.word	0x40007400
 8002d64:	20000cd0 	.word	0x20000cd0
 8002d68:	20000e38 	.word	0x20000e38
 8002d6c:	20000f44 	.word	0x20000f44
 8002d70:	20000f64 	.word	0x20000f64
 8002d74:	20000818 	.word	0x20000818
 8002d78:	20000804 	.word	0x20000804
 8002d7c:	20000f40 	.word	0x20000f40
 8002d80:	20000e58 	.word	0x20000e58
 8002d84:	20000cb8 	.word	0x20000cb8
 8002d88:	48000800 	.word	0x48000800
 8002d8c:	20000c58 	.word	0x20000c58
 8002d90:	20000814 	.word	0x20000814
 8002d94:	20000f68 	.word	0x20000f68
 8002d98:	2000f9cc 	.word	0x2000f9cc
 8002d9c:	20000c8c 	.word	0x20000c8c
 8002da0:	20000e4c 	.word	0x20000e4c
 8002da4:	20000c94 	.word	0x20000c94
 8002da8:	20000f4c 	.word	0x20000f4c
 8002dac:	20000cb0 	.word	0x20000cb0
 8002db0:	20000c90 	.word	0x20000c90
 8002db4:	20000c98 	.word	0x20000c98
 8002db8:	50000400 	.word	0x50000400
 8002dbc:	50000100 	.word	0x50000100
 8002dc0:	50000500 	.word	0x50000500
 8002dc4:	f3af 8000 	nop.w
 8002dc8:	f3af 8000 	nop.w
 8002dcc:	f3af 8000 	nop.w

08002dd0 <notify2.9246>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE;
 8002dd0:	4b02      	ldr	r3, [pc, #8]	; (8002ddc <notify2.9246+0xc>)
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	4770      	bx	lr
 8002ddc:	40004400 	.word	0x40004400

08002de0 <SVC_Handler>:
/*lint -restore*/
  struct port_extctx *ctxp;

#if CORTEX_USE_FPU
  /* Enforcing unstacking of the FP part of the context.*/
  FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 8002de0:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <SVC_Handler+0x1c>)
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	f022 0201 	bic.w	r2, r2, #1
 8002de8:	605a      	str	r2, [r3, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8002dea:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 8002dee:	3368      	adds	r3, #104	; 0x68
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8002df0:	f383 8809 	msr	PSP, r3
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8002df4:	2300      	movs	r3, #0
 8002df6:	f383 8811 	msr	BASEPRI, r3
 8002dfa:	4770      	bx	lr
 8002dfc:	e000ef30 	.word	0xe000ef30

08002e00 <chCoreAllocAligned>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocAligned(size_t size, unsigned align) {
 8002e00:	b430      	push	{r4, r5}
 8002e02:	2320      	movs	r3, #32
 8002e04:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
 8002e08:	4b0b      	ldr	r3, [pc, #44]	; (8002e38 <chCoreAllocAligned+0x38>)

  if (((size_t)endmem - (size_t)p) < size) {
 8002e0a:	4c0c      	ldr	r4, [pc, #48]	; (8002e3c <chCoreAllocAligned+0x3c>)

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
 8002e0c:	681a      	ldr	r2, [r3, #0]

  if (((size_t)endmem - (size_t)p) < size) {
 8002e0e:	6824      	ldr	r4, [r4, #0]

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
 8002e10:	3a01      	subs	r2, #1
 8002e12:	440a      	add	r2, r1
  uint8_t *p;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
 8002e14:	1e4d      	subs	r5, r1, #1
 8002e16:	4249      	negs	r1, r1
 8002e18:	4405      	add	r5, r0
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
 8002e1a:	ea02 0001 	and.w	r0, r2, r1

  if (((size_t)endmem - (size_t)p) < size) {
 8002e1e:	1a22      	subs	r2, r4, r0
  uint8_t *p;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
 8002e20:	4029      	ands	r1, r5
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);

  if (((size_t)endmem - (size_t)p) < size) {
 8002e22:	4291      	cmp	r1, r2
    return NULL;
  }
  nextmem = p + size;
 8002e24:	bf9a      	itte	ls
 8002e26:	1809      	addls	r1, r1, r0
 8002e28:	6019      	strls	r1, [r3, #0]

  size = MEM_ALIGN_NEXT(size, align);
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);

  if (((size_t)endmem - (size_t)p) < size) {
    return NULL;
 8002e2a:	2000      	movhi	r0, #0
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedI(size, align);
  chSysUnlock();

  return p;
}
 8002e32:	bc30      	pop	{r4, r5}
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	20000cd4 	.word	0x20000cd4
 8002e3c:	20000ccc 	.word	0x20000ccc

08002e40 <_idle_thread.4351>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8002e40:	e7fe      	b.n	8002e40 <_idle_thread.4351>
 8002e42:	bf00      	nop
 8002e44:	f3af 8000 	nop.w
 8002e48:	f3af 8000 	nop.w
 8002e4c:	f3af 8000 	nop.w

08002e50 <chTMStartMeasurementX.constprop.25>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8002e50:	4b01      	ldr	r3, [pc, #4]	; (8002e58 <chTMStartMeasurementX.constprop.25+0x8>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8002e54:	6083      	str	r3, [r0, #8]
 8002e56:	4770      	bx	lr
 8002e58:	e0001000 	.word	0xe0001000
 8002e5c:	f3af 8000 	nop.w

08002e60 <gptStop.constprop.12>:
 *
 * @param[in] gptp      pointer to the @p GPTDriver object
 *
 * @api
 */
void gptStop(GPTDriver *gptp) {
 8002e60:	b430      	push	{r4, r5}
 8002e62:	2320      	movs	r3, #32
 8002e64:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
void gpt_lld_stop(GPTDriver *gptp) {

  if (gptp->state == GPT_READY) {
 8002e68:	4b0e      	ldr	r3, [pc, #56]	; (8002ea4 <gptStop.constprop.12+0x44>)
 8002e6a:	781a      	ldrb	r2, [r3, #0]
 8002e6c:	2a02      	cmp	r2, #2
 8002e6e:	d110      	bne.n	8002e92 <gptStop.constprop.12+0x32>
    gptp->tim->CR1 = 0;                         /* Timer disabled.          */
 8002e70:	68d9      	ldr	r1, [r3, #12]
 *
 * @param[in] n         the interrupt number
 */
void nvicDisableVector(uint32_t n) {

  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 8002e72:	4c0d      	ldr	r4, [pc, #52]	; (8002ea8 <gptStop.constprop.12+0x48>)
#if STM32_GPT_USE_TIM3
    if (&GPTD3 == gptp) {
#if !defined(STM32_TIM3_SUPPRESS_ISR)
      nvicDisableVector(STM32_TIM3_NUMBER);
#endif
      rccDisableTIM3(FALSE);
 8002e74:	480d      	ldr	r0, [pc, #52]	; (8002eac <gptStop.constprop.12+0x4c>)
 * @notapi
 */
void gpt_lld_stop(GPTDriver *gptp) {

  if (gptp->state == GPT_READY) {
    gptp->tim->CR1 = 0;                         /* Timer disabled.          */
 8002e76:	2200      	movs	r2, #0
 8002e78:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
 8002e7c:	600a      	str	r2, [r1, #0]
    gptp->tim->DIER = 0;                        /* All IRQs disabled.       */
 8002e7e:	60ca      	str	r2, [r1, #12]
    gptp->tim->SR = 0;                          /* Clear pending IRQs.      */
 8002e80:	610a      	str	r2, [r1, #16]
 8002e82:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = 0U;
 8002e86:	f884 231d 	strb.w	r2, [r4, #797]	; 0x31d
#if STM32_GPT_USE_TIM3
    if (&GPTD3 == gptp) {
#if !defined(STM32_TIM3_SUPPRESS_ISR)
      nvicDisableVector(STM32_TIM3_NUMBER);
#endif
      rccDisableTIM3(FALSE);
 8002e8a:	69c2      	ldr	r2, [r0, #28]
 8002e8c:	f022 0202 	bic.w	r2, r2, #2
 8002e90:	61c2      	str	r2, [r0, #28]

  osalDbgAssert((gptp->state == GPT_STOP) || (gptp->state == GPT_READY),
                "invalid state");

  gpt_lld_stop(gptp);
  gptp->config = NULL;
 8002e92:	2200      	movs	r2, #0
  gptp->state  = GPT_STOP;
 8002e94:	2101      	movs	r1, #1

  osalDbgAssert((gptp->state == GPT_STOP) || (gptp->state == GPT_READY),
                "invalid state");

  gpt_lld_stop(gptp);
  gptp->config = NULL;
 8002e96:	605a      	str	r2, [r3, #4]
  gptp->state  = GPT_STOP;
 8002e98:	7019      	strb	r1, [r3, #0]
 8002e9a:	f382 8811 	msr	BASEPRI, r2

  osalSysUnlock();
}
 8002e9e:	bc30      	pop	{r4, r5}
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	20000f54 	.word	0x20000f54
 8002ea8:	e000e100 	.word	0xe000e100
 8002eac:	40021000 	.word	0x40021000

08002eb0 <gptStartContinuous.constprop.10>:
 * @param[in] gptp      pointer to the @p GPTDriver object
 * @param[in] interval  period in ticks
 *
 * @api
 */
void gptStartContinuous(GPTDriver *gptp, gptcnt_t interval) {
 8002eb0:	b430      	push	{r4, r5}
 8002eb2:	2320      	movs	r3, #32
 8002eb4:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheckClassI();
  osalDbgCheck(gptp != NULL);
  osalDbgAssert(gptp->state == GPT_READY,
                "invalid state");

  gptp->state = GPT_CONTINUOUS;
 8002eb8:	4a0b      	ldr	r2, [pc, #44]	; (8002ee8 <gptStartContinuous.constprop.10+0x38>)

  /* NOTE: After generating the UG event it takes several clock cycles before
     SR bit 0 goes to 1. This is why the clearing of CNT has been inserted
     before the clearing of SR, to give it some time.*/
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  if (NULL != gptp->config->callback)
 8002eba:	6851      	ldr	r1, [r2, #4]
 *
 * @notapi
 */
void gpt_lld_start_timer(GPTDriver *gptp, gptcnt_t interval) {

  gptp->tim->ARR = (uint32_t)(interval);        /* Time constant.           */
 8002ebc:	68d3      	ldr	r3, [r2, #12]

  /* NOTE: After generating the UG event it takes several clock cycles before
     SR bit 0 goes to 1. This is why the clearing of CNT has been inserted
     before the clearing of SR, to give it some time.*/
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  if (NULL != gptp->config->callback)
 8002ebe:	684c      	ldr	r4, [r1, #4]
 *
 * @notapi
 */
void gpt_lld_start_timer(GPTDriver *gptp, gptcnt_t interval) {

  gptp->tim->ARR = (uint32_t)(interval);        /* Time constant.           */
 8002ec0:	62d8      	str	r0, [r3, #44]	; 0x2c
  gptp->tim->EGR = STM32_TIM_EGR_UG;            /* Update event.            */
  gptp->tim->CNT = 0;                           /* Reset counter.           */
 8002ec2:	2100      	movs	r1, #0
 * @notapi
 */
void gpt_lld_start_timer(GPTDriver *gptp, gptcnt_t interval) {

  gptp->tim->ARR = (uint32_t)(interval);        /* Time constant.           */
  gptp->tim->EGR = STM32_TIM_EGR_UG;            /* Update event.            */
 8002ec4:	2501      	movs	r5, #1
 8002ec6:	2003      	movs	r0, #3
 8002ec8:	615d      	str	r5, [r3, #20]
 8002eca:	7010      	strb	r0, [r2, #0]
  gptp->tim->CNT = 0;                           /* Reset counter.           */
 8002ecc:	6259      	str	r1, [r3, #36]	; 0x24

  /* NOTE: After generating the UG event it takes several clock cycles before
     SR bit 0 goes to 1. This is why the clearing of CNT has been inserted
     before the clearing of SR, to give it some time.*/
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
 8002ece:	6119      	str	r1, [r3, #16]
  if (NULL != gptp->config->callback)
 8002ed0:	b114      	cbz	r4, 8002ed8 <gptStartContinuous.constprop.10+0x28>
    gptp->tim->DIER |= STM32_TIM_DIER_UIE;      /* Update Event IRQ enabled.*/
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	432a      	orrs	r2, r5
 8002ed6:	60da      	str	r2, [r3, #12]
  gptp->tim->CR1 = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 8002ed8:	2285      	movs	r2, #133	; 0x85
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	2300      	movs	r3, #0
 8002ede:	f383 8811 	msr	BASEPRI, r3
void gptStartContinuous(GPTDriver *gptp, gptcnt_t interval) {

  osalSysLock();
  gptStartContinuousI(gptp, interval);
  osalSysUnlock();
}
 8002ee2:	bc30      	pop	{r4, r5}
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	20000f54 	.word	0x20000f54
 8002eec:	f3af 8000 	nop.w

08002ef0 <gptStopTimer.constprop.8>:
 8002ef0:	2320      	movs	r3, #32
 8002ef2:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck(gptp != NULL);
  osalDbgAssert((gptp->state == GPT_READY) || (gptp->state == GPT_CONTINUOUS) ||
                (gptp->state == GPT_ONESHOT),
                "invalid state");

  gptp->state = GPT_READY;
 8002ef6:	4907      	ldr	r1, [pc, #28]	; (8002f14 <gptStopTimer.constprop.8+0x24>)
 *
 * @notapi
 */
void gpt_lld_stop_timer(GPTDriver *gptp) {

  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
 8002ef8:	68cb      	ldr	r3, [r1, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	2002      	movs	r0, #2
 8002efe:	7008      	strb	r0, [r1, #0]
 8002f00:	601a      	str	r2, [r3, #0]
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
 8002f02:	611a      	str	r2, [r3, #16]

  /* All interrupts disabled.*/
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
 8002f04:	68d9      	ldr	r1, [r3, #12]
 8002f06:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002f0a:	60d9      	str	r1, [r3, #12]
 8002f0c:	f382 8811 	msr	BASEPRI, r2
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	20000f54 	.word	0x20000f54
 8002f18:	f3af 8000 	nop.w
 8002f1c:	f3af 8000 	nop.w

08002f20 <chprintf.constprop.1>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8002f20:	b40e      	push	{r1, r2, r3}
 8002f22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f26:	b08a      	sub	sp, #40	; 0x28
 8002f28:	ab07      	add	r3, sp, #28
 8002f2a:	f10d 0c1d 	add.w	ip, sp, #29
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8002f2e:	ad14      	add	r5, sp, #80	; 0x50
 8002f30:	9302      	str	r3, [sp, #8]
 8002f32:	4c95      	ldr	r4, [pc, #596]	; (8003188 <chprintf.constprop.1+0x268>)
 8002f34:	f8cd c004 	str.w	ip, [sp, #4]
 8002f38:	ebc3 030c 	rsb	r3, r3, ip
 8002f3c:	9506      	str	r5, [sp, #24]
 8002f3e:	9305      	str	r3, [sp, #20]
 8002f40:	f04f 0825 	mov.w	r8, #37	; 0x25
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8002f44:	f04f 0900 	mov.w	r9, #0
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8002f48:	1c67      	adds	r7, r4, #1
    if (c == 0)
 8002f4a:	f1b8 0f00 	cmp.w	r8, #0
 8002f4e:	d013      	beq.n	8002f78 <chprintf.constprop.1+0x58>
      return n;
    if (c != '%') {
 8002f50:	f1b8 0f25 	cmp.w	r8, #37	; 0x25
 8002f54:	d016      	beq.n	8002f84 <chprintf.constprop.1+0x64>
      streamPut(chp, (uint8_t)c);
 8002f56:	f8df b234 	ldr.w	fp, [pc, #564]	; 800318c <chprintf.constprop.1+0x26c>
 8002f5a:	f8db 2000 	ldr.w	r2, [fp]
 8002f5e:	4641      	mov	r1, r8
 8002f60:	6892      	ldr	r2, [r2, #8]
 8002f62:	4658      	mov	r0, fp
 8002f64:	4790      	blx	r2
 8002f66:	f894 8001 	ldrb.w	r8, [r4, #1]
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8002f6a:	463c      	mov	r4, r7
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
 8002f6c:	f109 0901 	add.w	r9, r9, #1
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8002f70:	1c67      	adds	r7, r4, #1
    if (c == 0)
 8002f72:	f1b8 0f00 	cmp.w	r8, #0
 8002f76:	d1eb      	bne.n	8002f50 <chprintf.constprop.1+0x30>
  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 8002f78:	4648      	mov	r0, r9
 8002f7a:	b00a      	add	sp, #40	; 0x28
 8002f7c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f80:	b003      	add	sp, #12
 8002f82:	4770      	bx	lr
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 8002f84:	7862      	ldrb	r2, [r4, #1]
 8002f86:	2a2d      	cmp	r2, #45	; 0x2d
 8002f88:	bf03      	ittte	eq
 8002f8a:	78a2      	ldrbeq	r2, [r4, #2]
      fmt++;
 8002f8c:	1ca7      	addeq	r7, r4, #2
      left_align = TRUE;
 8002f8e:	f04f 0b01 	moveq.w	fp, #1
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
 8002f92:	f04f 0b00 	movne.w	fp, #0
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
 8002f96:	2a30      	cmp	r2, #48	; 0x30
 8002f98:	bf04      	itt	eq
 8002f9a:	787a      	ldrbeq	r2, [r7, #1]
      fmt++;
 8002f9c:	3701      	addeq	r7, #1
      filler = '0';
 8002f9e:	463c      	mov	r4, r7
 8002fa0:	bf0c      	ite	eq
 8002fa2:	2630      	moveq	r6, #48	; 0x30
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
 8002fa4:	2620      	movne	r6, #32
    if (*fmt == '0') {
      fmt++;
      filler = '0';
    }
    width = 0;
 8002fa6:	2700      	movs	r7, #0
 8002fa8:	e006      	b.n	8002fb8 <chprintf.constprop.1+0x98>
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
 8002faa:	782b      	ldrb	r3, [r5, #0]
 8002fac:	3504      	adds	r5, #4
      else
        break;
      width = width * 10 + c;
 8002fae:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8002fb2:	7822      	ldrb	r2, [r4, #0]
 8002fb4:	eb03 0747 	add.w	r7, r3, r7, lsl #1
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8002fb8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b09      	cmp	r3, #9
      fmt++;
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
 8002fc0:	f104 0401 	add.w	r4, r4, #1
      if (c >= '0' && c <= '9')
 8002fc4:	d9f3      	bls.n	8002fae <chprintf.constprop.1+0x8e>
        c -= '0';
      else if (c == '*')
 8002fc6:	2a2a      	cmp	r2, #42	; 0x2a
 8002fc8:	d0ef      	beq.n	8002faa <chprintf.constprop.1+0x8a>
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
 8002fca:	2a2e      	cmp	r2, #46	; 0x2e
 8002fcc:	f04f 0100 	mov.w	r1, #0
 8002fd0:	d02d      	beq.n	800302e <chprintf.constprop.1+0x10e>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8002fd2:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8002fd6:	2b4c      	cmp	r3, #76	; 0x4c
 8002fd8:	d036      	beq.n	8003048 <chprintf.constprop.1+0x128>
 8002fda:	f894 8000 	ldrb.w	r8, [r4]
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8002fde:	f1a2 0344 	sub.w	r3, r2, #68	; 0x44
 8002fe2:	2b34      	cmp	r3, #52	; 0x34
 8002fe4:	f200 80c5 	bhi.w	8003172 <chprintf.constprop.1+0x252>
 8002fe8:	e8df f003 	tbb	[pc, r3]
 8002fec:	c3c3c3bb 	.word	0xc3c3c3bb
 8002ff0:	c3c3bbc3 	.word	0xc3c3bbc3
 8002ff4:	b9c3c3c3 	.word	0xb9c3c3c3
 8002ff8:	c3c3c3c3 	.word	0xc3c3c3c3
 8002ffc:	c3c338c3 	.word	0xc3c338c3
 8003000:	c3c3c38c 	.word	0xc3c3c38c
 8003004:	c3c3c3c3 	.word	0xc3c3c3c3
 8003008:	aec3c3c3 	.word	0xaec3c3c3
 800300c:	c3c3c3bb 	.word	0xc3c3c3bb
 8003010:	c3c3bbc3 	.word	0xc3c3bbc3
 8003014:	b9c3c3c3 	.word	0xb9c3c3c3
 8003018:	8ec3c3c3 	.word	0x8ec3c3c3
 800301c:	c3c338c3 	.word	0xc3c338c3
 8003020:	8c          	.byte	0x8c
 8003021:	00          	.byte	0x00
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
 8003022:	782b      	ldrb	r3, [r5, #0]
 8003024:	3504      	adds	r5, #4
        else
          break;
        precision *= 10;
 8003026:	eb01 0181 	add.w	r1, r1, r1, lsl #2
        precision += c;
 800302a:	eb03 0141 	add.w	r1, r3, r1, lsl #1
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
 800302e:	f814 2b01 	ldrb.w	r2, [r4], #1
        if (c >= '0' && c <= '9')
 8003032:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b09      	cmp	r3, #9
 800303a:	d9f4      	bls.n	8003026 <chprintf.constprop.1+0x106>
          c -= '0';
        else if (c == '*')
 800303c:	2a2a      	cmp	r2, #42	; 0x2a
 800303e:	d0f0      	beq.n	8003022 <chprintf.constprop.1+0x102>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8003040:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8003044:	2b4c      	cmp	r3, #76	; 0x4c
 8003046:	d1c8      	bne.n	8002fda <chprintf.constprop.1+0xba>
      is_long = TRUE;
      if (*fmt)
 8003048:	7823      	ldrb	r3, [r4, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	f000 8099 	beq.w	8003182 <chprintf.constprop.1+0x262>
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
 8003050:	2001      	movs	r0, #1
 8003052:	f894 8001 	ldrb.w	r8, [r4, #1]
      if (*fmt)
        c = *fmt++;
 8003056:	461a      	mov	r2, r3
 8003058:	4404      	add	r4, r0
 800305a:	e7c0      	b.n	8002fde <chprintf.constprop.1+0xbe>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 800305c:	220a      	movs	r2, #10
    case 'O':
    case 'o':
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
 800305e:	6829      	ldr	r1, [r5, #0]
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8003060:	a807      	add	r0, sp, #28
    case 'O':
    case 'o':
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
 8003062:	3504      	adds	r5, #4
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8003064:	f7ff fbe4 	bl	8002830 <long_to_string_with_divisor.9360.constprop.3.4409>
 8003068:	9b02      	ldr	r3, [sp, #8]
 800306a:	1ac0      	subs	r0, r0, r3
 800306c:	f100 3cff 	add.w	ip, r0, #4294967295
 8003070:	f8cd c010 	str.w	ip, [sp, #16]
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8003074:	f10d 0a1c 	add.w	sl, sp, #28
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 8003078:	1a3f      	subs	r7, r7, r0
 800307a:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 800307e:	9703      	str	r7, [sp, #12]
      width = 0;
    if (left_align == FALSE)
 8003080:	f1bb 0f00 	cmp.w	fp, #0
 8003084:	d115      	bne.n	80030b2 <chprintf.constprop.1+0x192>
      width = -width;
 8003086:	427a      	negs	r2, r7
 8003088:	9203      	str	r2, [sp, #12]
    if (width < 0) {
 800308a:	b192      	cbz	r2, 80030b2 <chprintf.constprop.1+0x192>
      if (*s == '-' && filler == '0') {
 800308c:	f89a 1000 	ldrb.w	r1, [sl]
        streamPut(chp, (uint8_t)*s++);
 8003090:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 800318c <chprintf.constprop.1+0x26c>
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
 8003094:	292d      	cmp	r1, #45	; 0x2d
 8003096:	d07d      	beq.n	8003194 <chprintf.constprop.1+0x274>
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 8003098:	9f03      	ldr	r7, [sp, #12]
        streamPut(chp, (uint8_t)*s++);
        n++;
        i--;
      }
      do {
        streamPut(chp, (uint8_t)filler);
 800309a:	f8db 3000 	ldr.w	r3, [fp]
 800309e:	483b      	ldr	r0, [pc, #236]	; (800318c <chprintf.constprop.1+0x26c>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	4631      	mov	r1, r6
 80030a4:	4798      	blx	r3
        n++;
      } while (++width != 0);
 80030a6:	3701      	adds	r7, #1
 80030a8:	d1f7      	bne.n	800309a <chprintf.constprop.1+0x17a>
 80030aa:	9a03      	ldr	r2, [sp, #12]
 80030ac:	9703      	str	r7, [sp, #12]
 80030ae:	ebc2 0909 	rsb	r9, r2, r9
    }
    while (--i >= 0) {
 80030b2:	9b04      	ldr	r3, [sp, #16]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	db12      	blt.n	80030de <chprintf.constprop.1+0x1be>
 80030b8:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 800318c <chprintf.constprop.1+0x26c>
 80030bc:	f10a 37ff 	add.w	r7, sl, #4294967295
 80030c0:	449a      	add	sl, r3
      streamPut(chp, (uint8_t)*s++);
 80030c2:	f8db 3000 	ldr.w	r3, [fp]
 80030c6:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	482f      	ldr	r0, [pc, #188]	; (800318c <chprintf.constprop.1+0x26c>)
 80030ce:	4798      	blx	r3
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 80030d0:	4557      	cmp	r7, sl
 80030d2:	d1f6      	bne.n	80030c2 <chprintf.constprop.1+0x1a2>
 80030d4:	f8dd c010 	ldr.w	ip, [sp, #16]
 80030d8:	f109 0901 	add.w	r9, r9, #1
 80030dc:	44e1      	add	r9, ip
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 80030de:	9a03      	ldr	r2, [sp, #12]
 80030e0:	2a00      	cmp	r2, #0
 80030e2:	f43f af31 	beq.w	8002f48 <chprintf.constprop.1+0x28>
 80030e6:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 800318c <chprintf.constprop.1+0x26c>
 80030ea:	4692      	mov	sl, r2
      streamPut(chp, (uint8_t)filler);
 80030ec:	f8db 3000 	ldr.w	r3, [fp]
 80030f0:	4826      	ldr	r0, [pc, #152]	; (800318c <chprintf.constprop.1+0x26c>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	4631      	mov	r1, r6
 80030f6:	4798      	blx	r3
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 80030f8:	f1ba 0a01 	subs.w	sl, sl, #1
 80030fc:	d1f6      	bne.n	80030ec <chprintf.constprop.1+0x1cc>
 80030fe:	9b03      	ldr	r3, [sp, #12]
 8003100:	4499      	add	r9, r3
 8003102:	e721      	b.n	8002f48 <chprintf.constprop.1+0x28>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8003104:	2210      	movs	r2, #16
 8003106:	e7aa      	b.n	800305e <chprintf.constprop.1+0x13e>
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 8003108:	f8d5 a000 	ldr.w	sl, [r5]
        s = "(null)";
 800310c:	4b20      	ldr	r3, [pc, #128]	; (8003190 <chprintf.constprop.1+0x270>)
 800310e:	f1ba 0f00 	cmp.w	sl, #0
 8003112:	bf08      	it	eq
 8003114:	469a      	moveq	sl, r3
      if (precision == 0)
        precision = 32767;
 8003116:	f647 73ff 	movw	r3, #32767	; 0x7fff
      for (p = s; *p && (--precision >= 0); p++)
 800311a:	f89a 0000 	ldrb.w	r0, [sl]
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 800311e:	3504      	adds	r5, #4
        s = "(null)";
      if (precision == 0)
        precision = 32767;
 8003120:	2900      	cmp	r1, #0
 8003122:	bf08      	it	eq
 8003124:	4619      	moveq	r1, r3
      for (p = s; *p && (--precision >= 0); p++)
 8003126:	2800      	cmp	r0, #0
 8003128:	d053      	beq.n	80031d2 <chprintf.constprop.1+0x2b2>
 800312a:	4451      	add	r1, sl
 800312c:	4653      	mov	r3, sl
 800312e:	e001      	b.n	8003134 <chprintf.constprop.1+0x214>
 8003130:	4299      	cmp	r1, r3
 8003132:	d03f      	beq.n	80031b4 <chprintf.constprop.1+0x294>
 8003134:	785a      	ldrb	r2, [r3, #1]
 8003136:	3301      	adds	r3, #1
 8003138:	2a00      	cmp	r2, #0
 800313a:	d1f9      	bne.n	8003130 <chprintf.constprop.1+0x210>
 800313c:	ebca 0003 	rsb	r0, sl, r3
 8003140:	1e43      	subs	r3, r0, #1
 8003142:	9304      	str	r3, [sp, #16]
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 8003144:	2620      	movs	r6, #32
 8003146:	e797      	b.n	8003078 <chprintf.constprop.1+0x158>
 8003148:	9805      	ldr	r0, [sp, #20]

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
 800314a:	682b      	ldr	r3, [r5, #0]
 800314c:	f88d 301c 	strb.w	r3, [sp, #28]
 8003150:	1e42      	subs	r2, r0, #1
 8003152:	3504      	adds	r5, #4
 8003154:	9204      	str	r2, [sp, #16]
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
 8003156:	2620      	movs	r6, #32
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8003158:	f10d 0a1c 	add.w	sl, sp, #28
 800315c:	e78c      	b.n	8003078 <chprintf.constprop.1+0x158>
 800315e:	2208      	movs	r2, #8
 8003160:	e77d      	b.n	800305e <chprintf.constprop.1+0x13e>
    case 'D':
    case 'd':
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
 8003162:	6829      	ldr	r1, [r5, #0]
      else
        l = va_arg(ap, int);
      if (l < 0) {
 8003164:	2900      	cmp	r1, #0
    case 'D':
    case 'd':
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
 8003166:	f105 0504 	add.w	r5, r5, #4
      else
        l = va_arg(ap, int);
      if (l < 0) {
 800316a:	db2b      	blt.n	80031c4 <chprintf.constprop.1+0x2a4>
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 800316c:	a807      	add	r0, sp, #28
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 800316e:	220a      	movs	r2, #10
 8003170:	e778      	b.n	8003064 <chprintf.constprop.1+0x144>
 8003172:	9805      	ldr	r0, [sp, #20]
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 8003174:	f88d 201c 	strb.w	r2, [sp, #28]
 8003178:	1e42      	subs	r2, r0, #1
 800317a:	9204      	str	r2, [sp, #16]
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 800317c:	f10d 0a1c 	add.w	sl, sp, #28
 8003180:	e77a      	b.n	8003078 <chprintf.constprop.1+0x158>
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
      if (*fmt)
 8003182:	4698      	mov	r8, r3
 8003184:	e72b      	b.n	8002fde <chprintf.constprop.1+0xbe>
 8003186:	bf00      	nop
 8003188:	08006400 	.word	0x08006400
 800318c:	20000e60 	.word	0x20000e60
 8003190:	080064ac 	.word	0x080064ac
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
 8003194:	2e30      	cmp	r6, #48	; 0x30
 8003196:	f47f af7f 	bne.w	8003098 <chprintf.constprop.1+0x178>
        streamPut(chp, (uint8_t)*s++);
 800319a:	f8db 2000 	ldr.w	r2, [fp]
 800319e:	4658      	mov	r0, fp
 80031a0:	6892      	ldr	r2, [r2, #8]
 80031a2:	4790      	blx	r2
 80031a4:	9b04      	ldr	r3, [sp, #16]
 80031a6:	3b01      	subs	r3, #1
 80031a8:	f10a 0a01 	add.w	sl, sl, #1
        n++;
 80031ac:	f109 0901 	add.w	r9, r9, #1
 80031b0:	9304      	str	r3, [sp, #16]
 80031b2:	e771      	b.n	8003098 <chprintf.constprop.1+0x178>
 80031b4:	ebca 0001 	rsb	r0, sl, r1
 80031b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80031bc:	f8cd c010 	str.w	ip, [sp, #16]
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 80031c0:	2620      	movs	r6, #32
 80031c2:	e759      	b.n	8003078 <chprintf.constprop.1+0x158>
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 80031c4:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 80031c6:	4249      	negs	r1, r1
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 80031c8:	f88d 301c 	strb.w	r3, [sp, #28]
 80031cc:	f10d 001d 	add.w	r0, sp, #29
 80031d0:	e7cd      	b.n	800316e <chprintf.constprop.1+0x24e>
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 80031d2:	f04f 33ff 	mov.w	r3, #4294967295
 80031d6:	9304      	str	r3, [sp, #16]
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 80031d8:	2620      	movs	r6, #32
 80031da:	e74d      	b.n	8003078 <chprintf.constprop.1+0x158>
 80031dc:	f3af 8000 	nop.w

080031e0 <ACdisable>:

// Disable ADCs for AC operation
void ACdisable(void)
 {
 // ADC Single operation
 BIT_FIELD_WRITE(ADC1_2_COMMON->CCR,0,31,0); // Single 1,2
 80031e0:	4a05      	ldr	r2, [pc, #20]	; (80031f8 <ACdisable+0x18>)
 BIT_FIELD_WRITE(ADC3_4_COMMON->CCR,0,31,0); // Single 3,4
 80031e2:	4b06      	ldr	r3, [pc, #24]	; (80031fc <ACdisable+0x1c>)

// Disable ADCs for AC operation
void ACdisable(void)
 {
 // ADC Single operation
 BIT_FIELD_WRITE(ADC1_2_COMMON->CCR,0,31,0); // Single 1,2
 80031e4:	6891      	ldr	r1, [r2, #8]
 80031e6:	f021 011f 	bic.w	r1, r1, #31
 80031ea:	6091      	str	r1, [r2, #8]
 BIT_FIELD_WRITE(ADC3_4_COMMON->CCR,0,31,0); // Single 3,4
 80031ec:	689a      	ldr	r2, [r3, #8]
 80031ee:	f022 021f 	bic.w	r2, r2, #31
 80031f2:	609a      	str	r2, [r3, #8]
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	50000300 	.word	0x50000300
 80031fc:	50000700 	.word	0x50000700

08003200 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 8003200:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8003204:	f002 0a03 	and.w	sl, r2, #3
 8003208:	4657      	mov	r7, sl
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 800320a:	f3c2 0680 	ubfx	r6, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 800320e:	f3c2 05c1 	ubfx	r5, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
 8003212:	f3c2 1441 	ubfx	r4, r2, #5, #2
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 8003216:	f3c2 1bc3 	ubfx	fp, r2, #7, #4
  uint32_t bit     = 0;
 800321a:	2300      	movs	r3, #0
 800321c:	e00c      	b.n	8003238 <_pal_lld_setgroupmode+0x38>
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 800321e:	6a02      	ldr	r2, [r0, #32]
 8003220:	ea22 0c0c 	bic.w	ip, r2, ip
 8003224:	ea4c 0208 	orr.w	r2, ip, r8
 8003228:	6202      	str	r2, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 800322a:	0849      	lsrs	r1, r1, #1
 800322c:	d043      	beq.n	80032b6 <_pal_lld_setgroupmode+0xb6>
      return;
    otyper <<= 1;
 800322e:	0076      	lsls	r6, r6, #1
    ospeedr <<= 2;
 8003230:	00ad      	lsls	r5, r5, #2
    pupdr <<= 2;
 8003232:	00a4      	lsls	r4, r4, #2
    moder <<= 2;
 8003234:	00bf      	lsls	r7, r7, #2
    bit++;
 8003236:	3301      	adds	r3, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
 8003238:	07ca      	lsls	r2, r1, #31
 800323a:	d5f6      	bpl.n	800322a <_pal_lld_setgroupmode+0x2a>

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 800323c:	6842      	ldr	r2, [r0, #4]
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
 800323e:	f04f 0801 	mov.w	r8, #1
 8003242:	fa08 fc03 	lsl.w	ip, r8, r3
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8003246:	ea22 020c 	bic.w	r2, r2, ip
 800324a:	4332      	orrs	r2, r6
 800324c:	6042      	str	r2, [r0, #4]
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
 800324e:	f04f 0903 	mov.w	r9, #3
 8003252:	fa03 f208 	lsl.w	r2, r3, r8
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8003256:	f8d0 c008 	ldr.w	ip, [r0, #8]
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
 800325a:	fa09 f202 	lsl.w	r2, r9, r2
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 800325e:	43d2      	mvns	r2, r2
 8003260:	ea02 0c0c 	and.w	ip, r2, ip
 8003264:	ea4c 0c05 	orr.w	ip, ip, r5
 8003268:	f8c0 c008 	str.w	ip, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800326c:	f8d0 800c 	ldr.w	r8, [r0, #12]
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 8003270:	f003 0c07 	and.w	ip, r3, #7
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8003274:	ea02 0808 	and.w	r8, r2, r8
 8003278:	ea48 0804 	orr.w	r8, r8, r4
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 800327c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 8003280:	f04f 090f 	mov.w	r9, #15
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8003284:	f1ba 0f02 	cmp.w	sl, #2
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8003288:	f8c0 800c 	str.w	r8, [r0, #12]
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 800328c:	fa0b f80c 	lsl.w	r8, fp, ip
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 8003290:	fa09 fc0c 	lsl.w	ip, r9, ip
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8003294:	d012      	beq.n	80032bc <_pal_lld_setgroupmode+0xbc>
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 8003296:	f8d0 9000 	ldr.w	r9, [r0]
 800329a:	ea02 0209 	and.w	r2, r2, r9
 800329e:	433a      	orrs	r2, r7
        if (bit < 8)
 80032a0:	2b07      	cmp	r3, #7
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 80032a2:	6002      	str	r2, [r0, #0]
        if (bit < 8)
 80032a4:	d9bb      	bls.n	800321e <_pal_lld_setgroupmode+0x1e>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 80032a6:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80032a8:	ea22 0c0c 	bic.w	ip, r2, ip
 80032ac:	ea4c 0208 	orr.w	r2, ip, r8
      }
    }
    mask >>= 1;
    if (!mask)
 80032b0:	0849      	lsrs	r1, r1, #1
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 80032b2:	6242      	str	r2, [r0, #36]	; 0x24
      }
    }
    mask >>= 1;
    if (!mask)
 80032b4:	d1bb      	bne.n	800322e <_pal_lld_setgroupmode+0x2e>
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
    bit++;
  }
}
 80032b6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80032ba:	4770      	bx	lr
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
 80032bc:	2b07      	cmp	r3, #7
 80032be:	d80e      	bhi.n	80032de <_pal_lld_setgroupmode+0xde>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 80032c0:	f8d0 9020 	ldr.w	r9, [r0, #32]
 80032c4:	ea29 0c0c 	bic.w	ip, r9, ip
 80032c8:	ea4c 0808 	orr.w	r8, ip, r8
 80032cc:	f8c0 8020 	str.w	r8, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
        port->MODER   = (port->MODER & ~m2) | moder;
 80032d0:	f8d0 c000 	ldr.w	ip, [r0]
 80032d4:	ea02 020c 	and.w	r2, r2, ip
 80032d8:	433a      	orrs	r2, r7
 80032da:	6002      	str	r2, [r0, #0]
 80032dc:	e7a5      	b.n	800322a <_pal_lld_setgroupmode+0x2a>
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 80032de:	f8d0 9024 	ldr.w	r9, [r0, #36]	; 0x24
 80032e2:	ea29 0c0c 	bic.w	ip, r9, ip
 80032e6:	ea4c 0808 	orr.w	r8, ip, r8
 80032ea:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
 80032ee:	e7ef      	b.n	80032d0 <_pal_lld_setgroupmode+0xd0>

080032f0 <_port_irq_epilogue>:
 80032f0:	2320      	movs	r3, #32
 80032f2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 80032f6:	4b12      	ldr	r3, [pc, #72]	; (8003340 <_port_irq_epilogue+0x50>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80032fe:	d102      	bne.n	8003306 <_port_irq_epilogue+0x16>
 8003300:	f383 8811 	msr	BASEPRI, r3
 8003304:	4770      	bx	lr
#if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
  uint32_t result;

  /* Empty asm statement works as a scheduling barrier */
  __ASM volatile ("");
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 8003306:	eef1 3a10 	vmrs	r3, fpscr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800330a:	f3ef 8309 	mrs	r3, PSP
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 800330e:	4a0d      	ldr	r2, [pc, #52]	; (8003344 <_port_irq_epilogue+0x54>)
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8003310:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 8003314:	68d2      	ldr	r2, [r2, #12]
 8003316:	f843 2c08 	str.w	r2, [r3, #-8]
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 800331a:	f843 1c4c 	str.w	r1, [r3, #-76]
    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 800331e:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8003322:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 8003326:	4a08      	ldr	r2, [pc, #32]	; (8003348 <_port_irq_epilogue+0x58>)
 8003328:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 800332a:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 800332c:	6889      	ldr	r1, [r1, #8]
 800332e:	6892      	ldr	r2, [r2, #8]
 8003330:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8003332:	bf8c      	ite	hi
 8003334:	4a05      	ldrhi	r2, [pc, #20]	; (800334c <_port_irq_epilogue+0x5c>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8003336:	4a06      	ldrls	r2, [pc, #24]	; (8003350 <_port_irq_epilogue+0x60>)
 8003338:	f843 2c50 	str.w	r2, [r3, #-80]
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	e000ed00 	.word	0xe000ed00
 8003344:	e000ef30 	.word	0xe000ef30
 8003348:	20000ec8 	.word	0x20000ec8
 800334c:	08000355 	.word	0x08000355
 8003350:	08000358 	.word	0x08000358
 8003354:	f3af 8000 	nop.w
 8003358:	f3af 8000 	nop.w
 800335c:	f3af 8000 	nop.w

08003360 <VectorB0>:
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8003360:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8003364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8003368:	691a      	ldr	r2, [r3, #16]
 800336a:	0792      	lsls	r2, r2, #30
 800336c:	d403      	bmi.n	8003376 <VectorB0+0x16>
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 800336e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8003372:	f7ff bfbd 	b.w	80032f0 <_port_irq_epilogue>

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
    STM32_ST_TIM->SR = 0U;
 8003376:	2200      	movs	r2, #0
 8003378:	611a      	str	r2, [r3, #16]
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800337a:	2320      	movs	r3, #32
 800337c:	f383 8811 	msr	BASEPRI, r3
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.next;
 8003380:	4c1d      	ldr	r4, [pc, #116]	; (80033f8 <VectorB0+0x98>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8003382:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8003386:	69e3      	ldr	r3, [r4, #28]

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 8003388:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800338a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800338c:	6899      	ldr	r1, [r3, #8]
 800338e:	1a16      	subs	r6, r2, r0
 8003390:	428e      	cmp	r6, r1
 8003392:	f104 071c 	add.w	r7, r4, #28
 8003396:	d31d      	bcc.n	80033d4 <VectorB0+0x74>
    ch.vtlist.lasttime += vtp->delta;

    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.next = vtp->next;
    fn = vtp->func;
    vtp->func = NULL;
 8003398:	f04f 0800 	mov.w	r8, #0
 800339c:	2620      	movs	r6, #32
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.lasttime += vtp->delta;

    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 800339e:	681a      	ldr	r2, [r3, #0]
    ch.vtlist.next = vtp->next;
    fn = vtp->func;
 80033a0:	f8d3 c00c 	ldr.w	ip, [r3, #12]
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.lasttime += vtp->delta;
 80033a4:	4401      	add	r1, r0
    ch.vtlist.next = vtp->next;
    fn = vtp->func;
    vtp->func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 80033a6:	42ba      	cmp	r2, r7
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.lasttime += vtp->delta;
 80033a8:	62a1      	str	r1, [r4, #40]	; 0x28

    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 80033aa:	6057      	str	r7, [r2, #4]
    ch.vtlist.next = vtp->next;
 80033ac:	61e2      	str	r2, [r4, #28]
    fn = vtp->func;
    vtp->func = NULL;
 80033ae:	f8c3 800c 	str.w	r8, [r3, #12]
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 80033b2:	bf08      	it	eq
 80033b4:	f8c5 800c 	streq.w	r8, [r5, #12]
 80033b8:	f388 8811 	msr	BASEPRI, r8
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->par);
 80033bc:	6918      	ldr	r0, [r3, #16]
 80033be:	47e0      	blx	ip
 80033c0:	f386 8811 	msr	BASEPRI, r6
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.next;
 80033c4:	69e3      	ldr	r3, [r4, #28]
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80033c6:	6a6a      	ldr	r2, [r5, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 80033c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80033ca:	6899      	ldr	r1, [r3, #8]
 80033cc:	ebc0 0c02 	rsb	ip, r0, r2
 80033d0:	4561      	cmp	r1, ip
 80033d2:	d9e4      	bls.n	800339e <VectorB0+0x3e>
    vtp = ch.vtlist.next;
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 80033d4:	42bb      	cmp	r3, r7
 80033d6:	d008      	beq.n	80033ea <VectorB0+0x8a>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.lasttime + vtp->delta - now;
 80033d8:	4401      	add	r1, r0
 80033da:	1a89      	subs	r1, r1, r2
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 80033dc:	2901      	cmp	r1, #1
 80033de:	bf98      	it	ls
 80033e0:	2102      	movls	r1, #2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80033e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  }
  port_timer_set_alarm(now + delta);
 80033e6:	440a      	add	r2, r1
 80033e8:	635a      	str	r2, [r3, #52]	; 0x34
 80033ea:	2300      	movs	r3, #0
 80033ec:	f383 8811 	msr	BASEPRI, r3
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 80033f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 80033f4:	f7ff bf7c 	b.w	80032f0 <_port_irq_epilogue>
 80033f8:	20000ec8 	.word	0x20000ec8
 80033fc:	f3af 8000 	nop.w

08003400 <VectorB4>:
/**
 * @brief   TIM3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
 8003400:	b508      	push	{r3, lr}
 *
 * @notapi
 */
void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
 8003402:	4b0b      	ldr	r3, [pc, #44]	; (8003430 <VectorB4+0x30>)
  if (gptp->state == GPT_ONESHOT) {
 8003404:	7818      	ldrb	r0, [r3, #0]
 *
 * @notapi
 */
void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
 8003406:	68da      	ldr	r2, [r3, #12]
 8003408:	2100      	movs	r1, #0
  if (gptp->state == GPT_ONESHOT) {
 800340a:	2804      	cmp	r0, #4
 *
 * @notapi
 */
void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
 800340c:	6111      	str	r1, [r2, #16]
  if (gptp->state == GPT_ONESHOT) {
 800340e:	d107      	bne.n	8003420 <VectorB4+0x20>
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
 8003410:	2002      	movs	r0, #2
 8003412:	7018      	strb	r0, [r3, #0]
 *
 * @notapi
 */
void gpt_lld_stop_timer(GPTDriver *gptp) {

  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
 8003414:	6011      	str	r1, [r2, #0]
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
 8003416:	6111      	str	r1, [r2, #16]

  /* All interrupts disabled.*/
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
 8003418:	68d1      	ldr	r1, [r2, #12]
 800341a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800341e:	60d1      	str	r1, [r2, #12]
  gptp->tim->SR = 0;
  if (gptp->state == GPT_ONESHOT) {
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
    gpt_lld_stop_timer(gptp);               /* Timer automatically stopped. */
  }
  gptp->config->callback(gptp);
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	4803      	ldr	r0, [pc, #12]	; (8003430 <VectorB4+0x30>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	4798      	blx	r3
  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD3);

  OSAL_IRQ_EPILOGUE();
}
 8003428:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD3);

  OSAL_IRQ_EPILOGUE();
 800342c:	f7ff bf60 	b.w	80032f0 <_port_irq_epilogue>
 8003430:	20000f54 	.word	0x20000f54
 8003434:	f3af 8000 	nop.w
 8003438:	f3af 8000 	nop.w
 800343c:	f3af 8000 	nop.w

08003440 <Vector148>:
/**
 * @brief   EXTI[33] interrupt handler (COMP7).
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector148) {
 8003440:	b508      	push	{r3, lr}
  uint32_t pr2;

  OSAL_IRQ_PROLOGUE();

  pr2 = EXTI->PR2;
 8003442:	4b08      	ldr	r3, [pc, #32]	; (8003464 <Vector148+0x24>)
 8003444:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  pr2 = EXTI->IMR & (1U << 1);
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	f002 0202 	and.w	r2, r2, #2
  EXTI->PR2 = pr2;
 800344c:	635a      	str	r2, [r3, #52]	; 0x34
  if (pr2 & (1U << 1))
 800344e:	b12a      	cbz	r2, 800345c <Vector148+0x1c>
    EXTD1.config->channels[33].cb(&EXTD1, 33);
 8003450:	4805      	ldr	r0, [pc, #20]	; (8003468 <Vector148+0x28>)
 8003452:	6843      	ldr	r3, [r0, #4]
 8003454:	2121      	movs	r1, #33	; 0x21
 8003456:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800345a:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800345c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr2 = EXTI->IMR & (1U << 1);
  EXTI->PR2 = pr2;
  if (pr2 & (1U << 1))
    EXTD1.config->channels[33].cb(&EXTD1, 33);

  OSAL_IRQ_EPILOGUE();
 8003460:	f7ff bf46 	b.w	80032f0 <_port_irq_epilogue>
 8003464:	40010400 	.word	0x40010400
 8003468:	2000f9d0 	.word	0x2000f9d0
 800346c:	f3af 8000 	nop.w

08003470 <Vector144>:
OSAL_IRQ_HANDLER(Vector144) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003470:	4b16      	ldr	r3, [pc, #88]	; (80034cc <Vector144+0x5c>)
 8003472:	695a      	ldr	r2, [r3, #20]
  pr &= EXTI->IMR & ((1U << 30) | (1U << 31));
 8003474:	6819      	ldr	r1, [r3, #0]
 8003476:	400a      	ands	r2, r1
/**
 * @brief   EXTI[30]...EXTI[32] interrupt handler (COMP4, COMP5, COMP6).
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector144) {
 8003478:	b510      	push	{r4, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
  pr &= EXTI->IMR & ((1U << 30) | (1U << 31));
 800347a:	f002 4440 	and.w	r4, r2, #3221225472	; 0xc0000000
  EXTI->PR = pr;
 800347e:	615c      	str	r4, [r3, #20]
  if (pr & (1U << 30))
 8003480:	0053      	lsls	r3, r2, #1
 8003482:	d413      	bmi.n	80034ac <Vector144+0x3c>
    EXTD1.config->channels[30].cb(&EXTD1, 30);
  if (pr & (1U << 31))
 8003484:	2c00      	cmp	r4, #0
 8003486:	db19      	blt.n	80034bc <Vector144+0x4c>
    EXTD1.config->channels[31].cb(&EXTD1, 31);

  pr = EXTI->PR2 & EXTI->IMR2 & (1U << 0);
 8003488:	4b10      	ldr	r3, [pc, #64]	; (80034cc <Vector144+0x5c>)
 800348a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800348c:	6a1a      	ldr	r2, [r3, #32]
 800348e:	400a      	ands	r2, r1
 8003490:	f002 0201 	and.w	r2, r2, #1
  EXTI->PR2 = pr;
 8003494:	635a      	str	r2, [r3, #52]	; 0x34
  if (pr & (1U << 0))
 8003496:	b12a      	cbz	r2, 80034a4 <Vector144+0x34>
    EXTD1.config->channels[32].cb(&EXTD1, 32);
 8003498:	480d      	ldr	r0, [pc, #52]	; (80034d0 <Vector144+0x60>)
 800349a:	6843      	ldr	r3, [r0, #4]
 800349c:	2120      	movs	r1, #32
 800349e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80034a2:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 80034a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pr = EXTI->PR2 & EXTI->IMR2 & (1U << 0);
  EXTI->PR2 = pr;
  if (pr & (1U << 0))
    EXTD1.config->channels[32].cb(&EXTD1, 32);

  OSAL_IRQ_EPILOGUE();
 80034a8:	f7ff bf22 	b.w	80032f0 <_port_irq_epilogue>

  pr = EXTI->PR;
  pr &= EXTI->IMR & ((1U << 30) | (1U << 31));
  EXTI->PR = pr;
  if (pr & (1U << 30))
    EXTD1.config->channels[30].cb(&EXTD1, 30);
 80034ac:	4808      	ldr	r0, [pc, #32]	; (80034d0 <Vector144+0x60>)
 80034ae:	6843      	ldr	r3, [r0, #4]
 80034b0:	211e      	movs	r1, #30
 80034b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80034b6:	4798      	blx	r3
  if (pr & (1U << 31))
 80034b8:	2c00      	cmp	r4, #0
 80034ba:	dae5      	bge.n	8003488 <Vector144+0x18>
    EXTD1.config->channels[31].cb(&EXTD1, 31);
 80034bc:	4804      	ldr	r0, [pc, #16]	; (80034d0 <Vector144+0x60>)
 80034be:	6843      	ldr	r3, [r0, #4]
 80034c0:	211f      	movs	r1, #31
 80034c2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80034c6:	4798      	blx	r3
 80034c8:	e7de      	b.n	8003488 <Vector144+0x18>
 80034ca:	bf00      	nop
 80034cc:	40010400 	.word	0x40010400
 80034d0:	2000f9d0 	.word	0x2000f9d0
 80034d4:	f3af 8000 	nop.w
 80034d8:	f3af 8000 	nop.w
 80034dc:	f3af 8000 	nop.w

080034e0 <Vector140>:
OSAL_IRQ_HANDLER(Vector140) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80034e0:	4b12      	ldr	r3, [pc, #72]	; (800352c <Vector140+0x4c>)
  pr &= EXTI->IMR & ((1U << 21) | (1U << 22) | (1U << 29));
 80034e2:	4a13      	ldr	r2, [pc, #76]	; (8003530 <Vector140+0x50>)
OSAL_IRQ_HANDLER(Vector140) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80034e4:	6959      	ldr	r1, [r3, #20]
/**
 * @brief   EXTI[21],EXTI[22],EXTI[29] interrupt handler (COMP1, COMP2, COMP3).
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector140) {
 80034e6:	b510      	push	{r4, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
  pr &= EXTI->IMR & ((1U << 21) | (1U << 22) | (1U << 29));
 80034e8:	681c      	ldr	r4, [r3, #0]
 80034ea:	400c      	ands	r4, r1
 80034ec:	4022      	ands	r2, r4
  EXTI->PR = pr;
  if (pr & (1U << 21))
 80034ee:	02a1      	lsls	r1, r4, #10

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
  pr &= EXTI->IMR & ((1U << 21) | (1U << 22) | (1U << 29));
  EXTI->PR = pr;
 80034f0:	615a      	str	r2, [r3, #20]
  if (pr & (1U << 21))
 80034f2:	d414      	bmi.n	800351e <Vector140+0x3e>
    EXTD1.config->channels[21].cb(&EXTD1, 21);
  if (pr & (1U << 22))
 80034f4:	0262      	lsls	r2, r4, #9
 80034f6:	d40b      	bmi.n	8003510 <Vector140+0x30>
    EXTD1.config->channels[22].cb(&EXTD1, 22);
  if (pr & (1U << 29))
 80034f8:	00a3      	lsls	r3, r4, #2
 80034fa:	d505      	bpl.n	8003508 <Vector140+0x28>
    EXTD1.config->channels[29].cb(&EXTD1, 29);
 80034fc:	480d      	ldr	r0, [pc, #52]	; (8003534 <Vector140+0x54>)
 80034fe:	6843      	ldr	r3, [r0, #4]
 8003500:	211d      	movs	r1, #29
 8003502:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003506:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 8003508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if (pr & (1U << 22))
    EXTD1.config->channels[22].cb(&EXTD1, 22);
  if (pr & (1U << 29))
    EXTD1.config->channels[29].cb(&EXTD1, 29);

  OSAL_IRQ_EPILOGUE();
 800350c:	f7ff bef0 	b.w	80032f0 <_port_irq_epilogue>
  pr &= EXTI->IMR & ((1U << 21) | (1U << 22) | (1U << 29));
  EXTI->PR = pr;
  if (pr & (1U << 21))
    EXTD1.config->channels[21].cb(&EXTD1, 21);
  if (pr & (1U << 22))
    EXTD1.config->channels[22].cb(&EXTD1, 22);
 8003510:	4808      	ldr	r0, [pc, #32]	; (8003534 <Vector140+0x54>)
 8003512:	6843      	ldr	r3, [r0, #4]
 8003514:	2116      	movs	r1, #22
 8003516:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800351a:	4798      	blx	r3
 800351c:	e7ec      	b.n	80034f8 <Vector140+0x18>

  pr = EXTI->PR;
  pr &= EXTI->IMR & ((1U << 21) | (1U << 22) | (1U << 29));
  EXTI->PR = pr;
  if (pr & (1U << 21))
    EXTD1.config->channels[21].cb(&EXTD1, 21);
 800351e:	4805      	ldr	r0, [pc, #20]	; (8003534 <Vector140+0x54>)
 8003520:	6843      	ldr	r3, [r0, #4]
 8003522:	2115      	movs	r1, #21
 8003524:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003528:	4798      	blx	r3
 800352a:	e7e3      	b.n	80034f4 <Vector140+0x14>
 800352c:	40010400 	.word	0x40010400
 8003530:	20600000 	.word	0x20600000
 8003534:	2000f9d0 	.word	0x2000f9d0
 8003538:	f3af 8000 	nop.w
 800353c:	f3af 8000 	nop.w

08003540 <Vector4C>:
/**
 * @brief   EXTI[20] interrupt handler (RTC Wakeup).
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector4C) {
 8003540:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003542:	4b09      	ldr	r3, [pc, #36]	; (8003568 <Vector4C+0x28>)
 8003544:	6959      	ldr	r1, [r3, #20]
  pr &= EXTI->IMR & (1U << 20);
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	400a      	ands	r2, r1
 800354a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
  EXTI->PR = pr;
 800354e:	615a      	str	r2, [r3, #20]
  if (pr & (1U << 20))
 8003550:	b12a      	cbz	r2, 800355e <Vector4C+0x1e>
    EXTD1.config->channels[20].cb(&EXTD1, 20);
 8003552:	4806      	ldr	r0, [pc, #24]	; (800356c <Vector4C+0x2c>)
 8003554:	6843      	ldr	r3, [r0, #4]
 8003556:	2114      	movs	r1, #20
 8003558:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800355c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800355e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 20);
  EXTI->PR = pr;
  if (pr & (1U << 20))
    EXTD1.config->channels[20].cb(&EXTD1, 20);

  OSAL_IRQ_EPILOGUE();
 8003562:	f7ff bec5 	b.w	80032f0 <_port_irq_epilogue>
 8003566:	bf00      	nop
 8003568:	40010400 	.word	0x40010400
 800356c:	2000f9d0 	.word	0x2000f9d0

08003570 <Vector48>:
/**
 * @brief   EXTI[19] interrupt handler (Tamper TimeStamp).
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector48) {
 8003570:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003572:	4b09      	ldr	r3, [pc, #36]	; (8003598 <Vector48+0x28>)
 8003574:	6959      	ldr	r1, [r3, #20]
  pr &= EXTI->IMR & (1U << 19);
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	400a      	ands	r2, r1
 800357a:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
  EXTI->PR = pr;
 800357e:	615a      	str	r2, [r3, #20]
  if (pr & (1U << 19))
 8003580:	b12a      	cbz	r2, 800358e <Vector48+0x1e>
    EXTD1.config->channels[19].cb(&EXTD1, 19);
 8003582:	4806      	ldr	r0, [pc, #24]	; (800359c <Vector48+0x2c>)
 8003584:	6843      	ldr	r3, [r0, #4]
 8003586:	2113      	movs	r1, #19
 8003588:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800358c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800358e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 19);
  EXTI->PR = pr;
  if (pr & (1U << 19))
    EXTD1.config->channels[19].cb(&EXTD1, 19);

  OSAL_IRQ_EPILOGUE();
 8003592:	f7ff bead 	b.w	80032f0 <_port_irq_epilogue>
 8003596:	bf00      	nop
 8003598:	40010400 	.word	0x40010400
 800359c:	2000f9d0 	.word	0x2000f9d0

080035a0 <VectorE8>:
/**
 * @brief   EXTI[18] interrupt handler (USB Wakeup).
 *
 * @isr
 */
OSAL_IRQ_HANDLER(VectorE8) {
 80035a0:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80035a2:	4b09      	ldr	r3, [pc, #36]	; (80035c8 <VectorE8+0x28>)
 80035a4:	6959      	ldr	r1, [r3, #20]
  pr &= EXTI->IMR & (1U << 18);
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	400a      	ands	r2, r1
 80035aa:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
  EXTI->PR = pr;
 80035ae:	615a      	str	r2, [r3, #20]
  if (pr & (1U << 18))
 80035b0:	b12a      	cbz	r2, 80035be <VectorE8+0x1e>
    EXTD1.config->channels[18].cb(&EXTD1, 18);
 80035b2:	4806      	ldr	r0, [pc, #24]	; (80035cc <VectorE8+0x2c>)
 80035b4:	6843      	ldr	r3, [r0, #4]
 80035b6:	2112      	movs	r1, #18
 80035b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035bc:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 80035be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 18);
  EXTI->PR = pr;
  if (pr & (1U << 18))
    EXTD1.config->channels[18].cb(&EXTD1, 18);

  OSAL_IRQ_EPILOGUE();
 80035c2:	f7ff be95 	b.w	80032f0 <_port_irq_epilogue>
 80035c6:	bf00      	nop
 80035c8:	40010400 	.word	0x40010400
 80035cc:	2000f9d0 	.word	0x2000f9d0

080035d0 <VectorE4>:
/**
 * @brief   EXTI[17] interrupt handler (RTC Alarm).
 *
 * @isr
 */
OSAL_IRQ_HANDLER(VectorE4) {
 80035d0:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80035d2:	4b09      	ldr	r3, [pc, #36]	; (80035f8 <VectorE4+0x28>)
 80035d4:	6959      	ldr	r1, [r3, #20]
  pr &= EXTI->IMR & (1U << 17);
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	400a      	ands	r2, r1
 80035da:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
  EXTI->PR = pr;
 80035de:	615a      	str	r2, [r3, #20]
  if (pr & (1U << 17))
 80035e0:	b12a      	cbz	r2, 80035ee <VectorE4+0x1e>
    EXTD1.config->channels[17].cb(&EXTD1, 17);
 80035e2:	4806      	ldr	r0, [pc, #24]	; (80035fc <VectorE4+0x2c>)
 80035e4:	6843      	ldr	r3, [r0, #4]
 80035e6:	2111      	movs	r1, #17
 80035e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035ec:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 80035ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 17);
  EXTI->PR = pr;
  if (pr & (1U << 17))
    EXTD1.config->channels[17].cb(&EXTD1, 17);

  OSAL_IRQ_EPILOGUE();
 80035f2:	f7ff be7d 	b.w	80032f0 <_port_irq_epilogue>
 80035f6:	bf00      	nop
 80035f8:	40010400 	.word	0x40010400
 80035fc:	2000f9d0 	.word	0x2000f9d0

08003600 <Vector44>:
/**
 * @brief   EXTI[16] interrupt handler (PVD).
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector44) {
 8003600:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003602:	4b09      	ldr	r3, [pc, #36]	; (8003628 <Vector44+0x28>)
 8003604:	6959      	ldr	r1, [r3, #20]
  pr &= EXTI->IMR & (1U << 16);
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	400a      	ands	r2, r1
 800360a:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
  EXTI->PR = pr;
 800360e:	615a      	str	r2, [r3, #20]
  if (pr & (1U << 16))
 8003610:	b12a      	cbz	r2, 800361e <Vector44+0x1e>
    EXTD1.config->channels[16].cb(&EXTD1, 16);
 8003612:	4806      	ldr	r0, [pc, #24]	; (800362c <Vector44+0x2c>)
 8003614:	6843      	ldr	r3, [r0, #4]
 8003616:	2110      	movs	r1, #16
 8003618:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800361c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800361e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 16);
  EXTI->PR = pr;
  if (pr & (1U << 16))
    EXTD1.config->channels[16].cb(&EXTD1, 16);

  OSAL_IRQ_EPILOGUE();
 8003622:	f7ff be65 	b.w	80032f0 <_port_irq_epilogue>
 8003626:	bf00      	nop
 8003628:	40010400 	.word	0x40010400
 800362c:	2000f9d0 	.word	0x2000f9d0

08003630 <VectorE0>:
OSAL_IRQ_HANDLER(VectorE0) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003630:	4b1d      	ldr	r3, [pc, #116]	; (80036a8 <VectorE0+0x78>)
/**
 * @brief   EXTI[10]...EXTI[15] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(VectorE0) {
 8003632:	b510      	push	{r4, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003634:	695a      	ldr	r2, [r3, #20]
  pr &= EXTI->IMR & ((1U << 10) | (1U << 11) | (1U << 12) | (1U << 13) |
 8003636:	681c      	ldr	r4, [r3, #0]
 8003638:	4014      	ands	r4, r2
 800363a:	f404 427c 	and.w	r2, r4, #64512	; 0xfc00
                     (1U << 14) | (1U << 15));
  EXTI->PR = pr;
 800363e:	615a      	str	r2, [r3, #20]
  if (pr & (1U << 10))
 8003640:	0562      	lsls	r2, r4, #21
 8003642:	d42a      	bmi.n	800369a <VectorE0+0x6a>
    EXTD1.config->channels[10].cb(&EXTD1, 10);
  if (pr & (1U << 11))
 8003644:	0523      	lsls	r3, r4, #20
 8003646:	d422      	bmi.n	800368e <VectorE0+0x5e>
    EXTD1.config->channels[11].cb(&EXTD1, 11);
  if (pr & (1U << 12))
 8003648:	04e0      	lsls	r0, r4, #19
 800364a:	d41a      	bmi.n	8003682 <VectorE0+0x52>
    EXTD1.config->channels[12].cb(&EXTD1, 12);
  if (pr & (1U << 13))
 800364c:	04a1      	lsls	r1, r4, #18
 800364e:	d412      	bmi.n	8003676 <VectorE0+0x46>
    EXTD1.config->channels[13].cb(&EXTD1, 13);
  if (pr & (1U << 14))
 8003650:	0462      	lsls	r2, r4, #17
 8003652:	d40a      	bmi.n	800366a <VectorE0+0x3a>
    EXTD1.config->channels[14].cb(&EXTD1, 14);
  if (pr & (1U << 15))
 8003654:	0423      	lsls	r3, r4, #16
 8003656:	d504      	bpl.n	8003662 <VectorE0+0x32>
    EXTD1.config->channels[15].cb(&EXTD1, 15);
 8003658:	4814      	ldr	r0, [pc, #80]	; (80036ac <VectorE0+0x7c>)
 800365a:	6843      	ldr	r3, [r0, #4]
 800365c:	210f      	movs	r1, #15
 800365e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003660:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 8003662:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if (pr & (1U << 14))
    EXTD1.config->channels[14].cb(&EXTD1, 14);
  if (pr & (1U << 15))
    EXTD1.config->channels[15].cb(&EXTD1, 15);

  OSAL_IRQ_EPILOGUE();
 8003666:	f7ff be43 	b.w	80032f0 <_port_irq_epilogue>
  if (pr & (1U << 12))
    EXTD1.config->channels[12].cb(&EXTD1, 12);
  if (pr & (1U << 13))
    EXTD1.config->channels[13].cb(&EXTD1, 13);
  if (pr & (1U << 14))
    EXTD1.config->channels[14].cb(&EXTD1, 14);
 800366a:	4810      	ldr	r0, [pc, #64]	; (80036ac <VectorE0+0x7c>)
 800366c:	6843      	ldr	r3, [r0, #4]
 800366e:	210e      	movs	r1, #14
 8003670:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003672:	4798      	blx	r3
 8003674:	e7ee      	b.n	8003654 <VectorE0+0x24>
  if (pr & (1U << 11))
    EXTD1.config->channels[11].cb(&EXTD1, 11);
  if (pr & (1U << 12))
    EXTD1.config->channels[12].cb(&EXTD1, 12);
  if (pr & (1U << 13))
    EXTD1.config->channels[13].cb(&EXTD1, 13);
 8003676:	480d      	ldr	r0, [pc, #52]	; (80036ac <VectorE0+0x7c>)
 8003678:	6843      	ldr	r3, [r0, #4]
 800367a:	210d      	movs	r1, #13
 800367c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800367e:	4798      	blx	r3
 8003680:	e7e6      	b.n	8003650 <VectorE0+0x20>
  if (pr & (1U << 10))
    EXTD1.config->channels[10].cb(&EXTD1, 10);
  if (pr & (1U << 11))
    EXTD1.config->channels[11].cb(&EXTD1, 11);
  if (pr & (1U << 12))
    EXTD1.config->channels[12].cb(&EXTD1, 12);
 8003682:	480a      	ldr	r0, [pc, #40]	; (80036ac <VectorE0+0x7c>)
 8003684:	6843      	ldr	r3, [r0, #4]
 8003686:	210c      	movs	r1, #12
 8003688:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800368a:	4798      	blx	r3
 800368c:	e7de      	b.n	800364c <VectorE0+0x1c>
                     (1U << 14) | (1U << 15));
  EXTI->PR = pr;
  if (pr & (1U << 10))
    EXTD1.config->channels[10].cb(&EXTD1, 10);
  if (pr & (1U << 11))
    EXTD1.config->channels[11].cb(&EXTD1, 11);
 800368e:	4807      	ldr	r0, [pc, #28]	; (80036ac <VectorE0+0x7c>)
 8003690:	6843      	ldr	r3, [r0, #4]
 8003692:	210b      	movs	r1, #11
 8003694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003696:	4798      	blx	r3
 8003698:	e7d6      	b.n	8003648 <VectorE0+0x18>
  pr = EXTI->PR;
  pr &= EXTI->IMR & ((1U << 10) | (1U << 11) | (1U << 12) | (1U << 13) |
                     (1U << 14) | (1U << 15));
  EXTI->PR = pr;
  if (pr & (1U << 10))
    EXTD1.config->channels[10].cb(&EXTD1, 10);
 800369a:	4804      	ldr	r0, [pc, #16]	; (80036ac <VectorE0+0x7c>)
 800369c:	6843      	ldr	r3, [r0, #4]
 800369e:	210a      	movs	r1, #10
 80036a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a2:	4798      	blx	r3
 80036a4:	e7ce      	b.n	8003644 <VectorE0+0x14>
 80036a6:	bf00      	nop
 80036a8:	40010400 	.word	0x40010400
 80036ac:	2000f9d0 	.word	0x2000f9d0

080036b0 <Vector9C>:
OSAL_IRQ_HANDLER(Vector9C) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80036b0:	4b19      	ldr	r3, [pc, #100]	; (8003718 <Vector9C+0x68>)
/**
 * @brief   EXTI[5]...EXTI[9] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector9C) {
 80036b2:	b510      	push	{r4, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80036b4:	695a      	ldr	r2, [r3, #20]
  pr &= EXTI->IMR & ((1U << 5) | (1U << 6) | (1U << 7) | (1U << 8) |
 80036b6:	681c      	ldr	r4, [r3, #0]
 80036b8:	4014      	ands	r4, r2
 80036ba:	f404 7278 	and.w	r2, r4, #992	; 0x3e0
                     (1U << 9));
  EXTI->PR = pr;
 80036be:	615a      	str	r2, [r3, #20]
  if (pr & (1U << 5))
 80036c0:	06a3      	lsls	r3, r4, #26
 80036c2:	d422      	bmi.n	800370a <Vector9C+0x5a>
    EXTD1.config->channels[5].cb(&EXTD1, 5);
  if (pr & (1U << 6))
 80036c4:	0660      	lsls	r0, r4, #25
 80036c6:	d41a      	bmi.n	80036fe <Vector9C+0x4e>
    EXTD1.config->channels[6].cb(&EXTD1, 6);
  if (pr & (1U << 7))
 80036c8:	0621      	lsls	r1, r4, #24
 80036ca:	d412      	bmi.n	80036f2 <Vector9C+0x42>
    EXTD1.config->channels[7].cb(&EXTD1, 7);
  if (pr & (1U << 8))
 80036cc:	05e2      	lsls	r2, r4, #23
 80036ce:	d40a      	bmi.n	80036e6 <Vector9C+0x36>
    EXTD1.config->channels[8].cb(&EXTD1, 8);
  if (pr & (1U << 9))
 80036d0:	05a3      	lsls	r3, r4, #22
 80036d2:	d504      	bpl.n	80036de <Vector9C+0x2e>
    EXTD1.config->channels[9].cb(&EXTD1, 9);
 80036d4:	4811      	ldr	r0, [pc, #68]	; (800371c <Vector9C+0x6c>)
 80036d6:	6843      	ldr	r3, [r0, #4]
 80036d8:	2109      	movs	r1, #9
 80036da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036dc:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 80036de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if (pr & (1U << 8))
    EXTD1.config->channels[8].cb(&EXTD1, 8);
  if (pr & (1U << 9))
    EXTD1.config->channels[9].cb(&EXTD1, 9);

  OSAL_IRQ_EPILOGUE();
 80036e2:	f7ff be05 	b.w	80032f0 <_port_irq_epilogue>
  if (pr & (1U << 6))
    EXTD1.config->channels[6].cb(&EXTD1, 6);
  if (pr & (1U << 7))
    EXTD1.config->channels[7].cb(&EXTD1, 7);
  if (pr & (1U << 8))
    EXTD1.config->channels[8].cb(&EXTD1, 8);
 80036e6:	480d      	ldr	r0, [pc, #52]	; (800371c <Vector9C+0x6c>)
 80036e8:	6843      	ldr	r3, [r0, #4]
 80036ea:	2108      	movs	r1, #8
 80036ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ee:	4798      	blx	r3
 80036f0:	e7ee      	b.n	80036d0 <Vector9C+0x20>
  if (pr & (1U << 5))
    EXTD1.config->channels[5].cb(&EXTD1, 5);
  if (pr & (1U << 6))
    EXTD1.config->channels[6].cb(&EXTD1, 6);
  if (pr & (1U << 7))
    EXTD1.config->channels[7].cb(&EXTD1, 7);
 80036f2:	480a      	ldr	r0, [pc, #40]	; (800371c <Vector9C+0x6c>)
 80036f4:	6843      	ldr	r3, [r0, #4]
 80036f6:	2107      	movs	r1, #7
 80036f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fa:	4798      	blx	r3
 80036fc:	e7e6      	b.n	80036cc <Vector9C+0x1c>
                     (1U << 9));
  EXTI->PR = pr;
  if (pr & (1U << 5))
    EXTD1.config->channels[5].cb(&EXTD1, 5);
  if (pr & (1U << 6))
    EXTD1.config->channels[6].cb(&EXTD1, 6);
 80036fe:	4807      	ldr	r0, [pc, #28]	; (800371c <Vector9C+0x6c>)
 8003700:	6843      	ldr	r3, [r0, #4]
 8003702:	2106      	movs	r1, #6
 8003704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003706:	4798      	blx	r3
 8003708:	e7de      	b.n	80036c8 <Vector9C+0x18>
  pr = EXTI->PR;
  pr &= EXTI->IMR & ((1U << 5) | (1U << 6) | (1U << 7) | (1U << 8) |
                     (1U << 9));
  EXTI->PR = pr;
  if (pr & (1U << 5))
    EXTD1.config->channels[5].cb(&EXTD1, 5);
 800370a:	4804      	ldr	r0, [pc, #16]	; (800371c <Vector9C+0x6c>)
 800370c:	6843      	ldr	r3, [r0, #4]
 800370e:	2105      	movs	r1, #5
 8003710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003712:	4798      	blx	r3
 8003714:	e7d6      	b.n	80036c4 <Vector9C+0x14>
 8003716:	bf00      	nop
 8003718:	40010400 	.word	0x40010400
 800371c:	2000f9d0 	.word	0x2000f9d0

08003720 <Vector68>:
/**
 * @brief   EXTI[4] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector68) {
 8003720:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003722:	4b08      	ldr	r3, [pc, #32]	; (8003744 <Vector68+0x24>)
 8003724:	6959      	ldr	r1, [r3, #20]
  pr &= EXTI->IMR & (1U << 4);
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	400a      	ands	r2, r1
 800372a:	f002 0210 	and.w	r2, r2, #16
  EXTI->PR = pr;
 800372e:	615a      	str	r2, [r3, #20]
  if (pr & (1U << 4))
 8003730:	b122      	cbz	r2, 800373c <Vector68+0x1c>
    EXTD1.config->channels[4].cb(&EXTD1, 4);
 8003732:	4805      	ldr	r0, [pc, #20]	; (8003748 <Vector68+0x28>)
 8003734:	6843      	ldr	r3, [r0, #4]
 8003736:	2104      	movs	r1, #4
 8003738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373a:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800373c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 4);
  EXTI->PR = pr;
  if (pr & (1U << 4))
    EXTD1.config->channels[4].cb(&EXTD1, 4);

  OSAL_IRQ_EPILOGUE();
 8003740:	f7ff bdd6 	b.w	80032f0 <_port_irq_epilogue>
 8003744:	40010400 	.word	0x40010400
 8003748:	2000f9d0 	.word	0x2000f9d0
 800374c:	f3af 8000 	nop.w

08003750 <Vector64>:
/**
 * @brief   EXTI[3] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector64) {
 8003750:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003752:	4b08      	ldr	r3, [pc, #32]	; (8003774 <Vector64+0x24>)
 8003754:	6959      	ldr	r1, [r3, #20]
  pr &= EXTI->IMR & (1U << 3);
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	400a      	ands	r2, r1
 800375a:	f002 0208 	and.w	r2, r2, #8
  EXTI->PR = pr;
 800375e:	615a      	str	r2, [r3, #20]
  if (pr & (1U << 3))
 8003760:	b122      	cbz	r2, 800376c <Vector64+0x1c>
    EXTD1.config->channels[3].cb(&EXTD1, 3);
 8003762:	4805      	ldr	r0, [pc, #20]	; (8003778 <Vector64+0x28>)
 8003764:	6843      	ldr	r3, [r0, #4]
 8003766:	2103      	movs	r1, #3
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800376c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 3);
  EXTI->PR = pr;
  if (pr & (1U << 3))
    EXTD1.config->channels[3].cb(&EXTD1, 3);

  OSAL_IRQ_EPILOGUE();
 8003770:	f7ff bdbe 	b.w	80032f0 <_port_irq_epilogue>
 8003774:	40010400 	.word	0x40010400
 8003778:	2000f9d0 	.word	0x2000f9d0
 800377c:	f3af 8000 	nop.w

08003780 <Vector60>:
/**
 * @brief   EXTI[2] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector60) {
 8003780:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003782:	4b08      	ldr	r3, [pc, #32]	; (80037a4 <Vector60+0x24>)
 8003784:	6959      	ldr	r1, [r3, #20]
  pr &= EXTI->IMR & (1U << 2);
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	400a      	ands	r2, r1
 800378a:	f002 0204 	and.w	r2, r2, #4
  EXTI->PR = pr;
 800378e:	615a      	str	r2, [r3, #20]
  if (pr & (1U << 2))
 8003790:	b122      	cbz	r2, 800379c <Vector60+0x1c>
    EXTD1.config->channels[2].cb(&EXTD1, 2);
 8003792:	4805      	ldr	r0, [pc, #20]	; (80037a8 <Vector60+0x28>)
 8003794:	6843      	ldr	r3, [r0, #4]
 8003796:	2102      	movs	r1, #2
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800379c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 2);
  EXTI->PR = pr;
  if (pr & (1U << 2))
    EXTD1.config->channels[2].cb(&EXTD1, 2);

  OSAL_IRQ_EPILOGUE();
 80037a0:	f7ff bda6 	b.w	80032f0 <_port_irq_epilogue>
 80037a4:	40010400 	.word	0x40010400
 80037a8:	2000f9d0 	.word	0x2000f9d0
 80037ac:	f3af 8000 	nop.w

080037b0 <Vector5C>:
/**
 * @brief   EXTI[1] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector5C) {
 80037b0:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80037b2:	4b08      	ldr	r3, [pc, #32]	; (80037d4 <Vector5C+0x24>)
 80037b4:	6959      	ldr	r1, [r3, #20]
  pr &= EXTI->IMR & (1U << 1);
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	400a      	ands	r2, r1
 80037ba:	f002 0202 	and.w	r2, r2, #2
  EXTI->PR = pr;
 80037be:	615a      	str	r2, [r3, #20]
  if (pr & (1U << 1))
 80037c0:	b122      	cbz	r2, 80037cc <Vector5C+0x1c>
    EXTD1.config->channels[1].cb(&EXTD1, 1);
 80037c2:	4805      	ldr	r0, [pc, #20]	; (80037d8 <Vector5C+0x28>)
 80037c4:	6843      	ldr	r3, [r0, #4]
 80037c6:	2101      	movs	r1, #1
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 80037cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 1);
  EXTI->PR = pr;
  if (pr & (1U << 1))
    EXTD1.config->channels[1].cb(&EXTD1, 1);

  OSAL_IRQ_EPILOGUE();
 80037d0:	f7ff bd8e 	b.w	80032f0 <_port_irq_epilogue>
 80037d4:	40010400 	.word	0x40010400
 80037d8:	2000f9d0 	.word	0x2000f9d0
 80037dc:	f3af 8000 	nop.w

080037e0 <Vector58>:
/**
 * @brief   EXTI[0] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector58) {
 80037e0:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80037e2:	4b08      	ldr	r3, [pc, #32]	; (8003804 <Vector58+0x24>)
 80037e4:	6959      	ldr	r1, [r3, #20]
  pr &= EXTI->IMR & (1U << 0);
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	400a      	ands	r2, r1
 80037ea:	f002 0201 	and.w	r2, r2, #1
  EXTI->PR = pr;
 80037ee:	615a      	str	r2, [r3, #20]
  if (pr & (1U << 0))
 80037f0:	b122      	cbz	r2, 80037fc <Vector58+0x1c>
    EXTD1.config->channels[0].cb(&EXTD1, 0);
 80037f2:	4805      	ldr	r0, [pc, #20]	; (8003808 <Vector58+0x28>)
 80037f4:	6843      	ldr	r3, [r0, #4]
 80037f6:	2100      	movs	r1, #0
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 80037fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 0);
  EXTI->PR = pr;
  if (pr & (1U << 0))
    EXTD1.config->channels[0].cb(&EXTD1, 0);

  OSAL_IRQ_EPILOGUE();
 8003800:	f7ff bd76 	b.w	80032f0 <_port_irq_epilogue>
 8003804:	40010400 	.word	0x40010400
 8003808:	2000f9d0 	.word	0x2000f9d0
 800380c:	f3af 8000 	nop.w

08003810 <chTMStopMeasurementX>:
 8003810:	4a0e      	ldr	r2, [pc, #56]	; (800384c <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8003812:	4b0f      	ldr	r3, [pc, #60]	; (8003850 <chTMStopMeasurementX+0x40>)
 8003814:	6851      	ldr	r1, [r2, #4]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8003816:	b4f0      	push	{r4, r5, r6, r7}
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8003818:	6886      	ldr	r6, [r0, #8]
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 800381a:	6f5f      	ldr	r7, [r3, #116]	; 0x74
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
 800381c:	6844      	ldr	r4, [r0, #4]

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800381e:	68c5      	ldr	r5, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8003820:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8003824:	1b89      	subs	r1, r1, r6
 8003826:	1bc9      	subs	r1, r1, r7
  tmp->cumulative += (rttime_t)tmp->last;
 8003828:	1852      	adds	r2, r2, r1
 800382a:	f143 0300 	adc.w	r3, r3, #0
 800382e:	e9c0 2304 	strd	r2, r3, [r0, #16]
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
 8003832:	6803      	ldr	r3, [r0, #0]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8003834:	6081      	str	r1, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
 8003836:	42a1      	cmp	r1, r4

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8003838:	f105 0501 	add.w	r5, r5, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 800383c:	bf88      	it	hi
 800383e:	6041      	strhi	r1, [r0, #4]
  }
  if (tmp->last < tmp->best) {
 8003840:	4299      	cmp	r1, r3

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8003842:	60c5      	str	r5, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
    tmp->best = tmp->last;
 8003844:	bf38      	it	cc
 8003846:	6001      	strcc	r1, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 8003848:	bcf0      	pop	{r4, r5, r6, r7}
 800384a:	4770      	bx	lr
 800384c:	e0001000 	.word	0xe0001000
 8003850:	20000ec8 	.word	0x20000ec8
 8003854:	f3af 8000 	nop.w
 8003858:	f3af 8000 	nop.w
 800385c:	f3af 8000 	nop.w

08003860 <chSchGoSleepS>:
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp = currp;
 8003860:	4b08      	ldr	r3, [pc, #32]	; (8003884 <chSchGoSleepS+0x24>)
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8003862:	b430      	push	{r4, r5}
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;
 8003864:	681a      	ldr	r2, [r3, #0]
  thread_t *otp = currp;
 8003866:	6999      	ldr	r1, [r3, #24]

  tqp->next             = tp->queue.next;
 8003868:	6814      	ldr	r4, [r2, #0]

  chDbgCheckClassS();

  /* New state.*/
  otp->state = newstate;
 800386a:	f881 0020 	strb.w	r0, [r1, #32]
  otp->preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 800386e:	2501      	movs	r5, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8003870:	6063      	str	r3, [r4, #4]
 8003872:	f882 5020 	strb.w	r5, [r2, #32]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8003876:	601c      	str	r4, [r3, #0]
  if (currp->prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8003878:	4610      	mov	r0, r2
}
 800387a:	bc30      	pop	{r4, r5}
     time quantum when it will wakeup.*/
  otp->preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 800387c:	619a      	str	r2, [r3, #24]
  if (currp->prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 800387e:	f7fc bd55 	b.w	800032c <_port_switch>
 8003882:	bf00      	nop
 8003884:	20000ec8 	.word	0x20000ec8
 8003888:	f3af 8000 	nop.w
 800388c:	f3af 8000 	nop.w

08003890 <chThdEnqueueTimeoutS>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8003890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003892:	b087      	sub	sp, #28

  if (TIME_IMMEDIATE == timeout) {
 8003894:	2900      	cmp	r1, #0
 8003896:	d055      	beq.n	8003944 <chThdEnqueueTimeoutS+0xb4>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8003898:	4c42      	ldr	r4, [pc, #264]	; (80039a4 <chThdEnqueueTimeoutS+0x114>)
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->queue.next             = (thread_t *)tqp;
  tp->queue.prev             = tqp->prev;
 800389a:	6843      	ldr	r3, [r0, #4]
 800389c:	69a2      	ldr	r2, [r4, #24]
 800389e:	e882 0009 	stmia.w	r2, {r0, r3}
  tp->queue.prev->queue.next = tp;
 80038a2:	601a      	str	r2, [r3, #0]
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 80038a4:	1c4b      	adds	r3, r1, #1
  tqp->prev                  = tp;
 80038a6:	6042      	str	r2, [r0, #4]
 80038a8:	d048      	beq.n	800393c <chThdEnqueueTimeoutS+0xac>
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80038aa:	4625      	mov	r5, r4
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 80038ac:	2901      	cmp	r1, #1
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80038ae:	f855 3f1c 	ldr.w	r3, [r5, #28]!

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
  vtp->func = vtfunc;
 80038b2:	4e3d      	ldr	r6, [pc, #244]	; (80039a8 <chThdEnqueueTimeoutS+0x118>)
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
 80038b4:	9205      	str	r2, [sp, #20]
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80038b6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 80038ba:	bf08      	it	eq
 80038bc:	2102      	moveq	r1, #2
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80038be:	42ab      	cmp	r3, r5
 80038c0:	6a42      	ldr	r2, [r0, #36]	; 0x24

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
  vtp->func = vtfunc;
 80038c2:	9604      	str	r6, [sp, #16]
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80038c4:	d05a      	beq.n	800397c <chThdEnqueueTimeoutS+0xec>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = now - ch.vtlist.lasttime + delay;
 80038c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80038c8:	1b92      	subs	r2, r2, r6

    if (delta < now - ch.vtlist.lasttime) {
 80038ca:	1889      	adds	r1, r1, r2
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
 80038cc:	689a      	ldr	r2, [r3, #8]

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = now - ch.vtlist.lasttime + delay;

    if (delta < now - ch.vtlist.lasttime) {
 80038ce:	d231      	bcs.n	8003934 <chThdEnqueueTimeoutS+0xa4>
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
    }
    else if (delta < p->delta) {
 80038d0:	4291      	cmp	r1, r2
     /* A small delay that will become the first element in the delta list
        and next deadline.*/
      port_timer_set_alarm(ch.vtlist.lasttime + delta);
 80038d2:	bf3c      	itt	cc
 80038d4:	1876      	addcc	r6, r6, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80038d6:	6346      	strcc	r6, [r0, #52]	; 0x34
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 80038d8:	4291      	cmp	r1, r2
 80038da:	d904      	bls.n	80038e6 <chThdEnqueueTimeoutS+0x56>
    delta -= p->delta;
    p = p->next;
 80038dc:	681b      	ldr	r3, [r3, #0]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
    delta -= p->delta;
 80038de:	1a89      	subs	r1, r1, r2
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 80038e0:	689a      	ldr	r2, [r3, #8]
 80038e2:	428a      	cmp	r2, r1
 80038e4:	d3fa      	bcc.n	80038dc <chThdEnqueueTimeoutS+0x4c>
    p = p->next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	9202      	str	r2, [sp, #8]
  vtp->prev->next = vtp;
 80038ea:	ae01      	add	r6, sp, #4
    delta -= p->delta;
    p = p->next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
 80038ec:	9301      	str	r3, [sp, #4]
  vtp->prev = vtp->next->prev;
  vtp->prev->next = vtp;
 80038ee:	6016      	str	r6, [r2, #0]
  p->prev = vtp;
 80038f0:	605e      	str	r6, [r3, #4]
  vtp->delta = delta
 80038f2:	9103      	str	r1, [sp, #12]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
 80038f4:	689a      	ldr	r2, [r3, #8]
  ch.vtlist.delta = (systime_t)-1;
 80038f6:	f04f 30ff 	mov.w	r0, #4294967295
  p->prev = vtp;
  vtp->delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
 80038fa:	1a51      	subs	r1, r2, r1
 80038fc:	6099      	str	r1, [r3, #8]
  ch.vtlist.delta = (systime_t)-1;
 80038fe:	6260      	str	r0, [r4, #36]	; 0x24
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
    chSchGoSleepS(newstate);
 8003900:	2004      	movs	r0, #4
 8003902:	f7ff ffad 	bl	8003860 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8003906:	9b04      	ldr	r3, [sp, #16]
 8003908:	b183      	cbz	r3, 800392c <chThdEnqueueTimeoutS+0x9c>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 800390a:	69e3      	ldr	r3, [r4, #28]
 800390c:	4a25      	ldr	r2, [pc, #148]	; (80039a4 <chThdEnqueueTimeoutS+0x114>)
 800390e:	42b3      	cmp	r3, r6
 8003910:	d01b      	beq.n	800394a <chThdEnqueueTimeoutS+0xba>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8003912:	9a02      	ldr	r2, [sp, #8]
 8003914:	9b01      	ldr	r3, [sp, #4]
 8003916:	6013      	str	r3, [r2, #0]
    vtp->next->prev = vtp->prev;
 8003918:	9b01      	ldr	r3, [sp, #4]
    vtp->func = NULL;
 800391a:	2100      	movs	r1, #0

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 800391c:	42ab      	cmp	r3, r5
  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
    vtp->next->prev = vtp->prev;
 800391e:	605a      	str	r2, [r3, #4]
    vtp->func = NULL;
 8003920:	9104      	str	r1, [sp, #16]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8003922:	d003      	beq.n	800392c <chThdEnqueueTimeoutS+0x9c>
      vtp->next->delta += vtp->delta;
 8003924:	6899      	ldr	r1, [r3, #8]
 8003926:	9a03      	ldr	r2, [sp, #12]
 8003928:	440a      	add	r2, r1
 800392a:	609a      	str	r2, [r3, #8]
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->u.rdymsg;
 800392c:	69a3      	ldr	r3, [r4, #24]
 800392e:	6a58      	ldr	r0, [r3, #36]	; 0x24

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
}
 8003930:	b007      	add	sp, #28
 8003932:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (delta < now - ch.vtlist.lasttime) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
 8003934:	681b      	ldr	r3, [r3, #0]

    if (delta < now - ch.vtlist.lasttime) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
 8003936:	1a89      	subs	r1, r1, r2
 8003938:	689a      	ldr	r2, [r3, #8]
 800393a:	e7cd      	b.n	80038d8 <chThdEnqueueTimeoutS+0x48>
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 800393c:	2004      	movs	r0, #4
 800393e:	f7ff ff8f 	bl	8003860 <chSchGoSleepS>
 8003942:	e7f3      	b.n	800392c <chThdEnqueueTimeoutS+0x9c>
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
 8003944:	f04f 30ff 	mov.w	r0, #4294967295
 8003948:	e7f2      	b.n	8003930 <chThdEnqueueTimeoutS+0xa0>

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
 800394a:	9b01      	ldr	r3, [sp, #4]
 800394c:	61d3      	str	r3, [r2, #28]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  vtp->func = NULL;
 800394e:	2100      	movs	r1, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8003950:	42ab      	cmp	r3, r5
    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8003952:	605d      	str	r5, [r3, #4]
  vtp->func = NULL;
 8003954:	9104      	str	r1, [sp, #16]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8003956:	d021      	beq.n	800399c <chThdEnqueueTimeoutS+0x10c>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 8003958:	6899      	ldr	r1, [r3, #8]
 800395a:	9d03      	ldr	r5, [sp, #12]
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;
 800395c:	6a90      	ldr	r0, [r2, #40]	; 0x28

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 800395e:	186a      	adds	r2, r5, r1
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8003960:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003964:	609a      	str	r2, [r3, #8]
 8003966:	6a4b      	ldr	r3, [r1, #36]	; 0x24
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;
 8003968:	1a18      	subs	r0, r3, r0

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 800396a:	4282      	cmp	r2, r0
 800396c:	d9de      	bls.n	800392c <chThdEnqueueTimeoutS+0x9c>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 800396e:	1a12      	subs	r2, r2, r0

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 8003970:	2a01      	cmp	r2, #1
 8003972:	bf98      	it	ls
 8003974:	2202      	movls	r2, #2
  }

  port_timer_set_alarm(ch.vtlist.lasttime + nowdelta + delta);
 8003976:	4413      	add	r3, r2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8003978:	634b      	str	r3, [r1, #52]	; 0x34
 800397a:	e7d7      	b.n	800392c <chThdEnqueueTimeoutS+0x9c>
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.lasttime = now;
      ch.vtlist.next = vtp;
 800397c:	ae01      	add	r6, sp, #4
      vtp->next = (virtual_timer_t *)&ch.vtlist;
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
      vtp->delta = delay;

      /* Being the first element in the list the alarm timer is started.*/
      port_timer_start_alarm(ch.vtlist.lasttime + delay);
 800397e:	eb01 0e02 	add.w	lr, r1, r2
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  STM32_ST_TIM->SR     = 0;
 8003982:	2700      	movs	r7, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8003984:	2302      	movs	r3, #2
      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.lasttime = now;
      ch.vtlist.next = vtp;
      ch.vtlist.prev = vtp;
      vtp->next = (virtual_timer_t *)&ch.vtlist;
 8003986:	9501      	str	r5, [sp, #4]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 8003988:	9502      	str	r5, [sp, #8]
      vtp->delta = delay;
 800398a:	9103      	str	r1, [sp, #12]
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.lasttime = now;
 800398c:	62a2      	str	r2, [r4, #40]	; 0x28
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800398e:	f8c0 e034 	str.w	lr, [r0, #52]	; 0x34
      ch.vtlist.next = vtp;
 8003992:	61e6      	str	r6, [r4, #28]
  STM32_ST_TIM->SR     = 0;
 8003994:	6107      	str	r7, [r0, #16]
      ch.vtlist.prev = vtp;
 8003996:	6226      	str	r6, [r4, #32]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8003998:	60c3      	str	r3, [r0, #12]
 800399a:	e7b1      	b.n	8003900 <chThdEnqueueTimeoutS+0x70>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 800399c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80039a0:	60d9      	str	r1, [r3, #12]
 80039a2:	e7c3      	b.n	800392c <chThdEnqueueTimeoutS+0x9c>
 80039a4:	20000ec8 	.word	0x20000ec8
 80039a8:	080027b1 	.word	0x080027b1
 80039ac:	f3af 8000 	nop.w

080039b0 <iqReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, systime_t timeout) {
 80039b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039b4:	4698      	mov	r8, r3
 80039b6:	b083      	sub	sp, #12
 80039b8:	4604      	mov	r4, r0
 80039ba:	468b      	mov	fp, r1
 80039bc:	4615      	mov	r5, r2
  systime_t deadline;
  qnotify_t nfy = iqp->q_notify;
 80039be:	69c7      	ldr	r7, [r0, #28]
 80039c0:	2320      	movs	r3, #32
 80039c2:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80039c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  size_t r = 0;
 80039ca:	2600      	movs	r6, #0
 80039cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  osalSysLock();

  /* Time deadline for the whole operation, note the result is invalid
     when timeout is TIME_INFINITE or TIME_IMMEDIATE but in that case
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;
 80039ce:	4443      	add	r3, r8
    while (iqIsEmptyI(iqp)) {
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 80039d0:	f108 3aff 	add.w	sl, r8, #4294967295
  osalSysLock();

  /* Time deadline for the whole operation, note the result is invalid
     when timeout is TIME_INFINITE or TIME_IMMEDIATE but in that case
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;
 80039d4:	9301      	str	r3, [sp, #4]
 80039d6:	46b1      	mov	r9, r6

  while (true) {
    /* Waiting until there is a character available or a timeout occurs.*/
    while (iqIsEmptyI(iqp)) {
 80039d8:	68a3      	ldr	r3, [r4, #8]
 80039da:	b1fb      	cbz	r3, 8003a1c <iqReadTimeout+0x6c>
      }
    }

    /* Getting the character from the queue.*/
    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 80039dc:	69a3      	ldr	r3, [r4, #24]
        return r;
      }
    }

    /* Getting the character from the queue.*/
    iqp->q_counter--;
 80039de:	68a1      	ldr	r1, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 80039e0:	1c5a      	adds	r2, r3, #1
        return r;
      }
    }

    /* Getting the character from the queue.*/
    iqp->q_counter--;
 80039e2:	3901      	subs	r1, #1
    *bp++ = *iqp->q_rdptr++;
 80039e4:	61a2      	str	r2, [r4, #24]
        return r;
      }
    }

    /* Getting the character from the queue.*/
    iqp->q_counter--;
 80039e6:	60a1      	str	r1, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	f88b 3000 	strb.w	r3, [fp]
    if (iqp->q_rdptr >= iqp->q_top) {
 80039ee:	6923      	ldr	r3, [r4, #16]
 80039f0:	69a2      	ldr	r2, [r4, #24]
 80039f2:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 80039f4:	bf24      	itt	cs
 80039f6:	68e3      	ldrcs	r3, [r4, #12]
 80039f8:	61a3      	strcs	r3, [r4, #24]
      }
    }

    /* Getting the character from the queue.*/
    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 80039fa:	f10b 0b01 	add.w	fp, fp, #1
    if (iqp->q_rdptr >= iqp->q_top) {
      iqp->q_rdptr = iqp->q_buffer;
    }

    /* Inform the low side that the queue has at least one slot available.*/
    if (nfy != NULL) {
 80039fe:	b10f      	cbz	r7, 8003a04 <iqReadTimeout+0x54>
      nfy(iqp);
 8003a00:	4620      	mov	r0, r4
 8003a02:	47b8      	blx	r7
 8003a04:	f389 8811 	msr	BASEPRI, r9

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    r++;
    if (--n == 0U) {
 8003a08:	3d01      	subs	r5, #1
    }

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    r++;
 8003a0a:	f106 0601 	add.w	r6, r6, #1
    if (--n == 0U) {
 8003a0e:	d017      	beq.n	8003a40 <iqReadTimeout+0x90>
 8003a10:	2320      	movs	r3, #32
 8003a12:	f383 8811 	msr	BASEPRI, r3
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;

  while (true) {
    /* Waiting until there is a character available or a timeout occurs.*/
    while (iqIsEmptyI(iqp)) {
 8003a16:	68a3      	ldr	r3, [r4, #8]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1df      	bne.n	80039dc <iqReadTimeout+0x2c>
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8003a1c:	f11a 0f03 	cmn.w	sl, #3
 8003a20:	d812      	bhi.n	8003a48 <iqReadTimeout+0x98>
 8003a22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003a26:	6a51      	ldr	r1, [r2, #36]	; 0x24
        msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
      }
      else {
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 8003a28:	9a01      	ldr	r2, [sp, #4]
 8003a2a:	1a51      	subs	r1, r2, r1

        /* Handling the case where the system time went past the deadline,
           in this case next becomes a very high number because the system
           time is an unsigned type.*/
        if (next_timeout > timeout) {
 8003a2c:	4588      	cmp	r8, r1
 8003a2e:	d305      	bcc.n	8003a3c <iqReadTimeout+0x8c>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              systime_t time) {

  return chThdEnqueueTimeoutS(tqp, time);
 8003a30:	4620      	mov	r0, r4
 8003a32:	f7ff ff2d 	bl	8003890 <chThdEnqueueTimeoutS>

        msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, next_timeout);
      }

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 8003a36:	2800      	cmp	r0, #0
 8003a38:	d0ce      	beq.n	80039d8 <iqReadTimeout+0x28>
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	f383 8811 	msr	BASEPRI, r3
      return r;
    }

    osalSysLock();
  }
}
 8003a40:	4630      	mov	r0, r6
 8003a42:	b003      	add	sp, #12
 8003a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a48:	4620      	mov	r0, r4
 8003a4a:	4641      	mov	r1, r8
 8003a4c:	f7ff ff20 	bl	8003890 <chThdEnqueueTimeoutS>

        msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, next_timeout);
      }

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 8003a50:	2800      	cmp	r0, #0
 8003a52:	d0c1      	beq.n	80039d8 <iqReadTimeout+0x28>
 8003a54:	e7f1      	b.n	8003a3a <iqReadTimeout+0x8a>
 8003a56:	bf00      	nop
 8003a58:	f3af 8000 	nop.w
 8003a5c:	f3af 8000 	nop.w

08003a60 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 8003a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a62:	4604      	mov	r4, r0
 8003a64:	460f      	mov	r7, r1
 8003a66:	4616      	mov	r6, r2
 8003a68:	2320      	movs	r3, #32
 8003a6a:	f383 8811 	msr	BASEPRI, r3
 8003a6e:	e003      	b.n	8003a78 <oqPutTimeout+0x18>
 8003a70:	f7ff ff0e 	bl	8003890 <chThdEnqueueTimeoutS>
  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 8003a74:	2800      	cmp	r0, #0
 8003a76:	db1a      	blt.n	8003aae <oqPutTimeout+0x4e>
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
 8003a78:	68a5      	ldr	r5, [r4, #8]
 8003a7a:	4620      	mov	r0, r4
 8003a7c:	4631      	mov	r1, r6
 8003a7e:	2d00      	cmp	r5, #0
 8003a80:	d0f6      	beq.n	8003a70 <oqPutTimeout+0x10>
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8003a82:	6963      	ldr	r3, [r4, #20]
      return msg;
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
 8003a84:	68a1      	ldr	r1, [r4, #8]
  *oqp->q_wrptr++ = b;
 8003a86:	1c5a      	adds	r2, r3, #1
      return msg;
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
 8003a88:	3901      	subs	r1, #1
  *oqp->q_wrptr++ = b;
 8003a8a:	6162      	str	r2, [r4, #20]
      return msg;
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
 8003a8c:	60a1      	str	r1, [r4, #8]
  *oqp->q_wrptr++ = b;
 8003a8e:	701f      	strb	r7, [r3, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8003a90:	6923      	ldr	r3, [r4, #16]
 8003a92:	6962      	ldr	r2, [r4, #20]
 8003a94:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8003a96:	bf24      	itt	cs
 8003a98:	68e3      	ldrcs	r3, [r4, #12]
 8003a9a:	6163      	strcs	r3, [r4, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 8003a9c:	69e3      	ldr	r3, [r4, #28]
 8003a9e:	b10b      	cbz	r3, 8003aa4 <oqPutTimeout+0x44>
    oqp->q_notify(oqp);
 8003aa0:	4620      	mov	r0, r4
 8003aa2:	4798      	blx	r3
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	f383 8811 	msr	BASEPRI, r3
 8003aaa:	2000      	movs	r0, #0
  }

  osalSysUnlock();

  return MSG_OK;
}
 8003aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003aae:	f385 8811 	msr	BASEPRI, r5
 8003ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ab4:	f3af 8000 	nop.w
 8003ab8:	f3af 8000 	nop.w
 8003abc:	f3af 8000 	nop.w

08003ac0 <sendCRC>:

// Send Tx CRC
// Usually that ends transmission
void sendCRC(void)
 {
 sdPut(&SDRIVER,crcTx);
 8003ac0:	4b03      	ldr	r3, [pc, #12]	; (8003ad0 <sendCRC+0x10>)
 8003ac2:	4804      	ldr	r0, [pc, #16]	; (8003ad4 <sendCRC+0x14>)
 8003ac4:	7819      	ldrb	r1, [r3, #0]
 8003ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8003aca:	f7ff bfc9 	b.w	8003a60 <oqPutTimeout>
 8003ace:	bf00      	nop
 8003ad0:	20000c54 	.word	0x20000c54
 8003ad4:	20000e90 	.word	0x20000e90
 8003ad8:	f3af 8000 	nop.w
 8003adc:	f3af 8000 	nop.w

08003ae0 <sendByte>:
 }

// Send one byte and computes crc
void sendByte(int value)
 {
 8003ae0:	b510      	push	{r4, lr}
 sdPut(&SDRIVER,value);
 8003ae2:	b2c1      	uxtb	r1, r0
 sdPut(&SDRIVER,crcTx);
 }

// Send one byte and computes crc
void sendByte(int value)
 {
 8003ae4:	4604      	mov	r4, r0
 sdPut(&SDRIVER,value);
 8003ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8003aea:	4804      	ldr	r0, [pc, #16]	; (8003afc <sendByte+0x1c>)
 8003aec:	f7ff ffb8 	bl	8003a60 <oqPutTimeout>
 crcTx = crcTx ^ value;
 8003af0:	4b03      	ldr	r3, [pc, #12]	; (8003b00 <sendByte+0x20>)
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	4054      	eors	r4, r2
 8003af6:	601c      	str	r4, [r3, #0]
 8003af8:	bd10      	pop	{r4, pc}
 8003afa:	bf00      	nop
 8003afc:	20000e90 	.word	0x20000e90
 8003b00:	20000c54 	.word	0x20000c54
 8003b04:	f3af 8000 	nop.w
 8003b08:	f3af 8000 	nop.w
 8003b0c:	f3af 8000 	nop.w

08003b10 <sendU16>:
 }

// Send one uint16 and computes crc
void sendU16(int value)
 {
 8003b10:	b570      	push	{r4, r5, r6, lr}
 int low,high;

 high = value / 256;
 low  = value % 256;
 8003b12:	4c12      	ldr	r4, [pc, #72]	; (8003b5c <sendU16+0x4c>)
// Send one uint16 and computes crc
void sendU16(int value)
 {
 int low,high;

 high = value / 256;
 8003b14:	2800      	cmp	r0, #0
 low  = value % 256;
 8003b16:	ea00 0404 	and.w	r4, r0, r4
// Send one uint16 and computes crc
void sendU16(int value)
 {
 int low,high;

 high = value / 256;
 8003b1a:	4606      	mov	r6, r0
 8003b1c:	bfb8      	it	lt
 8003b1e:	f100 06ff 	addlt.w	r6, r0, #255	; 0xff
 low  = value % 256;
 8003b22:	2c00      	cmp	r4, #0
// Send one uint16 and computes crc
void sendU16(int value)
 {
 int low,high;

 high = value / 256;
 8003b24:	ea4f 2626 	mov.w	r6, r6, asr #8
 low  = value % 256;
 8003b28:	db13      	blt.n	8003b52 <sendU16+0x42>

// Send one byte and computes crc
void sendByte(int value)
 {
 sdPut(&SDRIVER,value);
 crcTx = crcTx ^ value;
 8003b2a:	4d0d      	ldr	r5, [pc, #52]	; (8003b60 <sendU16+0x50>)
 }

// Send one byte and computes crc
void sendByte(int value)
 {
 sdPut(&SDRIVER,value);
 8003b2c:	480d      	ldr	r0, [pc, #52]	; (8003b64 <sendU16+0x54>)
 8003b2e:	b2e1      	uxtb	r1, r4
 8003b30:	f04f 32ff 	mov.w	r2, #4294967295
 8003b34:	f7ff ff94 	bl	8003a60 <oqPutTimeout>
 crcTx = crcTx ^ value;
 8003b38:	682b      	ldr	r3, [r5, #0]
 }

// Send one byte and computes crc
void sendByte(int value)
 {
 sdPut(&SDRIVER,value);
 8003b3a:	480a      	ldr	r0, [pc, #40]	; (8003b64 <sendU16+0x54>)
 crcTx = crcTx ^ value;
 8003b3c:	405c      	eors	r4, r3
 }

// Send one byte and computes crc
void sendByte(int value)
 {
 sdPut(&SDRIVER,value);
 8003b3e:	b2f1      	uxtb	r1, r6
 8003b40:	f04f 32ff 	mov.w	r2, #4294967295
 crcTx = crcTx ^ value;
 8003b44:	602c      	str	r4, [r5, #0]
 }

// Send one byte and computes crc
void sendByte(int value)
 {
 sdPut(&SDRIVER,value);
 8003b46:	f7ff ff8b 	bl	8003a60 <oqPutTimeout>
 crcTx = crcTx ^ value;
 8003b4a:	682b      	ldr	r3, [r5, #0]
 8003b4c:	405e      	eors	r6, r3
 8003b4e:	602e      	str	r6, [r5, #0]
 8003b50:	bd70      	pop	{r4, r5, r6, pc}
void sendU16(int value)
 {
 int low,high;

 high = value / 256;
 low  = value % 256;
 8003b52:	3c01      	subs	r4, #1
 8003b54:	f064 04ff 	orn	r4, r4, #255	; 0xff
 8003b58:	3401      	adds	r4, #1
 8003b5a:	e7e6      	b.n	8003b2a <sendU16+0x1a>
 8003b5c:	800000ff 	.word	0x800000ff
 8003b60:	20000c54 	.word	0x20000c54
 8003b64:	20000e90 	.word	0x20000e90
 8003b68:	f3af 8000 	nop.w
 8003b6c:	f3af 8000 	nop.w

08003b70 <dumpInBuffer>:
 return a;
 }

// Dumps the input buffer on serial
void dumpInBuffer(void)
  {
 8003b70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int ia,is,ssize;

  // Response code
  if (halt)
 8003b74:	4b34      	ldr	r3, [pc, #208]	; (8003c48 <dumpInBuffer+0xd8>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d15f      	bne.n	8003c3c <dumpInBuffer+0xcc>
        {
        sendByte(TRAN_HALT);
        return;
        }

  if (overrun_error)
 8003b7c:	4b33      	ldr	r3, [pc, #204]	; (8003c4c <dumpInBuffer+0xdc>)
 8003b7e:	6818      	ldr	r0, [r3, #0]
 8003b80:	2800      	cmp	r0, #0
 8003b82:	d152      	bne.n	8003c2a <dumpInBuffer+0xba>
        return;
        }
        else
        sendByte(TRAN_OK);

  sendByte(n_ai);  // Number of analog
 8003b84:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003c58 <dumpInBuffer+0xe8>
  sendByte(n_di);  // Number of digital
  sendU16(n_s);  // Number of samples
 8003b88:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 8003c5c <dumpInBuffer+0xec>
        {
        sendByte(TRAN_OVERRUN);
        return;
        }
        else
        sendByte(TRAN_OK);
 8003b8c:	f7ff ffa8 	bl	8003ae0 <sendByte>

  sendByte(n_ai);  // Number of analog
 8003b90:	f8d8 0000 	ldr.w	r0, [r8]
 8003b94:	f7ff ffa4 	bl	8003ae0 <sendByte>
  sendByte(n_di);  // Number of digital
 8003b98:	4a2d      	ldr	r2, [pc, #180]	; (8003c50 <dumpInBuffer+0xe0>)
 8003b9a:	6810      	ldr	r0, [r2, #0]
 8003b9c:	f7ff ffa0 	bl	8003ae0 <sendByte>
  sendU16(n_s);  // Number of samples
 8003ba0:	f8db 0000 	ldr.w	r0, [fp]
 8003ba4:	f7ff ffb4 	bl	8003b10 <sendU16>

  // Determine space used by each sample
  if (n_di)
 8003ba8:	4a29      	ldr	r2, [pc, #164]	; (8003c50 <dumpInBuffer+0xe0>)
 8003baa:	6813      	ldr	r3, [r2, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d041      	beq.n	8003c34 <dumpInBuffer+0xc4>
      ssize = n_ai+1;
 8003bb0:	f8d8 2000 	ldr.w	r2, [r8]
 8003bb4:	f102 0901 	add.w	r9, r2, #1
     else
      ssize = n_ai;

  // Send analog data
  if (n_ai)
    for(ia=0;ia<n_ai;ia++)                // For every analog input
 8003bb8:	2a00      	cmp	r2, #0
 8003bba:	dd1c      	ble.n	8003bf6 <dumpInBuffer+0x86>
 8003bbc:	f8df a094 	ldr.w	sl, [pc, #148]	; 8003c54 <dumpInBuffer+0xe4>
 8003bc0:	ea4f 0649 	mov.w	r6, r9, lsl #1
 8003bc4:	2700      	movs	r7, #0
       for(is=0;is<n_s;is++)              // For every sample
 8003bc6:	f8db 3000 	ldr.w	r3, [fp]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	dd0c      	ble.n	8003be8 <dumpInBuffer+0x78>
 8003bce:	007d      	lsls	r5, r7, #1
 8003bd0:	2400      	movs	r4, #0
       sendU16(tranBuff[is*ssize+ia]);     // Send it
 8003bd2:	f8da 3000 	ldr.w	r3, [sl]
 8003bd6:	5b58      	ldrh	r0, [r3, r5]
 8003bd8:	f7ff ff9a 	bl	8003b10 <sendU16>
      ssize = n_ai;

  // Send analog data
  if (n_ai)
    for(ia=0;ia<n_ai;ia++)                // For every analog input
       for(is=0;is<n_s;is++)              // For every sample
 8003bdc:	f8db 3000 	ldr.w	r3, [fp]
 8003be0:	3401      	adds	r4, #1
 8003be2:	429c      	cmp	r4, r3
 8003be4:	4435      	add	r5, r6
 8003be6:	dbf4      	blt.n	8003bd2 <dumpInBuffer+0x62>
     else
      ssize = n_ai;

  // Send analog data
  if (n_ai)
    for(ia=0;ia<n_ai;ia++)                // For every analog input
 8003be8:	f8d8 3000 	ldr.w	r3, [r8]
 8003bec:	3701      	adds	r7, #1
 8003bee:	429f      	cmp	r7, r3
 8003bf0:	dbe9      	blt.n	8003bc6 <dumpInBuffer+0x56>
 8003bf2:	4a17      	ldr	r2, [pc, #92]	; (8003c50 <dumpInBuffer+0xe0>)
 8003bf4:	6813      	ldr	r3, [r2, #0]
       for(is=0;is<n_s;is++)              // For every sample
       sendU16(tranBuff[is*ssize+ia]);     // Send it

  // Send digital data
  if (n_di)
 8003bf6:	b1b3      	cbz	r3, 8003c26 <dumpInBuffer+0xb6>
	  for(is=0;is<n_s;is++)              // For every sample
 8003bf8:	f8db 3000 	ldr.w	r3, [fp]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	dd12      	ble.n	8003c26 <dumpInBuffer+0xb6>
 8003c00:	2400      	movs	r4, #0
 8003c02:	4e14      	ldr	r6, [pc, #80]	; (8003c54 <dumpInBuffer+0xe4>)
 8003c04:	4625      	mov	r5, r4
		  sendU16((tranBuff[is*ssize+n_ai])&(DIO_MASK));
 8003c06:	f8d8 2000 	ldr.w	r2, [r8]
 8003c0a:	6833      	ldr	r3, [r6, #0]
 8003c0c:	4422      	add	r2, r4
       for(is=0;is<n_s;is++)              // For every sample
       sendU16(tranBuff[is*ssize+ia]);     // Send it

  // Send digital data
  if (n_di)
	  for(is=0;is<n_s;is++)              // For every sample
 8003c0e:	3501      	adds	r5, #1
		  sendU16((tranBuff[is*ssize+n_ai])&(DIO_MASK));
 8003c10:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8003c14:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8003c18:	f7ff ff7a 	bl	8003b10 <sendU16>
       for(is=0;is<n_s;is++)              // For every sample
       sendU16(tranBuff[is*ssize+ia]);     // Send it

  // Send digital data
  if (n_di)
	  for(is=0;is<n_s;is++)              // For every sample
 8003c1c:	f8db 3000 	ldr.w	r3, [fp]
 8003c20:	429d      	cmp	r5, r3
 8003c22:	444c      	add	r4, r9
 8003c24:	dbef      	blt.n	8003c06 <dumpInBuffer+0x96>
 8003c26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return;
        }

  if (overrun_error)
        {
        sendByte(TRAN_OVERRUN);
 8003c2a:	2001      	movs	r0, #1

  // Send digital data
  if (n_di)
	  for(is=0;is<n_s;is++)              // For every sample
		  sendU16((tranBuff[is*ssize+n_ai])&(DIO_MASK));
  }
 8003c2c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return;
        }

  if (overrun_error)
        {
        sendByte(TRAN_OVERRUN);
 8003c30:	f7ff bf56 	b.w	8003ae0 <sendByte>

  // Determine space used by each sample
  if (n_di)
      ssize = n_ai+1;
     else
      ssize = n_ai;
 8003c34:	f8d8 9000 	ldr.w	r9, [r8]
 8003c38:	464a      	mov	r2, r9
 8003c3a:	e7bd      	b.n	8003bb8 <dumpInBuffer+0x48>
  int ia,is,ssize;

  // Response code
  if (halt)
        {
        sendByte(TRAN_HALT);
 8003c3c:	2003      	movs	r0, #3

  // Send digital data
  if (n_di)
	  for(is=0;is<n_s;is++)              // For every sample
		  sendU16((tranBuff[is*ssize+n_ai])&(DIO_MASK));
  }
 8003c3e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int ia,is,ssize;

  // Response code
  if (halt)
        {
        sendByte(TRAN_HALT);
 8003c42:	f7ff bf4d 	b.w	8003ae0 <sendByte>
 8003c46:	bf00      	nop
 8003c48:	20000e4c 	.word	0x20000e4c
 8003c4c:	20000c90 	.word	0x20000c90
 8003c50:	20000f40 	.word	0x20000f40
 8003c54:	20000cb8 	.word	0x20000cb8
 8003c58:	20000804 	.word	0x20000804
 8003c5c:	20000814 	.word	0x20000814

08003c60 <sendMantExp>:
 sendByte(high);
 }

// Send float as mantissa and exponent
void sendMantExp(int mantissa, int exponent)
 {
 8003c60:	b538      	push	{r3, r4, r5, lr}
 sendByte(exponent+128);
 8003c62:	f101 0480 	add.w	r4, r1, #128	; 0x80
 sendByte(high);
 }

// Send float as mantissa and exponent
void sendMantExp(int mantissa, int exponent)
 {
 8003c66:	4605      	mov	r5, r0
 }

// Send one byte and computes crc
void sendByte(int value)
 {
 sdPut(&SDRIVER,value);
 8003c68:	b2e1      	uxtb	r1, r4
 8003c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8003c6e:	4807      	ldr	r0, [pc, #28]	; (8003c8c <sendMantExp+0x2c>)
 8003c70:	f7ff fef6 	bl	8003a60 <oqPutTimeout>
 crcTx = crcTx ^ value;
 8003c74:	4b06      	ldr	r3, [pc, #24]	; (8003c90 <sendMantExp+0x30>)
 8003c76:	681a      	ldr	r2, [r3, #0]

// Send float as mantissa and exponent
void sendMantExp(int mantissa, int exponent)
 {
 sendByte(exponent+128);
 sendU16(mantissa+20000);
 8003c78:	f505 409c 	add.w	r0, r5, #19968	; 0x4e00

// Send one byte and computes crc
void sendByte(int value)
 {
 sdPut(&SDRIVER,value);
 crcTx = crcTx ^ value;
 8003c7c:	4054      	eors	r4, r2
 8003c7e:	601c      	str	r4, [r3, #0]

// Send float as mantissa and exponent
void sendMantExp(int mantissa, int exponent)
 {
 sendByte(exponent+128);
 sendU16(mantissa+20000);
 8003c80:	3020      	adds	r0, #32
 }
 8003c82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

// Send float as mantissa and exponent
void sendMantExp(int mantissa, int exponent)
 {
 sendByte(exponent+128);
 sendU16(mantissa+20000);
 8003c86:	f7ff bf43 	b.w	8003b10 <sendU16>
 8003c8a:	bf00      	nop
 8003c8c:	20000e90 	.word	0x20000e90
 8003c90:	20000c54 	.word	0x20000c54
 8003c94:	f3af 8000 	nop.w
 8003c98:	f3af 8000 	nop.w
 8003c9c:	f3af 8000 	nop.w

08003ca0 <_putt.8456>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
}

static msg_t _putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8003ca0:	3030      	adds	r0, #48	; 0x30
 8003ca2:	f7ff bedd 	b.w	8003a60 <oqPutTimeout>
 8003ca6:	bf00      	nop
 8003ca8:	f3af 8000 	nop.w
 8003cac:	f3af 8000 	nop.w

08003cb0 <_put.8461>:
                       n, TIME_INFINITE);
}

static msg_t _put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8003cb0:	3030      	adds	r0, #48	; 0x30
 8003cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8003cb6:	f7ff bed3 	b.w	8003a60 <oqPutTimeout>
 8003cba:	bf00      	nop
 8003cbc:	f3af 8000 	nop.w

08003cc0 <oqWriteTimeout.4272>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
 8003cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cc4:	4698      	mov	r8, r3
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	4604      	mov	r4, r0
 8003cca:	468b      	mov	fp, r1
 8003ccc:	4615      	mov	r5, r2
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
 8003cce:	69c7      	ldr	r7, [r0, #28]
 8003cd0:	2320      	movs	r3, #32
 8003cd2:	f383 8811 	msr	BASEPRI, r3
 8003cd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  size_t w = 0;
 8003cda:	2600      	movs	r6, #0
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  osalSysLock();

  /* Time deadline for the whole operation, note the result is invalid
     when timeout is TIME_INFINITE or TIME_IMMEDIATE but in that case
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;
 8003cde:	4443      	add	r3, r8
    msg_t msg;

    while (oqIsFullI(oqp)) {
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8003ce0:	f108 3aff 	add.w	sl, r8, #4294967295
  osalSysLock();

  /* Time deadline for the whole operation, note the result is invalid
     when timeout is TIME_INFINITE or TIME_IMMEDIATE but in that case
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;
 8003ce4:	9301      	str	r3, [sp, #4]
 8003ce6:	46b1      	mov	r9, r6

  while (true) {
    msg_t msg;

    while (oqIsFullI(oqp)) {
 8003ce8:	68a3      	ldr	r3, [r4, #8]
 8003cea:	b1fb      	cbz	r3, 8003d2c <oqWriteTimeout.4272+0x6c>
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8003cec:	6963      	ldr	r3, [r4, #20]
        return w;
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
 8003cee:	68a1      	ldr	r1, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8003cf0:	1c5a      	adds	r2, r3, #1
        return w;
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
 8003cf2:	3901      	subs	r1, #1
    *oqp->q_wrptr++ = *bp++;
 8003cf4:	6162      	str	r2, [r4, #20]
        return w;
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
 8003cf6:	60a1      	str	r1, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8003cf8:	f89b 2000 	ldrb.w	r2, [fp]
 8003cfc:	701a      	strb	r2, [r3, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 8003cfe:	6923      	ldr	r3, [r4, #16]
 8003d00:	6962      	ldr	r2, [r4, #20]
 8003d02:	429a      	cmp	r2, r3
      oqp->q_wrptr = oqp->q_buffer;
 8003d04:	bf24      	itt	cs
 8003d06:	68e3      	ldrcs	r3, [r4, #12]
 8003d08:	6163      	strcs	r3, [r4, #20]
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8003d0a:	f10b 0b01 	add.w	fp, fp, #1
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    /* Inform the low side that the queue has at least one character available.*/
    if (nfy != NULL) {
 8003d0e:	b10f      	cbz	r7, 8003d14 <oqWriteTimeout.4272+0x54>
      nfy(oqp);
 8003d10:	4620      	mov	r0, r4
 8003d12:	47b8      	blx	r7
 8003d14:	f389 8811 	msr	BASEPRI, r9

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    w++;
    if (--n == 0U) {
 8003d18:	3d01      	subs	r5, #1
    }

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    w++;
 8003d1a:	f106 0601 	add.w	r6, r6, #1
    if (--n == 0U) {
 8003d1e:	d017      	beq.n	8003d50 <oqWriteTimeout.4272+0x90>
 8003d20:	2320      	movs	r3, #32
 8003d22:	f383 8811 	msr	BASEPRI, r3
  deadline = osalOsGetSystemTimeX() + timeout;

  while (true) {
    msg_t msg;

    while (oqIsFullI(oqp)) {
 8003d26:	68a3      	ldr	r3, [r4, #8]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1df      	bne.n	8003cec <oqWriteTimeout.4272+0x2c>
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8003d2c:	f11a 0f03 	cmn.w	sl, #3
 8003d30:	d812      	bhi.n	8003d58 <oqWriteTimeout.4272+0x98>
 8003d32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003d36:	6a51      	ldr	r1, [r2, #36]	; 0x24
        msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
      }
      else {
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 8003d38:	9a01      	ldr	r2, [sp, #4]
 8003d3a:	1a51      	subs	r1, r2, r1

        /* Handling the case where the system time went past the deadline,
           in this case next becomes a very high number because the system
           time is an unsigned type.*/
        if (next_timeout > timeout) {
 8003d3c:	4588      	cmp	r8, r1
 8003d3e:	d305      	bcc.n	8003d4c <oqWriteTimeout.4272+0x8c>
 8003d40:	4620      	mov	r0, r4
 8003d42:	f7ff fda5 	bl	8003890 <chThdEnqueueTimeoutS>

        msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, next_timeout);
      }

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 8003d46:	2800      	cmp	r0, #0
 8003d48:	d0ce      	beq.n	8003ce8 <oqWriteTimeout.4272+0x28>
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	f383 8811 	msr	BASEPRI, r3
      return w;
    }

    osalSysLock();
  }
}
 8003d50:	4630      	mov	r0, r6
 8003d52:	b003      	add	sp, #12
 8003d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d58:	4620      	mov	r0, r4
 8003d5a:	4641      	mov	r1, r8
 8003d5c:	f7ff fd98 	bl	8003890 <chThdEnqueueTimeoutS>

        msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, next_timeout);
      }

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 8003d60:	2800      	cmp	r0, #0
 8003d62:	d0c1      	beq.n	8003ce8 <oqWriteTimeout.4272+0x28>
 8003d64:	e7f1      	b.n	8003d4a <oqWriteTimeout.4272+0x8a>
 8003d66:	bf00      	nop
 8003d68:	f3af 8000 	nop.w
 8003d6c:	f3af 8000 	nop.w

08003d70 <_writet.8438>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
}

static size_t _writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8003d70:	3030      	adds	r0, #48	; 0x30
 8003d72:	f7ff bfa5 	b.w	8003cc0 <oqWriteTimeout.4272>
 8003d76:	bf00      	nop
 8003d78:	f3af 8000 	nop.w
 8003d7c:	f3af 8000 	nop.w

08003d80 <_write.8444>:
 * queue-level function or macro.
 */

static size_t _write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8003d80:	3030      	adds	r0, #48	; 0x30
 8003d82:	f04f 33ff 	mov.w	r3, #4294967295
 8003d86:	f7ff bf9b 	b.w	8003cc0 <oqWriteTimeout.4272>
 8003d8a:	bf00      	nop
 8003d8c:	f3af 8000 	nop.w

08003d90 <chSchReadyI>:
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8003d90:	2200      	movs	r2, #0
 8003d92:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8003d94:	4b08      	ldr	r3, [pc, #32]	; (8003db8 <chSchReadyI+0x28>)
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8003d96:	b410      	push	{r4}
 8003d98:	4604      	mov	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8003d9a:	f880 2020 	strb.w	r2, [r0, #32]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
 8003d9e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8003da0:	689a      	ldr	r2, [r3, #8]
 8003da2:	428a      	cmp	r2, r1
 8003da4:	d2fb      	bcs.n	8003d9e <chSchReadyI+0xe>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio >= tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 8003daa:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  tp->queue.prev->queue.next = tp;
  cp->queue.prev             = tp;

  return tp;
}
 8003dac:	4620      	mov	r0, r4
    cp = cp->queue.next;
  } while (cp->prio >= tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
  tp->queue.prev->queue.next = tp;
 8003dae:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8003db0:	605c      	str	r4, [r3, #4]

  return tp;
}
 8003db2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	20000ec8 	.word	0x20000ec8
 8003dbc:	f3af 8000 	nop.w

08003dc0 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8003dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 8003dc2:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8003dc4:	42a0      	cmp	r0, r4
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8003dc6:	4607      	mov	r7, r0
 8003dc8:	460d      	mov	r5, r1
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8003dca:	d020      	beq.n	8003e0e <chEvtBroadcastFlagsI+0x4e>
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 8003dcc:	2600      	movs	r6, #0
 8003dce:	e002      	b.n	8003dd6 <chEvtBroadcastFlagsI+0x16>
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
    }
    elp = elp->next;
 8003dd0:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8003dd2:	42a7      	cmp	r7, r4
 8003dd4:	d01b      	beq.n	8003e0e <chEvtBroadcastFlagsI+0x4e>
  /*lint -restore*/
    elp->flags |= flags;
 8003dd6:	68e3      	ldr	r3, [r4, #12]
 8003dd8:	432b      	orrs	r3, r5
 8003dda:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8003ddc:	b115      	cbz	r5, 8003de4 <chEvtBroadcastFlagsI+0x24>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
 8003dde:	6922      	ldr	r2, [r4, #16]
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->flags |= flags;
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8003de0:	4213      	tst	r3, r2
 8003de2:	d0f5      	beq.n	8003dd0 <chEvtBroadcastFlagsI+0x10>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
 8003de4:	6860      	ldr	r0, [r4, #4]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
 8003de6:	68a2      	ldr	r2, [r4, #8]
 8003de8:	6b41      	ldr	r1, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 8003dea:	f890 3020 	ldrb.w	r3, [r0, #32]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
 8003dee:	430a      	orrs	r2, r1
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 8003df0:	2b0a      	cmp	r3, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
 8003df2:	6342      	str	r2, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 8003df4:	d00c      	beq.n	8003e10 <chEvtBroadcastFlagsI+0x50>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8003df6:	2b0b      	cmp	r3, #11
 8003df8:	d1ea      	bne.n	8003dd0 <chEvtBroadcastFlagsI+0x10>
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8003dfa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003dfc:	401a      	ands	r2, r3

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d1e6      	bne.n	8003dd0 <chEvtBroadcastFlagsI+0x10>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 8003e02:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8003e04:	f7ff ffc4 	bl	8003d90 <chSchReadyI>
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
    }
    elp = elp->next;
 8003e08:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8003e0a:	42a7      	cmp	r7, r4
 8003e0c:	d1e3      	bne.n	8003dd6 <chEvtBroadcastFlagsI+0x16>
 8003e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chDbgCheck(tp != NULL);

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8003e10:	6a43      	ldr	r3, [r0, #36]	; 0x24
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 8003e12:	421a      	tst	r2, r3
 8003e14:	d0dc      	beq.n	8003dd0 <chEvtBroadcastFlagsI+0x10>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 8003e16:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8003e18:	f7ff ffba 	bl	8003d90 <chSchReadyI>
 8003e1c:	e7f4      	b.n	8003e08 <chEvtBroadcastFlagsI+0x48>
 8003e1e:	bf00      	nop

08003e20 <BusFault_Handler>:
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
__attribute__((weak))
void _unhandled_exception(void) {
 8003e20:	e7fe      	b.n	8003e20 <BusFault_Handler>
 8003e22:	bf00      	nop
 8003e24:	f3af 8000 	nop.w
 8003e28:	f3af 8000 	nop.w
 8003e2c:	f3af 8000 	nop.w

08003e30 <VectorD8.4231>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8003e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
 8003e34:	4d64      	ldr	r5, [pc, #400]	; (8003fc8 <VectorD8.4231+0x198>)
 8003e36:	6d6e      	ldr	r6, [r5, #84]	; 0x54
  uint32_t cr1 = u->CR1;
 8003e38:	6837      	ldr	r7, [r6, #0]
  uint32_t isr;

  /* Reading and clearing status.*/
  isr = u->ISR;
 8003e3a:	69f4      	ldr	r4, [r6, #28]
  u->ICR = isr;
 8003e3c:	6234      	str	r4, [r6, #32]

  /* Error condition detection.*/
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
 8003e3e:	0722      	lsls	r2, r4, #28
 8003e40:	d156      	bne.n	8003ef0 <VectorD8.4231+0xc0>
    set_error(sdp, isr);

  /* Special case, LIN break detection.*/
  if (isr & USART_ISR_LBDF) {
 8003e42:	05e3      	lsls	r3, r4, #23
 8003e44:	d448      	bmi.n	8003ed8 <VectorD8.4231+0xa8>
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  if (isr & USART_ISR_RXNE) {
 8003e46:	06a0      	lsls	r0, r4, #26
 8003e48:	d418      	bmi.n	8003e7c <VectorD8.4231+0x4c>
    sdIncomingDataI(sdp, (uint8_t)u->RDR & sdp->rxmask);
    osalSysUnlockFromISR();
  }

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (isr & USART_ISR_TXE)) {
 8003e4a:	0639      	lsls	r1, r7, #24
 8003e4c:	d501      	bpl.n	8003e52 <VectorD8.4231+0x22>
 8003e4e:	0622      	lsls	r2, r4, #24
 8003e50:	d469      	bmi.n	8003f26 <VectorD8.4231+0xf6>
      u->TDR = b;
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if (isr & USART_ISR_TC) {
 8003e52:	0663      	lsls	r3, r4, #25
 8003e54:	d50e      	bpl.n	8003e74 <VectorD8.4231+0x44>
 8003e56:	2320      	movs	r3, #32
 8003e58:	f383 8811 	msr	BASEPRI, r3
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
 8003e5c:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8003e5e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8003e60:	4859      	ldr	r0, [pc, #356]	; (8003fc8 <VectorD8.4231+0x198>)
 8003e62:	429a      	cmp	r2, r3
 8003e64:	f000 808b 	beq.w	8003f7e <VectorD8.4231+0x14e>
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8003e68:	f027 0740 	bic.w	r7, r7, #64	; 0x40
 8003e6c:	6037      	str	r7, [r6, #0]
 8003e6e:	2300      	movs	r3, #0
 8003e70:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);

  OSAL_IRQ_EPILOGUE();
}
 8003e74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);

  OSAL_IRQ_EPILOGUE();
 8003e78:	f7ff ba3a 	b.w	80032f0 <_port_irq_epilogue>
 8003e7c:	2320      	movs	r3, #32
 8003e7e:	f383 8811 	msr	BASEPRI, r3
  }

  /* Data available.*/
  if (isr & USART_ISR_RXNE) {
    osalSysLockFromISR();
    sdIncomingDataI(sdp, (uint8_t)u->RDR & sdp->rxmask);
 8003e82:	8cb2      	ldrh	r2, [r6, #36]	; 0x24
 8003e84:	f895 105c 	ldrb.w	r1, [r5, #92]	; 0x5c
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8003e88:	696b      	ldr	r3, [r5, #20]
 8003e8a:	ea01 0802 	and.w	r8, r1, r2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d07e      	beq.n	8003f90 <VectorD8.4231+0x160>
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {

  osalDbgCheckClassI();

  if (iqIsFullI(iqp)) {
 8003e92:	6a2b      	ldr	r3, [r5, #32]
 8003e94:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003e96:	484c      	ldr	r0, [pc, #304]	; (8003fc8 <VectorD8.4231+0x198>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d07e      	beq.n	8003f9a <VectorD8.4231+0x16a>
    return MSG_TIMEOUT;
  }

  iqp->q_counter++;
 8003e9c:	6968      	ldr	r0, [r5, #20]
 8003e9e:	4a4a      	ldr	r2, [pc, #296]	; (8003fc8 <VectorD8.4231+0x198>)
  *iqp->q_wrptr++ = b;
 8003ea0:	1c59      	adds	r1, r3, #1

  if (iqIsFullI(iqp)) {
    return MSG_TIMEOUT;
  }

  iqp->q_counter++;
 8003ea2:	3001      	adds	r0, #1
  *iqp->q_wrptr++ = b;
 8003ea4:	6229      	str	r1, [r5, #32]

  if (iqIsFullI(iqp)) {
    return MSG_TIMEOUT;
  }

  iqp->q_counter++;
 8003ea6:	6168      	str	r0, [r5, #20]
  *iqp->q_wrptr++ = b;
 8003ea8:	f883 8000 	strb.w	r8, [r3]
  if (iqp->q_wrptr >= iqp->q_top) {
 8003eac:	6a29      	ldr	r1, [r5, #32]
 8003eae:	69eb      	ldr	r3, [r5, #28]
 8003eb0:	4299      	cmp	r1, r3
 8003eb2:	d261      	bcs.n	8003f78 <VectorD8.4231+0x148>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 8003eb4:	4944      	ldr	r1, [pc, #272]	; (8003fc8 <VectorD8.4231+0x198>)
 8003eb6:	68eb      	ldr	r3, [r5, #12]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8003eb8:	f101 020c 	add.w	r2, r1, #12
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d007      	beq.n	8003ed0 <VectorD8.4231+0xa0>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8003ec0:	6818      	ldr	r0, [r3, #0]
 8003ec2:	60c8      	str	r0, [r1, #12]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8003ec4:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8003ec6:	6042      	str	r2, [r0, #4]
  (void) chSchReadyI(tp);
 8003ec8:	4618      	mov	r0, r3

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8003eca:	6259      	str	r1, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8003ecc:	f7ff ff60 	bl	8003d90 <chSchReadyI>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	f383 8811 	msr	BASEPRI, r3
 8003ed6:	e7b8      	b.n	8003e4a <VectorD8.4231+0x1a>
 8003ed8:	2320      	movs	r3, #32
 8003eda:	f383 8811 	msr	BASEPRI, r3
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8003ede:	483b      	ldr	r0, [pc, #236]	; (8003fcc <VectorD8.4231+0x19c>)
 8003ee0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ee4:	f7ff ff6c 	bl	8003dc0 <chEvtBroadcastFlagsI>
 8003ee8:	2300      	movs	r3, #0
 8003eea:	f383 8811 	msr	BASEPRI, r3
 8003eee:	e7aa      	b.n	8003e46 <VectorD8.4231+0x16>
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] isr       USART ISR register value
 */
static void set_error(SerialDriver *sdp, uint32_t isr) {
  eventflags_t sts = 0;
 8003ef0:	f014 0f08 	tst.w	r4, #8
 8003ef4:	bf14      	ite	ne
 8003ef6:	2180      	movne	r1, #128	; 0x80
 8003ef8:	2100      	moveq	r1, #0

  if (isr & USART_ISR_ORE)
    sts |= SD_OVERRUN_ERROR;
  if (isr & USART_ISR_PE)
 8003efa:	07e3      	lsls	r3, r4, #31
    sts |= SD_PARITY_ERROR;
 8003efc:	bf48      	it	mi
 8003efe:	f041 0120 	orrmi.w	r1, r1, #32
  if (isr & USART_ISR_FE)
 8003f02:	07a0      	lsls	r0, r4, #30
    sts |= SD_FRAMING_ERROR;
 8003f04:	bf48      	it	mi
 8003f06:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (isr & USART_ISR_NE)
 8003f0a:	0762      	lsls	r2, r4, #29
    sts |= SD_NOISE_ERROR;
 8003f0c:	bf48      	it	mi
 8003f0e:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 8003f12:	2320      	movs	r3, #32
 8003f14:	f383 8811 	msr	BASEPRI, r3
 8003f18:	482c      	ldr	r0, [pc, #176]	; (8003fcc <VectorD8.4231+0x19c>)
 8003f1a:	f7ff ff51 	bl	8003dc0 <chEvtBroadcastFlagsI>
 8003f1e:	2300      	movs	r3, #0
 8003f20:	f383 8811 	msr	BASEPRI, r3
 8003f24:	e78d      	b.n	8003e42 <VectorD8.4231+0x12>
 8003f26:	2320      	movs	r3, #32
 8003f28:	f383 8811 	msr	BASEPRI, r3
msg_t oqGetI(output_queue_t *oqp) {
  uint8_t b;

  osalDbgCheckClassI();

  if (oqIsEmptyI(oqp)) {
 8003f2c:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8003f2e:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8003f30:	4825      	ldr	r0, [pc, #148]	; (8003fc8 <VectorD8.4231+0x198>)
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d03b      	beq.n	8003fae <VectorD8.4231+0x17e>
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
 8003f36:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8003f38:	4823      	ldr	r0, [pc, #140]	; (8003fc8 <VectorD8.4231+0x198>)
 8003f3a:	1c51      	adds	r1, r2, #1
 8003f3c:	63a9      	str	r1, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
 8003f3e:	6c29      	ldr	r1, [r5, #64]	; 0x40
  if (oqIsEmptyI(oqp)) {
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	64aa      	str	r2, [r5, #72]	; 0x48
  if (oqp->q_rdptr >= oqp->q_top) {
 8003f44:	428a      	cmp	r2, r1
  if (oqIsEmptyI(oqp)) {
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 8003f46:	f893 8000 	ldrb.w	r8, [r3]
  if (oqp->q_rdptr >= oqp->q_top) {
 8003f4a:	d301      	bcc.n	8003f50 <VectorD8.4231+0x120>
    oqp->q_rdptr = oqp->q_buffer;
 8003f4c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003f4e:	6483      	str	r3, [r0, #72]	; 0x48
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 8003f50:	491d      	ldr	r1, [pc, #116]	; (8003fc8 <VectorD8.4231+0x198>)
 8003f52:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003f54:	f101 0230 	add.w	r2, r1, #48	; 0x30
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d007      	beq.n	8003f6c <VectorD8.4231+0x13c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8003f5c:	6818      	ldr	r0, [r3, #0]
 8003f5e:	6308      	str	r0, [r1, #48]	; 0x30

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8003f60:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8003f62:	6042      	str	r2, [r0, #4]
  (void) chSchReadyI(tp);
 8003f64:	4618      	mov	r0, r3

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8003f66:	6259      	str	r1, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8003f68:	f7ff ff12 	bl	8003d90 <chSchReadyI>
    if (b < MSG_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
    }
    else
      u->TDR = b;
 8003f6c:	f8a6 8028 	strh.w	r8, [r6, #40]	; 0x28
 8003f70:	2300      	movs	r3, #0
 8003f72:	f383 8811 	msr	BASEPRI, r3
 8003f76:	e76c      	b.n	8003e52 <VectorD8.4231+0x22>
  }

  iqp->q_counter++;
  *iqp->q_wrptr++ = b;
  if (iqp->q_wrptr >= iqp->q_top) {
    iqp->q_wrptr = iqp->q_buffer;
 8003f78:	6993      	ldr	r3, [r2, #24]
 8003f7a:	6213      	str	r3, [r2, #32]
 8003f7c:	e79a      	b.n	8003eb4 <VectorD8.4231+0x84>
  }

  /* Physical transmission end.*/
  if (isr & USART_ISR_TC) {
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
 8003f7e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f43f af71 	beq.w	8003e68 <VectorD8.4231+0x38>
 8003f86:	3004      	adds	r0, #4
 8003f88:	2110      	movs	r1, #16
 8003f8a:	f7ff ff19 	bl	8003dc0 <chEvtBroadcastFlagsI>
 8003f8e:	e76b      	b.n	8003e68 <VectorD8.4231+0x38>
 8003f90:	480e      	ldr	r0, [pc, #56]	; (8003fcc <VectorD8.4231+0x19c>)
 8003f92:	2104      	movs	r1, #4
 8003f94:	f7ff ff14 	bl	8003dc0 <chEvtBroadcastFlagsI>
 8003f98:	e77b      	b.n	8003e92 <VectorD8.4231+0x62>
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {

  osalDbgCheckClassI();

  if (iqIsFullI(iqp)) {
 8003f9a:	6942      	ldr	r2, [r0, #20]
 8003f9c:	2a00      	cmp	r2, #0
 8003f9e:	f43f af7d 	beq.w	8003e9c <VectorD8.4231+0x6c>
 8003fa2:	3004      	adds	r0, #4
 8003fa4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003fa8:	f7ff ff0a 	bl	8003dc0 <chEvtBroadcastFlagsI>
 8003fac:	e790      	b.n	8003ed0 <VectorD8.4231+0xa0>
msg_t oqGetI(output_queue_t *oqp) {
  uint8_t b;

  osalDbgCheckClassI();

  if (oqIsEmptyI(oqp)) {
 8003fae:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003fb0:	2a00      	cmp	r2, #0
 8003fb2:	d0c0      	beq.n	8003f36 <VectorD8.4231+0x106>
 8003fb4:	3004      	adds	r0, #4
 8003fb6:	2108      	movs	r1, #8
 8003fb8:	f7ff ff02 	bl	8003dc0 <chEvtBroadcastFlagsI>
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
    if (b < MSG_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8003fbc:	f027 03c0 	bic.w	r3, r7, #192	; 0xc0
 8003fc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fc4:	6033      	str	r3, [r6, #0]
 8003fc6:	e7d3      	b.n	8003f70 <VectorD8.4231+0x140>
 8003fc8:	20000e60 	.word	0x20000e60
 8003fcc:	20000e64 	.word	0x20000e64

08003fd0 <_readt.8426>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
}

static size_t _readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8003fd0:	300c      	adds	r0, #12
 8003fd2:	f7ff bced 	b.w	80039b0 <iqReadTimeout>
 8003fd6:	bf00      	nop
 8003fd8:	f3af 8000 	nop.w
 8003fdc:	f3af 8000 	nop.w

08003fe0 <_read.8433>:
                        n, TIME_INFINITE);
}

static size_t _read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8003fe0:	300c      	adds	r0, #12
 8003fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe6:	f7ff bce3 	b.w	80039b0 <iqReadTimeout>
 8003fea:	bf00      	nop
 8003fec:	f3af 8000 	nop.w

08003ff0 <softReset>:
 PRO1_CLEAR
 PRO2_CLEAR
 #endif

 // Button pin
 palSetPadMode(BUTTON_PORT,BUTTON_PIN,PAL_MODE_INPUT);
 8003ff0:	48b7      	ldr	r0, [pc, #732]	; (80042d0 <softReset+0x2e0>)
 }

// Initializes the system
void softReset(void)
 {
 8003ff2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 PRO1_CLEAR
 PRO2_CLEAR
 #endif

 // Button pin
 palSetPadMode(BUTTON_PORT,BUTTON_PIN,PAL_MODE_INPUT);
 8003ff6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003ffa:	2200      	movs	r2, #0

 // DIO pins
 for(i=0;i<NDIO;i++)
      {
	  // Set on input mode
      palSetPadMode(DIO_PORT,DIO_PIN0+i,PAL_MODE_INPUT_PULLDOWN);
 8003ffc:	4606      	mov	r6, r0
 8003ffe:	f7ff f8ff 	bl	8003200 <_pal_lld_setgroupmode>
void dioInit(void)
 {
 int i;

 // DIO pins
 for(i=0;i<NDIO;i++)
 8004002:	2400      	movs	r4, #0
      {
	  // Set on input mode
      palSetPadMode(DIO_PORT,DIO_PIN0+i,PAL_MODE_INPUT_PULLDOWN);
 8004004:	2501      	movs	r5, #1
 8004006:	fa05 f104 	lsl.w	r1, r5, r4
 800400a:	48b1      	ldr	r0, [pc, #708]	; (80042d0 <softReset+0x2e0>)
 800400c:	2240      	movs	r2, #64	; 0x40
 800400e:	f7ff f8f7 	bl	8003200 <_pal_lld_setgroupmode>
 8004012:	f104 0310 	add.w	r3, r4, #16
void dioInit(void)
 {
 int i;

 // DIO pins
 for(i=0;i<NDIO;i++)
 8004016:	3401      	adds	r4, #1
      {
	  // Set on input mode
      palSetPadMode(DIO_PORT,DIO_PIN0+i,PAL_MODE_INPUT_PULLDOWN);
      // Set to zero
      palWritePad(DIO_PORT,DIO_PIN0+i,PAL_LOW);
 8004018:	fa05 f303 	lsl.w	r3, r5, r3
void dioInit(void)
 {
 int i;

 // DIO pins
 for(i=0;i<NDIO;i++)
 800401c:	2c0d      	cmp	r4, #13
      {
	  // Set on input mode
      palSetPadMode(DIO_PORT,DIO_PIN0+i,PAL_MODE_INPUT_PULLDOWN);
      // Set to zero
      palWritePad(DIO_PORT,DIO_PIN0+i,PAL_LOW);
 800401e:	61b3      	str	r3, [r6, #24]
void dioInit(void)
 {
 int i;

 // DIO pins
 for(i=0;i<NDIO;i++)
 8004020:	d1f1      	bne.n	8004006 <softReset+0x16>
void analogInit(void)
 {
 // Configure ADCs

 // ADC clocks
 BIT_SET(RCC->AHBENR,RCC_AHBENR_ADC12EN);  // Turn ON ADC12 clock
 8004022:	49ac      	ldr	r1, [pc, #688]	; (80042d4 <softReset+0x2e4>)
 BIT_SET(RCC->AHBENR,RCC_AHBENR_ADC34EN);  // Turn ON ADC34 clock

 // ADC frequency
 BIT_FIELD_WRITE(ADC1_2_COMMON->CCR,16,3,ADC_CLOCK);  // Set freq for ADC1,2
 8004024:	4bac      	ldr	r3, [pc, #688]	; (80042d8 <softReset+0x2e8>)
void analogInit(void)
 {
 // Configure ADCs

 // ADC clocks
 BIT_SET(RCC->AHBENR,RCC_AHBENR_ADC12EN);  // Turn ON ADC12 clock
 8004026:	6948      	ldr	r0, [r1, #20]
 BIT_SET(RCC->AHBENR,RCC_AHBENR_ADC34EN);  // Turn ON ADC34 clock

 // ADC frequency
 BIT_FIELD_WRITE(ADC1_2_COMMON->CCR,16,3,ADC_CLOCK);  // Set freq for ADC1,2
 BIT_FIELD_WRITE(ADC3_4_COMMON->CCR,16,3,ADC_CLOCK);  // Set freq for ADC3,4
 8004028:	4aac      	ldr	r2, [pc, #688]	; (80042dc <softReset+0x2ec>)
void analogInit(void)
 {
 // Configure ADCs

 // ADC clocks
 BIT_SET(RCC->AHBENR,RCC_AHBENR_ADC12EN);  // Turn ON ADC12 clock
 800402a:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 800402e:	6148      	str	r0, [r1, #20]
 BIT_SET(RCC->AHBENR,RCC_AHBENR_ADC34EN);  // Turn ON ADC34 clock
 8004030:	6948      	ldr	r0, [r1, #20]
 8004032:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 8004036:	6148      	str	r0, [r1, #20]

 // ADC frequency
 BIT_FIELD_WRITE(ADC1_2_COMMON->CCR,16,3,ADC_CLOCK);  // Set freq for ADC1,2
 8004038:	6899      	ldr	r1, [r3, #8]
 800403a:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 800403e:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8004042:	6099      	str	r1, [r3, #8]
 BIT_FIELD_WRITE(ADC3_4_COMMON->CCR,16,3,ADC_CLOCK);  // Set freq for ADC3,4
 8004044:	6891      	ldr	r1, [r2, #8]
 8004046:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 800404a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800404e:	6091      	str	r1, [r2, #8]

 // ADC Single operation
 BIT_FIELD_WRITE(ADC1_2_COMMON->CCR,0,31,0); // Single 1,2
 8004050:	6899      	ldr	r1, [r3, #8]
 8004052:	f021 011f 	bic.w	r1, r1, #31
 8004056:	6099      	str	r1, [r3, #8]
 BIT_FIELD_WRITE(ADC3_4_COMMON->CCR,0,31,0); // Single 1,2
 8004058:	6891      	ldr	r1, [r2, #8]
 800405a:	f021 011f 	bic.w	r1, r1, #31
 800405e:	6091      	str	r1, [r2, #8]

 // Enable the reference on ADC1,2
 BIT_SET(ADC1_2_COMMON->CCR,ADC12_CCR_VREFEN);
 8004060:	6899      	ldr	r1, [r3, #8]

// Activate the ADC
void adcActivate(ADC_TypeDef *adc)
 {
 // Set activation flag ADEN
 adc->CR |= 1;
 8004062:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 // ADC Single operation
 BIT_FIELD_WRITE(ADC1_2_COMMON->CCR,0,31,0); // Single 1,2
 BIT_FIELD_WRITE(ADC3_4_COMMON->CCR,0,31,0); // Single 1,2

 // Enable the reference on ADC1,2
 BIT_SET(ADC1_2_COMMON->CCR,ADC12_CCR_VREFEN);
 8004066:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 800406a:	6099      	str	r1, [r3, #8]

// Activate the ADC
void adcActivate(ADC_TypeDef *adc)
 {
 // Set activation flag ADEN
 adc->CR |= 1;
 800406c:	6893      	ldr	r3, [r2, #8]
 800406e:	f043 0301 	orr.w	r3, r3, #1
 8004072:	6093      	str	r3, [r2, #8]

 // Wait for ADRDY flag
 while (!((adc->ISR) & 1)) ;
 8004074:	6813      	ldr	r3, [r2, #0]
 8004076:	07dc      	lsls	r4, r3, #31
 8004078:	d5fc      	bpl.n	8004074 <softReset+0x84>

// Activate the ADC
void adcActivate(ADC_TypeDef *adc)
 {
 // Set activation flag ADEN
 adc->CR |= 1;
 800407a:	4a99      	ldr	r2, [pc, #612]	; (80042e0 <softReset+0x2f0>)
 800407c:	6893      	ldr	r3, [r2, #8]
 800407e:	f043 0301 	orr.w	r3, r3, #1
 8004082:	6093      	str	r3, [r2, #8]

 // Wait for ADRDY flag
 while (!((adc->ISR) & 1)) ;
 8004084:	6813      	ldr	r3, [r2, #0]
 8004086:	07d8      	lsls	r0, r3, #31
 8004088:	d5fc      	bpl.n	8004084 <softReset+0x94>

// Activate the ADC
void adcActivate(ADC_TypeDef *adc)
 {
 // Set activation flag ADEN
 adc->CR |= 1;
 800408a:	4a96      	ldr	r2, [pc, #600]	; (80042e4 <softReset+0x2f4>)
 800408c:	6893      	ldr	r3, [r2, #8]
 800408e:	f043 0301 	orr.w	r3, r3, #1
 8004092:	6093      	str	r3, [r2, #8]

 // Wait for ADRDY flag
 while (!((adc->ISR) & 1)) ;
 8004094:	6813      	ldr	r3, [r2, #0]
 8004096:	07d9      	lsls	r1, r3, #31
 8004098:	d5fc      	bpl.n	8004094 <softReset+0xa4>

// Activate the ADC
void adcActivate(ADC_TypeDef *adc)
 {
 // Set activation flag ADEN
 adc->CR |= 1;
 800409a:	4a93      	ldr	r2, [pc, #588]	; (80042e8 <softReset+0x2f8>)
 800409c:	6893      	ldr	r3, [r2, #8]
 800409e:	f043 0301 	orr.w	r3, r3, #1
 80040a2:	6093      	str	r3, [r2, #8]

 // Wait for ADRDY flag
 while (!((adc->ISR) & 1)) ;
 80040a4:	6813      	ldr	r3, [r2, #0]
 80040a6:	4c90      	ldr	r4, [pc, #576]	; (80042e8 <softReset+0x2f8>)
 80040a8:	07db      	lsls	r3, r3, #31
 80040aa:	d5fb      	bpl.n	80040a4 <softReset+0xb4>
//      adc  : Pointer to ADC to use
//   channel : Channel to read 1..
void adcSetChannel(ADC_TypeDef *adc,int channel)
 {
 // Configure for just one conversion
 BIT_FIELD_WRITE(adc->SQR1,0,15,0);
 80040ac:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
 adcActivate(ADC4);

 // Configure all four ADCs

 // ADC1 will be AD1 at PA0(A0) on channel #1
 palSetPadMode(GPIOA,0,PAL_MODE_INPUT_ANALOG);
 80040b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040b4:	2101      	movs	r1, #1
 80040b6:	2203      	movs	r2, #3
 80040b8:	f7ff f8a2 	bl	8003200 <_pal_lld_setgroupmode>
//      adc  : Pointer to ADC to use
//   channel : Channel to read 1..
void adcSetChannel(ADC_TypeDef *adc,int channel)
 {
 // Configure for just one conversion
 BIT_FIELD_WRITE(adc->SQR1,0,15,0);
 80040bc:	6b2b      	ldr	r3, [r5, #48]	; 0x30

// Configure opamp
void adcOpamp(OPAMP_TypeDef *opamp,int nii)
 {
 // Enable clocks
 BIT_SET(RCC->APB2ENR,RCC_APB2ENR_SYSCFGEN);
 80040be:	4e85      	ldr	r6, [pc, #532]	; (80042d4 <softReset+0x2e4>)
//      adc  : Pointer to ADC to use
//   channel : Channel to read 1..
void adcSetChannel(ADC_TypeDef *adc,int channel)
 {
 // Configure for just one conversion
 BIT_FIELD_WRITE(adc->SQR1,0,15,0);
 80040c0:	f023 030f 	bic.w	r3, r3, #15
 80040c4:	632b      	str	r3, [r5, #48]	; 0x30
 // Set channel to use
 BIT_FIELD_WRITE(adc->SQR1,6,31,channel);
 80040c6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80040c8:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
 80040cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040d0:	632b      	str	r3, [r5, #48]	; 0x30
 // ADC1 will be AD1 at PA0(A0) on channel #1
 palSetPadMode(GPIOA,0,PAL_MODE_INPUT_ANALOG);
 adcSetChannel(ADC1,1);

 // ADC2 will be Opamp2 output PA6(D12) on channel #3
 palSetPadMode(GPIOA,6,PAL_MODE_INPUT_ANALOG);
 80040d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040d6:	2140      	movs	r1, #64	; 0x40
 80040d8:	2203      	movs	r2, #3
 80040da:	f7ff f891 	bl	8003200 <_pal_lld_setgroupmode>
//      adc  : Pointer to ADC to use
//   channel : Channel to read 1..
void adcSetChannel(ADC_TypeDef *adc,int channel)
 {
 // Configure for just one conversion
 BIT_FIELD_WRITE(adc->SQR1,0,15,0);
 80040de:	4b80      	ldr	r3, [pc, #512]	; (80042e0 <softReset+0x2f0>)

 // ADC2 will be Opamp2 output PA6(D12) on channel #3
 palSetPadMode(GPIOA,6,PAL_MODE_INPUT_ANALOG);
  adcSetChannel(ADC2,3);
 // Associated to AD3 PB0(A3) on opamp2 input #2
 palSetPadMode(GPIOB,0,PAL_MODE_INPUT_ANALOG);
 80040e0:	4882      	ldr	r0, [pc, #520]	; (80042ec <softReset+0x2fc>)
//      adc  : Pointer to ADC to use
//   channel : Channel to read 1..
void adcSetChannel(ADC_TypeDef *adc,int channel)
 {
 // Configure for just one conversion
 BIT_FIELD_WRITE(adc->SQR1,0,15,0);
 80040e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040e4:	f022 020f 	bic.w	r2, r2, #15
 80040e8:	631a      	str	r2, [r3, #48]	; 0x30
 // Set channel to use
 BIT_FIELD_WRITE(adc->SQR1,6,31,channel);
 80040ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040ec:	f422 62f8 	bic.w	r2, r2, #1984	; 0x7c0
 80040f0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80040f4:	631a      	str	r2, [r3, #48]	; 0x30

 // ADC2 will be Opamp2 output PA6(D12) on channel #3
 palSetPadMode(GPIOA,6,PAL_MODE_INPUT_ANALOG);
  adcSetChannel(ADC2,3);
 // Associated to AD3 PB0(A3) on opamp2 input #2
 palSetPadMode(GPIOB,0,PAL_MODE_INPUT_ANALOG);
 80040f6:	2101      	movs	r1, #1
 80040f8:	2203      	movs	r2, #3
 80040fa:	f7ff f881 	bl	8003200 <_pal_lld_setgroupmode>

// Configure opamp
void adcOpamp(OPAMP_TypeDef *opamp,int nii)
 {
 // Enable clocks
 BIT_SET(RCC->APB2ENR,RCC_APB2ENR_SYSCFGEN);
 80040fe:	69b2      	ldr	r2, [r6, #24]
 // Enable opamp
 BIT_SET(opamp->CSR,OPAMP_CSR_OPAMPxEN);
 8004100:	4b7b      	ldr	r3, [pc, #492]	; (80042f0 <softReset+0x300>)

// Configure opamp
void adcOpamp(OPAMP_TypeDef *opamp,int nii)
 {
 // Enable clocks
 BIT_SET(RCC->APB2ENR,RCC_APB2ENR_SYSCFGEN);
 8004102:	f042 0201 	orr.w	r2, r2, #1
 8004106:	61b2      	str	r2, [r6, #24]
 // Enable opamp
 BIT_SET(opamp->CSR,OPAMP_CSR_OPAMPxEN);
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	f042 0201 	orr.w	r2, r2, #1
 800410e:	601a      	str	r2, [r3, #0]
 // Set as follower
 BIT_FIELD_WRITE(opamp->CSR,5,3,3);
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004116:	601a      	str	r2, [r3, #0]
 // Set nii
 BIT_FIELD_WRITE(opamp->CSR,2,3,nii);
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	f022 020c 	bic.w	r2, r2, #12
 800411e:	f042 0208 	orr.w	r2, r2, #8
 8004122:	601a      	str	r2, [r3, #0]
  adcSetChannel(ADC2,3);
 // Associated to AD3 PB0(A3) on opamp2 input #2
 palSetPadMode(GPIOB,0,PAL_MODE_INPUT_ANALOG);
 adcOpamp(OPAMP2,2);
 // And AD5 PA7(D11) on opamp2 input #3
 palSetPadMode(GPIOA,7,PAL_MODE_INPUT_ANALOG);
 8004124:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004128:	2180      	movs	r1, #128	; 0x80
 800412a:	2203      	movs	r2, #3
 800412c:	f7ff f868 	bl	8003200 <_pal_lld_setgroupmode>
 //adcOpamp(OPAMP2,3);
 // And AD6 PB14 on opamp2 (ch#3) input #1
 palSetPadMode(GPIOB,14,PAL_MODE_INPUT_ANALOG);
 8004130:	486e      	ldr	r0, [pc, #440]	; (80042ec <softReset+0x2fc>)
 8004132:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004136:	2203      	movs	r2, #3
 8004138:	f7ff f862 	bl	8003200 <_pal_lld_setgroupmode>
 //adcOpamp(OPAMP2,1);

 // ADC3 will be Opamp3 output PB1 on channel #1
 palSetPadMode(GPIOB,1,PAL_MODE_INPUT_ANALOG);
 800413c:	486b      	ldr	r0, [pc, #428]	; (80042ec <softReset+0x2fc>)
 800413e:	2102      	movs	r1, #2
 8004140:	2203      	movs	r2, #3
 8004142:	f7ff f85d 	bl	8003200 <_pal_lld_setgroupmode>
//      adc  : Pointer to ADC to use
//   channel : Channel to read 1..
void adcSetChannel(ADC_TypeDef *adc,int channel)
 {
 // Configure for just one conversion
 BIT_FIELD_WRITE(adc->SQR1,0,15,0);
 8004146:	4b67      	ldr	r3, [pc, #412]	; (80042e4 <softReset+0x2f4>)
 8004148:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800414a:	f022 020f 	bic.w	r2, r2, #15
 800414e:	631a      	str	r2, [r3, #48]	; 0x30
 // Set channel to use
 BIT_FIELD_WRITE(adc->SQR1,6,31,channel);
 8004150:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004152:	f422 62f8 	bic.w	r2, r2, #1984	; 0x7c0
 8004156:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800415a:	631a      	str	r2, [r3, #48]	; 0x30

 // ADC3 will be Opamp3 output PB1 on channel #1
 palSetPadMode(GPIOB,1,PAL_MODE_INPUT_ANALOG);
 adcSetChannel(ADC3,1);
 // Associated to AD2 PA1(A1) on opamp3 (ch#1) input #2
 palSetPadMode(GPIOA,1,PAL_MODE_INPUT_ANALOG);
 800415c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004160:	2102      	movs	r1, #2
 8004162:	2203      	movs	r2, #3
 8004164:	f7ff f84c 	bl	8003200 <_pal_lld_setgroupmode>

// Configure opamp
void adcOpamp(OPAMP_TypeDef *opamp,int nii)
 {
 // Enable clocks
 BIT_SET(RCC->APB2ENR,RCC_APB2ENR_SYSCFGEN);
 8004168:	69b2      	ldr	r2, [r6, #24]
 // Enable opamp
 BIT_SET(opamp->CSR,OPAMP_CSR_OPAMPxEN);
 800416a:	4b62      	ldr	r3, [pc, #392]	; (80042f4 <softReset+0x304>)
 adcSetChannel(ADC3,1);
 // Associated to AD2 PA1(A1) on opamp3 (ch#1) input #2
 palSetPadMode(GPIOA,1,PAL_MODE_INPUT_ANALOG);
 adcOpamp(OPAMP3,1);
 // And AD7 PB13 on opamp3 (ch#1) input #0
 palSetPadMode(GPIOB,13,PAL_MODE_INPUT_ANALOG);
 800416c:	485f      	ldr	r0, [pc, #380]	; (80042ec <softReset+0x2fc>)

// Configure opamp
void adcOpamp(OPAMP_TypeDef *opamp,int nii)
 {
 // Enable clocks
 BIT_SET(RCC->APB2ENR,RCC_APB2ENR_SYSCFGEN);
 800416e:	f042 0201 	orr.w	r2, r2, #1
 8004172:	61b2      	str	r2, [r6, #24]
 // Enable opamp
 BIT_SET(opamp->CSR,OPAMP_CSR_OPAMPxEN);
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	f042 0201 	orr.w	r2, r2, #1
 800417a:	601a      	str	r2, [r3, #0]
 // Set as follower
 BIT_FIELD_WRITE(opamp->CSR,5,3,3);
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004182:	601a      	str	r2, [r3, #0]
 // Set nii
 BIT_FIELD_WRITE(opamp->CSR,2,3,nii);
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	f022 020c 	bic.w	r2, r2, #12
 800418a:	f042 0204 	orr.w	r2, r2, #4
 800418e:	601a      	str	r2, [r3, #0]
 adcSetChannel(ADC3,1);
 // Associated to AD2 PA1(A1) on opamp3 (ch#1) input #2
 palSetPadMode(GPIOA,1,PAL_MODE_INPUT_ANALOG);
 adcOpamp(OPAMP3,1);
 // And AD7 PB13 on opamp3 (ch#1) input #0
 palSetPadMode(GPIOB,13,PAL_MODE_INPUT_ANALOG);
 8004190:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004194:	2203      	movs	r2, #3
 8004196:	f7ff f833 	bl	8003200 <_pal_lld_setgroupmode>
 //adcOpamp(OPAMP3,0);

 // ADC4 will be Opamp4 output PB12 on channel #3
 palSetPadMode(GPIOB,12,PAL_MODE_INPUT_ANALOG);
 800419a:	4854      	ldr	r0, [pc, #336]	; (80042ec <softReset+0x2fc>)
 800419c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80041a0:	2203      	movs	r2, #3
 80041a2:	f7ff f82d 	bl	8003200 <_pal_lld_setgroupmode>
//      adc  : Pointer to ADC to use
//   channel : Channel to read 1..
void adcSetChannel(ADC_TypeDef *adc,int channel)
 {
 // Configure for just one conversion
 BIT_FIELD_WRITE(adc->SQR1,0,15,0);
 80041a6:	6b23      	ldr	r3, [r4, #48]	; 0x30

 // ADC4 will be Opamp4 output PB12 on channel #3
 palSetPadMode(GPIOB,12,PAL_MODE_INPUT_ANALOG);
 adcSetChannel(ADC4,3);
 // Associated to AD4 PB11 on opamp input #1
 palSetPadMode(GPIOB,11,PAL_MODE_INPUT_ANALOG);
 80041a8:	4850      	ldr	r0, [pc, #320]	; (80042ec <softReset+0x2fc>)
//      adc  : Pointer to ADC to use
//   channel : Channel to read 1..
void adcSetChannel(ADC_TypeDef *adc,int channel)
 {
 // Configure for just one conversion
 BIT_FIELD_WRITE(adc->SQR1,0,15,0);
 80041aa:	f023 030f 	bic.w	r3, r3, #15
 80041ae:	6323      	str	r3, [r4, #48]	; 0x30
 // Set channel to use
 BIT_FIELD_WRITE(adc->SQR1,6,31,channel);
 80041b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80041b2:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
 80041b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041ba:	6323      	str	r3, [r4, #48]	; 0x30

 // ADC4 will be Opamp4 output PB12 on channel #3
 palSetPadMode(GPIOB,12,PAL_MODE_INPUT_ANALOG);
 adcSetChannel(ADC4,3);
 // Associated to AD4 PB11 on opamp input #1
 palSetPadMode(GPIOB,11,PAL_MODE_INPUT_ANALOG);
 80041bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80041c0:	2203      	movs	r2, #3
 80041c2:	f7ff f81d 	bl	8003200 <_pal_lld_setgroupmode>

// Configure opamp
void adcOpamp(OPAMP_TypeDef *opamp,int nii)
 {
 // Enable clocks
 BIT_SET(RCC->APB2ENR,RCC_APB2ENR_SYSCFGEN);
 80041c6:	69b2      	ldr	r2, [r6, #24]
 // Enable opamp
 BIT_SET(opamp->CSR,OPAMP_CSR_OPAMPxEN);
 80041c8:	4b4b      	ldr	r3, [pc, #300]	; (80042f8 <softReset+0x308>)
 adcSetChannel(ADC4,3);
 // Associated to AD4 PB11 on opamp input #1
 palSetPadMode(GPIOB,11,PAL_MODE_INPUT_ANALOG);
 adcOpamp(OPAMP4,1);
 // Or AD8 at PB15 on channel #5
 palSetPadMode(GPIOB,15,PAL_MODE_INPUT_ANALOG);
 80041ca:	4848      	ldr	r0, [pc, #288]	; (80042ec <softReset+0x2fc>)

// Configure opamp
void adcOpamp(OPAMP_TypeDef *opamp,int nii)
 {
 // Enable clocks
 BIT_SET(RCC->APB2ENR,RCC_APB2ENR_SYSCFGEN);
 80041cc:	f042 0201 	orr.w	r2, r2, #1
 80041d0:	61b2      	str	r2, [r6, #24]
 // Enable opamp
 BIT_SET(opamp->CSR,OPAMP_CSR_OPAMPxEN);
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	f042 0201 	orr.w	r2, r2, #1
 80041d8:	601a      	str	r2, [r3, #0]
 // Set as follower
 BIT_FIELD_WRITE(opamp->CSR,5,3,3);
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80041e0:	601a      	str	r2, [r3, #0]
 // Set nii
 BIT_FIELD_WRITE(opamp->CSR,2,3,nii);
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	f022 020c 	bic.w	r2, r2, #12
 80041e8:	f042 0204 	orr.w	r2, r2, #4
 80041ec:	601a      	str	r2, [r3, #0]
 adcSetChannel(ADC4,3);
 // Associated to AD4 PB11 on opamp input #1
 palSetPadMode(GPIOB,11,PAL_MODE_INPUT_ANALOG);
 adcOpamp(OPAMP4,1);
 // Or AD8 at PB15 on channel #5
 palSetPadMode(GPIOB,15,PAL_MODE_INPUT_ANALOG);
 80041ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80041f2:	2203      	movs	r2, #3
 80041f4:	f7ff f804 	bl	8003200 <_pal_lld_setgroupmode>
 // adcSetChannel(ADC4,5);

 // Configure DACs
 // Set pins
 palSetPadMode(GPIOA,4,PAL_MODE_INPUT_ANALOG);
 80041f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041fc:	2110      	movs	r1, #16
 80041fe:	2203      	movs	r2, #3
 8004200:	f7fe fffe 	bl	8003200 <_pal_lld_setgroupmode>
 palSetPadMode(GPIOA,5,PAL_MODE_INPUT_ANALOG);
 8004204:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004208:	2120      	movs	r1, #32
 800420a:	2203      	movs	r2, #3
 800420c:	f7fe fff8 	bl	8003200 <_pal_lld_setgroupmode>
  // Turn ON DAC clock
 BIT_SET(RCC->APB1ENR,RCC_APB1ENR_DAC1EN);
 8004210:	69f3      	ldr	r3, [r6, #28]
 // Enable the DAC
 BIT_SET(DAC->CR,DAC_CR_EN1|DAC_CR_EN2);
 8004212:	4a3a      	ldr	r2, [pc, #232]	; (80042fc <softReset+0x30c>)

 // Initialize ADCs
 analogInit();

 // DC analog read number of readings
 nread = DEFAULT_NREAD;
 8004214:	493a      	ldr	r1, [pc, #232]	; (8004300 <softReset+0x310>)
 // Configure DACs
 // Set pins
 palSetPadMode(GPIOA,4,PAL_MODE_INPUT_ANALOG);
 palSetPadMode(GPIOA,5,PAL_MODE_INPUT_ANALOG);
  // Turn ON DAC clock
 BIT_SET(RCC->APB1ENR,RCC_APB1ENR_DAC1EN);
 8004216:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800421a:	61f3      	str	r3, [r6, #28]
 // Enable the DAC
 BIT_SET(DAC->CR,DAC_CR_EN1|DAC_CR_EN2);
 800421c:	6814      	ldr	r4, [r2, #0]
 // Set to zero
 DAC1_WRITE(0);
 800421e:	2000      	movs	r0, #0
 palSetPadMode(GPIOA,4,PAL_MODE_INPUT_ANALOG);
 palSetPadMode(GPIOA,5,PAL_MODE_INPUT_ANALOG);
  // Turn ON DAC clock
 BIT_SET(RCC->APB1ENR,RCC_APB1ENR_DAC1EN);
 // Enable the DAC
 BIT_SET(DAC->CR,DAC_CR_EN1|DAC_CR_EN2);
 8004220:	f044 1401 	orr.w	r4, r4, #65537	; 0x10001
 8004224:	230a      	movs	r3, #10
 8004226:	6014      	str	r4, [r2, #0]
 // Set to zero
 DAC1_WRITE(0);
 8004228:	6090      	str	r0, [r2, #8]
 DAC2_WRITE(0);
 800422a:	6150      	str	r0, [r2, #20]
 800422c:	600b      	str	r3, [r1, #0]
void adcSetSampleTime(ADC_TypeDef *adc,int channel,int value)
 {
 if (channel<10)
    BIT_FIELD_WRITE(adc->SMPR1,3*channel,7,value);
 else
    BIT_FIELD_WRITE(adc->SMPR2,3*(channel-10),7,value);
 800422e:	69aa      	ldr	r2, [r5, #24]
 8004230:	f042 62e0 	orr.w	r2, r2, #117440512	; 0x7000000
 8004234:	61aa      	str	r2, [r5, #24]
//      adc  : Pointer to ADC to use
//   channel : Channel to read 1..
void adcSetChannel(ADC_TypeDef *adc,int channel)
 {
 // Configure for just one conversion
 BIT_FIELD_WRITE(adc->SQR1,0,15,0);
 8004236:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8004238:	f022 020f 	bic.w	r2, r2, #15
 800423c:	632a      	str	r2, [r5, #48]	; 0x30
 // Set channel to use
 BIT_FIELD_WRITE(adc->SQR1,6,31,channel);
 800423e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8004240:	f422 62f8 	bic.w	r2, r2, #1984	; 0x7c0
 8004244:	f442 6290 	orr.w	r2, r2, #1152	; 0x480
// Parameters:
//      adc  : Pointer to ADC to use
int adcRead(ADC_TypeDef *adc)
  {
  PRO1_SET
  adc->CR |= ADC_CR_ADSTART;
 8004248:	4629      	mov	r1, r5
void adcSetChannel(ADC_TypeDef *adc,int channel)
 {
 // Configure for just one conversion
 BIT_FIELD_WRITE(adc->SQR1,0,15,0);
 // Set channel to use
 BIT_FIELD_WRITE(adc->SQR1,6,31,channel);
 800424a:	632a      	str	r2, [r5, #48]	; 0x30
//      adc  : Pointer to ADC to use
int adcRead(ADC_TypeDef *adc)
  {
  PRO1_SET
  adc->CR |= ADC_CR_ADSTART;
  while (!(adc->ISR & ADC_ISR_EOC));
 800424c:	462c      	mov	r4, r5
// Parameters:
//      adc  : Pointer to ADC to use
int adcRead(ADC_TypeDef *adc)
  {
  PRO1_SET
  adc->CR |= ADC_CR_ADSTART;
 800424e:	688a      	ldr	r2, [r1, #8]
 8004250:	f042 0204 	orr.w	r2, r2, #4
 8004254:	608a      	str	r2, [r1, #8]
  while (!(adc->ISR & ADC_ISR_EOC));
 8004256:	680a      	ldr	r2, [r1, #0]
 8004258:	0757      	lsls	r7, r2, #29
 800425a:	d5fc      	bpl.n	8004256 <softReset+0x266>
  PRO1_CLEAR
  return adc->DR;
 800425c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 // Set conversion for reference channel
 adcSetChannel(ADC1,18);

 // Perform 10 readings
 value = 0;
 for(i=0;i<10;i++)
 800425e:	3b01      	subs	r3, #1
     value += adcRead(ADC1);
 8004260:	4410      	add	r0, r2
 // Set conversion for reference channel
 adcSetChannel(ADC1,18);

 // Perform 10 readings
 value = 0;
 for(i=0;i<10;i++)
 8004262:	d1f4      	bne.n	800424e <softReset+0x25e>

 // Vdd calculation if we used REFINTCAL
 //vdd = 33.0*(*vrefintcal)/value;

 // Vdd calculation from nominal Vref value
 vdd = 12.0*4096/value;
 8004264:	ee07 0a10 	vmov	s14, r0
 8004268:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 800426c:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8004304 <softReset+0x314>
/****************** Public general functions *******************/

void tranInit(void)
 {
 // Sample time period defaults to 1ms
 stime = DEFAULT_STIME;
 8004270:	4a25      	ldr	r2, [pc, #148]	; (8004308 <softReset+0x318>)
 8004272:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8004334 <softReset+0x344>
 // Eliminate wavetables
 w_s =  0;
 w_s2 = 0;

 // Initialize unified memory
 wave2buff = buff;
 8004276:	4d25      	ldr	r5, [pc, #148]	; (800430c <softReset+0x31c>)
 tranBuff  = buff;
 8004278:	4c25      	ldr	r4, [pc, #148]	; (8004310 <softReset+0x320>)
 waveDbuff = buff;
 800427a:	4826      	ldr	r0, [pc, #152]	; (8004314 <softReset+0x324>)
/****************** Public general functions *******************/

void tranInit(void)
 {
 // Sample time period defaults to 1ms
 stime = DEFAULT_STIME;
 800427c:	f8c2 8000 	str.w	r8, [r2]
 8004280:	eec7 7a27 	vdiv.f32	s15, s14, s15
 // Eliminate wavetables
 w_s =  0;
 w_s2 = 0;

 // Initialize unified memory
 wave2buff = buff;
 8004284:	4a24      	ldr	r2, [pc, #144]	; (8004318 <softReset+0x328>)
 {
 // Sample time period defaults to 1ms
 stime = DEFAULT_STIME;

 // Input configuration
 n_ai = 1;     // Number of analog inputs
 8004286:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8004338 <softReset+0x348>
 n_di = 0;     // Number of digital inputs (always zero)
 800428a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800433c <softReset+0x34c>
 n_s  = 1000;  // Number of samples
 800428e:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 8004340 <softReset+0x350>

 // Eliminate wavetables
 w_s =  0;
 8004292:	4f22      	ldr	r7, [pc, #136]	; (800431c <softReset+0x32c>)
 w_s2 = 0;
 8004294:	4e22      	ldr	r6, [pc, #136]	; (8004320 <softReset+0x330>)
 wave2buff = buff;
 tranBuff  = buff;
 waveDbuff = buff;

 // Wave play not infinite
 infiniteWave = 0;
 8004296:	4923      	ldr	r1, [pc, #140]	; (8004324 <softReset+0x334>)
 // Eliminate wavetables
 w_s =  0;
 w_s2 = 0;

 // Initialize unified memory
 wave2buff = buff;
 8004298:	602a      	str	r2, [r5, #0]
 tranBuff  = buff;
 800429a:	6022      	str	r2, [r4, #0]
 waveDbuff = buff;
 800429c:	6002      	str	r2, [r0, #0]

 // Read reference voltage
 vref = readVref();
 800429e:	4a22      	ldr	r2, [pc, #136]	; (8004328 <softReset+0x338>)
 // Sample time period defaults to 1ms
 stime = DEFAULT_STIME;

 // Input configuration
 n_ai = 1;     // Number of analog inputs
 n_di = 0;     // Number of digital inputs (always zero)
 80042a0:	f8c9 3000 	str.w	r3, [r9]
 {
 // Sample time period defaults to 1ms
 stime = DEFAULT_STIME;

 // Input configuration
 n_ai = 1;     // Number of analog inputs
 80042a4:	f04f 0b01 	mov.w	fp, #1
 n_di = 0;     // Number of digital inputs (always zero)
 n_s  = 1000;  // Number of samples
 80042a8:	f44f 787a 	mov.w	r8, #1000	; 0x3e8

 // Eliminate wavetables
 w_s =  0;
 80042ac:	603b      	str	r3, [r7, #0]
 w_s2 = 0;
 80042ae:	6033      	str	r3, [r6, #0]
 wave2buff = buff;
 tranBuff  = buff;
 waveDbuff = buff;

 // Wave play not infinite
 infiniteWave = 0;
 80042b0:	600b      	str	r3, [r1, #0]
 {
 // Sample time period defaults to 1ms
 stime = DEFAULT_STIME;

 // Input configuration
 n_ai = 1;     // Number of analog inputs
 80042b2:	f8ca b000 	str.w	fp, [sl]
 n_di = 0;     // Number of digital inputs (always zero)
 n_s  = 1000;  // Number of samples
 80042b6:	f8cc 8000 	str.w	r8, [ip]
 80042ba:	2320      	movs	r3, #32
 80042bc:	edc2 7a00 	vstr	s15, [r2]
 80042c0:	f383 8811 	msr	BASEPRI, r3
 * @notapi
 */
void ext_lld_start(EXTDriver *extp) {
  expchannel_t line;

  if (extp->state == EXT_STOP)
 80042c4:	4b19      	ldr	r3, [pc, #100]	; (800432c <softReset+0x33c>)
  osalDbgCheck((extp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((extp->state == EXT_STOP) || (extp->state == EXT_ACTIVE),
                "invalid state");
  extp->config = config;
 80042c6:	4d1a      	ldr	r5, [pc, #104]	; (8004330 <softReset+0x340>)
 80042c8:	781a      	ldrb	r2, [r3, #0]
 80042ca:	605d      	str	r5, [r3, #4]
 80042cc:	e03a      	b.n	8004344 <softReset+0x354>
 80042ce:	bf00      	nop
 80042d0:	48000800 	.word	0x48000800
 80042d4:	40021000 	.word	0x40021000
 80042d8:	50000300 	.word	0x50000300
 80042dc:	50000700 	.word	0x50000700
 80042e0:	50000100 	.word	0x50000100
 80042e4:	50000400 	.word	0x50000400
 80042e8:	50000500 	.word	0x50000500
 80042ec:	48000400 	.word	0x48000400
 80042f0:	4001003c 	.word	0x4001003c
 80042f4:	40010040 	.word	0x40010040
 80042f8:	40010044 	.word	0x40010044
 80042fc:	40007400 	.word	0x40007400
 8004300:	20000800 	.word	0x20000800
 8004304:	47400000 	.word	0x47400000
 8004308:	2000080c 	.word	0x2000080c
 800430c:	20000cd0 	.word	0x20000cd0
 8004310:	20000cb8 	.word	0x20000cb8
 8004314:	20000f4c 	.word	0x20000f4c
 8004318:	20000f6c 	.word	0x20000f6c
 800431c:	2000f9cc 	.word	0x2000f9cc
 8004320:	20000c8c 	.word	0x20000c8c
 8004324:	2000f9d8 	.word	0x2000f9d8
 8004328:	20000808 	.word	0x20000808
 800432c:	2000f9d0 	.word	0x2000f9d0
 8004330:	080064b4 	.word	0x080064b4
 8004334:	3a83126f 	.word	0x3a83126f
 8004338:	20000804 	.word	0x20000804
 800433c:	20000f40 	.word	0x20000f40
 8004340:	20000814 	.word	0x20000814
 8004344:	2a01      	cmp	r2, #1
 8004346:	f000 80af 	beq.w	80044a8 <softReset+0x4b8>
 adcSetSampleTime(ADC1,18,7);
 // Set conversion for reference channel
 adcSetChannel(ADC1,18);

 // Perform 10 readings
 value = 0;
 800434a:	2100      	movs	r1, #0
    EXTI->FTSR &= ~cmask;
    EXTI->PR    =  cmask;
#if STM32_EXTI_NUM_LINES > 32
  }
  else {
    EXTI->IMR2  &= ~cmask;
 800434c:	4b89      	ldr	r3, [pc, #548]	; (8004574 <softReset+0x584>)
 800434e:	460a      	mov	r2, r1
 * @param[in] channel   channel to be disabled
 *
 * @notapi
 */
void ext_lld_channel_disable(EXTDriver *extp, expchannel_t channel) {
  uint32_t cmask = (1 << (channel & 0x1F));
 8004350:	2701      	movs	r7, #1
  uint32_t cmask = (1 << (channel & 0x1F));

  /* Setting the associated GPIO for external channels.*/
  if (channel < 16) {
    uint32_t n = channel >> 2;
    uint32_t mask = ~(0xF << ((channel & 3) * 4));
 8004352:	f04f 0b0f 	mov.w	fp, #15
 8004356:	e039      	b.n	80043cc <softReset+0x3dc>
 */
void ext_lld_channel_enable(EXTDriver *extp, expchannel_t channel) {
  uint32_t cmask = (1 << (channel & 0x1F));

  /* Setting the associated GPIO for external channels.*/
  if (channel < 16) {
 8004358:	2a0f      	cmp	r2, #15
 800435a:	d85c      	bhi.n	8004416 <softReset+0x426>
 800435c:	f022 0603 	bic.w	r6, r2, #3
 8004360:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8004364:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
    uint32_t n = channel >> 2;
    uint32_t mask = ~(0xF << ((channel & 3) * 4));
 8004368:	f002 0c03 	and.w	ip, r2, #3
                     EXT_MODE_GPIO_OFF) << ((channel & 3) * 4);

#if defined(STM32F1XX)
    AFIO->EXTICR[n] = (AFIO->EXTICR[n] & mask) | port;
#else /* !defined(STM32F1XX) */
    SYSCFG->EXTICR[n] = (SYSCFG->EXTICR[n] & mask) | port;
 800436c:	f8d6 8008 	ldr.w	r8, [r6, #8]
  uint32_t cmask = (1 << (channel & 0x1F));

  /* Setting the associated GPIO for external channels.*/
  if (channel < 16) {
    uint32_t n = channel >> 2;
    uint32_t mask = ~(0xF << ((channel & 3) * 4));
 8004370:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004374:	fa0b fa0c 	lsl.w	sl, fp, ip
    uint32_t port = ((extp->config->channels[channel].mode &
                      EXT_MODE_GPIO_MASK) >>
 8004378:	f3c0 1903 	ubfx	r9, r0, #4, #4
                     EXT_MODE_GPIO_OFF) << ((channel & 3) * 4);

#if defined(STM32F1XX)
    AFIO->EXTICR[n] = (AFIO->EXTICR[n] & mask) | port;
#else /* !defined(STM32F1XX) */
    SYSCFG->EXTICR[n] = (SYSCFG->EXTICR[n] & mask) | port;
 800437c:	ea28 080a 	bic.w	r8, r8, sl

  /* Setting the associated GPIO for external channels.*/
  if (channel < 16) {
    uint32_t n = channel >> 2;
    uint32_t mask = ~(0xF << ((channel & 3) * 4));
    uint32_t port = ((extp->config->channels[channel].mode &
 8004380:	fa09 fc0c 	lsl.w	ip, r9, ip
                     EXT_MODE_GPIO_OFF) << ((channel & 3) * 4);

#if defined(STM32F1XX)
    AFIO->EXTICR[n] = (AFIO->EXTICR[n] & mask) | port;
#else /* !defined(STM32F1XX) */
    SYSCFG->EXTICR[n] = (SYSCFG->EXTICR[n] & mask) | port;
 8004384:	ea48 0c0c 	orr.w	ip, r8, ip
 8004388:	f8c6 c008 	str.w	ip, [r6, #8]

#if STM32_EXTI_NUM_LINES > 32
  if (channel < 32) {
#endif
    /* Masked out lines must not be touched by this driver.*/
    if ((cmask & STM32_EXTI_IMR_MASK) != 0U) {
 800438c:	f014 5ffc 	tst.w	r4, #528482304	; 0x1f800000
 8004390:	d116      	bne.n	80043c0 <softReset+0x3d0>
      return;
    }

    /* Programming edge registers.*/
    if (extp->config->channels[channel].mode & EXT_CH_MODE_RISING_EDGE)
 8004392:	07c6      	lsls	r6, r0, #31
 8004394:	d56a      	bpl.n	800446c <softReset+0x47c>
      EXTI->RTSR |= cmask;
 8004396:	689e      	ldr	r6, [r3, #8]
 8004398:	4326      	orrs	r6, r4
 800439a:	609e      	str	r6, [r3, #8]
 800439c:	43e6      	mvns	r6, r4
    else
      EXTI->RTSR &= ~cmask;
    if (extp->config->channels[channel].mode & EXT_CH_MODE_FALLING_EDGE)
 800439e:	f010 0f02 	tst.w	r0, #2
      EXTI->FTSR |= cmask;
 80043a2:	68d8      	ldr	r0, [r3, #12]
 80043a4:	bf14      	ite	ne
 80043a6:	4320      	orrne	r0, r4
    else
      EXTI->FTSR &= ~cmask;
 80043a8:	4030      	andeq	r0, r6
 80043aa:	60d8      	str	r0, [r3, #12]
 80043ac:	1868      	adds	r0, r5, r1

    /* Programming interrupt and event registers.*/
    if (extp->config->channels[channel].cb != NULL) {
 80043ae:	6840      	ldr	r0, [r0, #4]
 80043b0:	2800      	cmp	r0, #0
 80043b2:	d072      	beq.n	800449a <softReset+0x4aa>
      EXTI->IMR |= cmask;
 80043b4:	6818      	ldr	r0, [r3, #0]
 80043b6:	4304      	orrs	r4, r0
 80043b8:	601c      	str	r4, [r3, #0]
      EXTI->EMR &= ~cmask;
 80043ba:	6858      	ldr	r0, [r3, #4]
 80043bc:	4006      	ands	r6, r0
 80043be:	605e      	str	r6, [r3, #4]
 80043c0:	3108      	adds	r1, #8

  if (extp->state == EXT_STOP)
    ext_lld_exti_irq_enable();

  /* Configuration of automatic channels.*/
  for (line = 0; line < EXT_MAX_CHANNELS; line++)
 80043c2:	f5b1 7f88 	cmp.w	r1, #272	; 0x110
 80043c6:	f102 0201 	add.w	r2, r2, #1
 80043ca:	d01c      	beq.n	8004406 <softReset+0x416>
    if (extp->config->channels[line].mode & EXT_CH_MODE_AUTOSTART)
 80043cc:	5868      	ldr	r0, [r5, r1]
 * @param[in] channel   channel to be enabled
 *
 * @notapi
 */
void ext_lld_channel_enable(EXTDriver *extp, expchannel_t channel) {
  uint32_t cmask = (1 << (channel & 0x1F));
 80043ce:	f002 041f 	and.w	r4, r2, #31
  if (extp->state == EXT_STOP)
    ext_lld_exti_irq_enable();

  /* Configuration of automatic channels.*/
  for (line = 0; line < EXT_MAX_CHANNELS; line++)
    if (extp->config->channels[line].mode & EXT_CH_MODE_AUTOSTART)
 80043d2:	0746      	lsls	r6, r0, #29
 * @param[in] channel   channel to be enabled
 *
 * @notapi
 */
void ext_lld_channel_enable(EXTDriver *extp, expchannel_t channel) {
  uint32_t cmask = (1 << (channel & 0x1F));
 80043d4:	fa07 f404 	lsl.w	r4, r7, r4
  if (extp->state == EXT_STOP)
    ext_lld_exti_irq_enable();

  /* Configuration of automatic channels.*/
  for (line = 0; line < EXT_MAX_CHANNELS; line++)
    if (extp->config->channels[line].mode & EXT_CH_MODE_AUTOSTART)
 80043d8:	d4be      	bmi.n	8004358 <softReset+0x368>
  uint32_t cmask = (1 << (channel & 0x1F));

  (void)extp;

#if STM32_EXTI_NUM_LINES > 32
  if (channel < 32) {
 80043da:	2a1f      	cmp	r2, #31
 80043dc:	d937      	bls.n	800444e <softReset+0x45e>
    EXTI->FTSR &= ~cmask;
    EXTI->PR    =  cmask;
#if STM32_EXTI_NUM_LINES > 32
  }
  else {
    EXTI->IMR2  &= ~cmask;
 80043de:	6a1e      	ldr	r6, [r3, #32]
 80043e0:	43e0      	mvns	r0, r4
 80043e2:	4006      	ands	r6, r0
 80043e4:	621e      	str	r6, [r3, #32]
    EXTI->EMR2  &= ~cmask;
 80043e6:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 80043e8:	4006      	ands	r6, r0
 80043ea:	625e      	str	r6, [r3, #36]	; 0x24
    EXTI->RTSR2 &= ~cmask;
 80043ec:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 80043ee:	4006      	ands	r6, r0
 80043f0:	629e      	str	r6, [r3, #40]	; 0x28
    EXTI->FTSR2 &= ~cmask;
 80043f2:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 80043f4:	3108      	adds	r1, #8
 80043f6:	4030      	ands	r0, r6

  if (extp->state == EXT_STOP)
    ext_lld_exti_irq_enable();

  /* Configuration of automatic channels.*/
  for (line = 0; line < EXT_MAX_CHANNELS; line++)
 80043f8:	f5b1 7f88 	cmp.w	r1, #272	; 0x110
  }
  else {
    EXTI->IMR2  &= ~cmask;
    EXTI->EMR2  &= ~cmask;
    EXTI->RTSR2 &= ~cmask;
    EXTI->FTSR2 &= ~cmask;
 80043fc:	62d8      	str	r0, [r3, #44]	; 0x2c

  if (extp->state == EXT_STOP)
    ext_lld_exti_irq_enable();

  /* Configuration of automatic channels.*/
  for (line = 0; line < EXT_MAX_CHANNELS; line++)
 80043fe:	f102 0201 	add.w	r2, r2, #1
  else {
    EXTI->IMR2  &= ~cmask;
    EXTI->EMR2  &= ~cmask;
    EXTI->RTSR2 &= ~cmask;
    EXTI->FTSR2 &= ~cmask;
    EXTI->PR2    =  cmask;
 8004402:	635c      	str	r4, [r3, #52]	; 0x34

  if (extp->state == EXT_STOP)
    ext_lld_exti_irq_enable();

  /* Configuration of automatic channels.*/
  for (line = 0; line < EXT_MAX_CHANNELS; line++)
 8004404:	d1e2      	bne.n	80043cc <softReset+0x3dc>
  ext_lld_start(extp);
  extp->state = EXT_ACTIVE;
 8004406:	4a5c      	ldr	r2, [pc, #368]	; (8004578 <softReset+0x588>)
 8004408:	2302      	movs	r3, #2
 800440a:	7013      	strb	r3, [r2, #0]
 800440c:	2300      	movs	r3, #0
 800440e:	f383 8811 	msr	BASEPRI, r3
 8004412:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    SYSCFG->EXTICR[n] = (SYSCFG->EXTICR[n] & mask) | port;
#endif /* !defined(STM32F1XX) */
  }

#if STM32_EXTI_NUM_LINES > 32
  if (channel < 32) {
 8004416:	2a1f      	cmp	r2, #31
 8004418:	d9b8      	bls.n	800438c <softReset+0x39c>
    }
#if STM32_EXTI_NUM_LINES > 32
  }
  else {
    /* Masked out lines must not be touched by this driver.*/
    if ((cmask & STM32_EXTI_IMR2_MASK) != 0U) {
 800441a:	f034 0603 	bics.w	r6, r4, #3
 800441e:	d1cf      	bne.n	80043c0 <softReset+0x3d0>
      return;
    }

    /* Programming edge registers.*/
    if (extp->config->channels[channel].mode & EXT_CH_MODE_RISING_EDGE)
 8004420:	07c6      	lsls	r6, r0, #31
 8004422:	d52b      	bpl.n	800447c <softReset+0x48c>
      EXTI->RTSR2 |= cmask;
 8004424:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 8004426:	4326      	orrs	r6, r4
 8004428:	629e      	str	r6, [r3, #40]	; 0x28
 800442a:	43e6      	mvns	r6, r4
    else
      EXTI->RTSR2 &= ~cmask;
    if (extp->config->channels[channel].mode & EXT_CH_MODE_FALLING_EDGE)
 800442c:	f010 0f02 	tst.w	r0, #2
      EXTI->FTSR2 |= cmask;
 8004430:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004432:	bf14      	ite	ne
 8004434:	4320      	orrne	r0, r4
    else
      EXTI->FTSR2 &= ~cmask;
 8004436:	4030      	andeq	r0, r6
 8004438:	62d8      	str	r0, [r3, #44]	; 0x2c
 800443a:	1868      	adds	r0, r5, r1

    /* Programming interrupt and event registers.*/
    if (extp->config->channels[channel].cb != NULL) {
 800443c:	6840      	ldr	r0, [r0, #4]
 800443e:	b328      	cbz	r0, 800448c <softReset+0x49c>
      EXTI->IMR2 |= cmask;
 8004440:	6a18      	ldr	r0, [r3, #32]
 8004442:	4304      	orrs	r4, r0
 8004444:	621c      	str	r4, [r3, #32]
      EXTI->EMR2 &= ~cmask;
 8004446:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004448:	4006      	ands	r6, r0
 800444a:	625e      	str	r6, [r3, #36]	; 0x24
 800444c:	e7b8      	b.n	80043c0 <softReset+0x3d0>
  (void)extp;

#if STM32_EXTI_NUM_LINES > 32
  if (channel < 32) {
#endif
    EXTI->IMR  &= ~cmask;
 800444e:	681e      	ldr	r6, [r3, #0]
 8004450:	43e0      	mvns	r0, r4
 8004452:	4006      	ands	r6, r0
 8004454:	601e      	str	r6, [r3, #0]
    EXTI->EMR  &= ~cmask;
 8004456:	685e      	ldr	r6, [r3, #4]
 8004458:	4006      	ands	r6, r0
 800445a:	605e      	str	r6, [r3, #4]
    EXTI->RTSR &= ~cmask;
 800445c:	689e      	ldr	r6, [r3, #8]
 800445e:	4006      	ands	r6, r0
 8004460:	609e      	str	r6, [r3, #8]
    EXTI->FTSR &= ~cmask;
 8004462:	68de      	ldr	r6, [r3, #12]
 8004464:	4030      	ands	r0, r6
 8004466:	60d8      	str	r0, [r3, #12]
    EXTI->PR    =  cmask;
 8004468:	615c      	str	r4, [r3, #20]
 800446a:	e7a9      	b.n	80043c0 <softReset+0x3d0>

    /* Programming edge registers.*/
    if (extp->config->channels[channel].mode & EXT_CH_MODE_RISING_EDGE)
      EXTI->RTSR |= cmask;
    else
      EXTI->RTSR &= ~cmask;
 800446c:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8004470:	43e6      	mvns	r6, r4
 8004472:	ea06 0c0c 	and.w	ip, r6, ip
 8004476:	f8c3 c008 	str.w	ip, [r3, #8]
 800447a:	e790      	b.n	800439e <softReset+0x3ae>

    /* Programming edge registers.*/
    if (extp->config->channels[channel].mode & EXT_CH_MODE_RISING_EDGE)
      EXTI->RTSR2 |= cmask;
    else
      EXTI->RTSR2 &= ~cmask;
 800447c:	f8d3 c028 	ldr.w	ip, [r3, #40]	; 0x28
 8004480:	43e6      	mvns	r6, r4
 8004482:	ea06 0c0c 	and.w	ip, r6, ip
 8004486:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
 800448a:	e7cf      	b.n	800442c <softReset+0x43c>
    if (extp->config->channels[channel].cb != NULL) {
      EXTI->IMR2 |= cmask;
      EXTI->EMR2 &= ~cmask;
    }
    else {
      EXTI->EMR2 |= cmask;
 800448c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800448e:	4304      	orrs	r4, r0
 8004490:	625c      	str	r4, [r3, #36]	; 0x24
      EXTI->IMR2 &= ~cmask;
 8004492:	6a18      	ldr	r0, [r3, #32]
 8004494:	4006      	ands	r6, r0
 8004496:	621e      	str	r6, [r3, #32]
 8004498:	e792      	b.n	80043c0 <softReset+0x3d0>
    if (extp->config->channels[channel].cb != NULL) {
      EXTI->IMR |= cmask;
      EXTI->EMR &= ~cmask;
    }
    else {
      EXTI->EMR |= cmask;
 800449a:	6858      	ldr	r0, [r3, #4]
 800449c:	4304      	orrs	r4, r0
 800449e:	605c      	str	r4, [r3, #4]
      EXTI->IMR &= ~cmask;
 80044a0:	6818      	ldr	r0, [r3, #0]
 80044a2:	4006      	ands	r6, r0
 80044a4:	601e      	str	r6, [r3, #0]
 80044a6:	e78b      	b.n	80043c0 <softReset+0x3d0>

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80044a8:	4b34      	ldr	r3, [pc, #208]	; (800457c <softReset+0x58c>)
 80044aa:	2160      	movs	r1, #96	; 0x60
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80044ac:	f04f 0c40 	mov.w	ip, #64	; 0x40

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80044b0:	f883 1306 	strb.w	r1, [r3, #774]	; 0x306
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80044b4:	f44f 7780 	mov.w	r7, #256	; 0x100
 80044b8:	f8c3 c180 	str.w	ip, [r3, #384]	; 0x180
 80044bc:	f44f 7600 	mov.w	r6, #512	; 0x200
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80044c0:	f8c3 c000 	str.w	ip, [r3]
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80044c4:	2402      	movs	r4, #2
 80044c6:	2004      	movs	r0, #4
 80044c8:	f04f 0a80 	mov.w	sl, #128	; 0x80
 80044cc:	f44f 6980 	mov.w	r9, #1024	; 0x400
 80044d0:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
 80044d4:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
 80044d8:	f04f 0c08 	mov.w	ip, #8

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80044dc:	f883 1307 	strb.w	r1, [r3, #775]	; 0x307
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80044e0:	f8c3 a180 	str.w	sl, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80044e4:	f8c3 a000 	str.w	sl, [r3]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80044e8:	f883 1308 	strb.w	r1, [r3, #776]	; 0x308
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80044ec:	f8c3 7180 	str.w	r7, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80044f0:	601f      	str	r7, [r3, #0]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80044f2:	f883 1309 	strb.w	r1, [r3, #777]	; 0x309
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80044f6:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80044fa:	601e      	str	r6, [r3, #0]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80044fc:	f883 130a 	strb.w	r1, [r3, #778]	; 0x30a
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004500:	f8c3 9180 	str.w	r9, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8004504:	f8c3 9000 	str.w	r9, [r3]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8004508:	f883 1317 	strb.w	r1, [r3, #791]	; 0x317
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800450c:	f8c3 8180 	str.w	r8, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8004510:	f8c3 8000 	str.w	r8, [r3]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8004514:	f883 1328 	strb.w	r1, [r3, #808]	; 0x328
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004518:	f8c3 7184 	str.w	r7, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800451c:	605f      	str	r7, [r3, #4]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800451e:	f883 1301 	strb.w	r1, [r3, #769]	; 0x301
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004522:	f8c3 4180 	str.w	r4, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8004526:	601c      	str	r4, [r3, #0]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8004528:	f883 1329 	strb.w	r1, [r3, #809]	; 0x329
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800452c:	f8c3 6184 	str.w	r6, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8004530:	605e      	str	r6, [r3, #4]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8004532:	f883 134c 	strb.w	r1, [r3, #844]	; 0x34c
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004536:	f8c3 b188 	str.w	fp, [r3, #392]	; 0x188
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800453a:	f8c3 b008 	str.w	fp, [r3, #8]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800453e:	f883 1302 	strb.w	r1, [r3, #770]	; 0x302
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004542:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8004546:	6018      	str	r0, [r3, #0]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8004548:	f883 1303 	strb.w	r1, [r3, #771]	; 0x303
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800454c:	f8c3 c180 	str.w	ip, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8004550:	f8c3 c000 	str.w	ip, [r3]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8004554:	f883 1340 	strb.w	r1, [r3, #832]	; 0x340
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004558:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800455c:	609a      	str	r2, [r3, #8]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800455e:	f883 1341 	strb.w	r1, [r3, #833]	; 0x341
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004562:	f8c3 4188 	str.w	r4, [r3, #392]	; 0x188
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8004566:	609c      	str	r4, [r3, #8]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8004568:	f883 1342 	strb.w	r1, [r3, #834]	; 0x342
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800456c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8004570:	6098      	str	r0, [r3, #8]
 8004572:	e6ea      	b.n	800434a <softReset+0x35a>
 8004574:	40010400 	.word	0x40010400
 8004578:	2000f9d0 	.word	0x2000f9d0
 800457c:	e000e100 	.word	0xe000e100

08004580 <gptStart.constprop.14>:
 * @param[in] gptp      pointer to the @p GPTDriver object
 * @param[in] config    pointer to the @p GPTConfig object
 *
 * @api
 */
void gptStart(GPTDriver *gptp, const GPTConfig *config) {
 8004580:	b4f0      	push	{r4, r5, r6, r7}
 8004582:	2320      	movs	r3, #32
 8004584:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((gptp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((gptp->state == GPT_STOP) || (gptp->state == GPT_READY),
              "invalid state");
  gptp->config = config;
 8004588:	4a19      	ldr	r2, [pc, #100]	; (80045f0 <gptStart.constprop.14+0x70>)
 * @notapi
 */
void gpt_lld_start(GPTDriver *gptp) {
  uint16_t psc;

  if (gptp->state == GPT_STOP) {
 800458a:	7813      	ldrb	r3, [r2, #0]
 800458c:	6050      	str	r0, [r2, #4]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d016      	beq.n	80045c0 <gptStart.constprop.14+0x40>
 8004592:	6894      	ldr	r4, [r2, #8]
    }
#endif
  }

  /* Prescaler value calculation.*/
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
 8004594:	6801      	ldr	r1, [r0, #0]
  /* Timer configuration.*/
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
  gptp->tim->CR2 = gptp->config->cr2;
  gptp->tim->PSC = psc;                         /* Prescaler value.         */
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
 8004596:	68c5      	ldr	r5, [r0, #12]
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
  osalDbgAssert(((uint32_t)(psc + 1) * gptp->config->frequency) == gptp->clock,
                "invalid frequency");

  /* Timer configuration.*/
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
 8004598:	68d3      	ldr	r3, [r2, #12]
  gptp->tim->CR2 = gptp->config->cr2;
 800459a:	6886      	ldr	r6, [r0, #8]
    }
#endif
  }

  /* Prescaler value calculation.*/
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
 800459c:	fbb4 f4f1 	udiv	r4, r4, r1
 80045a0:	3c01      	subs	r4, #1
  osalDbgAssert(((uint32_t)(psc + 1) * gptp->config->frequency) == gptp->clock,
                "invalid frequency");

  /* Timer configuration.*/
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
 80045a2:	2100      	movs	r1, #0
  gptp->tim->CR2 = gptp->config->cr2;
  gptp->tim->PSC = psc;                         /* Prescaler value.         */
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
 80045a4:	f025 00ff 	bic.w	r0, r5, #255	; 0xff
    }
#endif
  }

  /* Prescaler value calculation.*/
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
 80045a8:	b2a4      	uxth	r4, r4
  gpt_lld_start(gptp);
  gptp->state = GPT_READY;
 80045aa:	2502      	movs	r5, #2
  osalDbgAssert(((uint32_t)(psc + 1) * gptp->config->frequency) == gptp->clock,
                "invalid frequency");

  /* Timer configuration.*/
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
 80045ac:	6019      	str	r1, [r3, #0]
  gptp->tim->CR2 = gptp->config->cr2;
 80045ae:	605e      	str	r6, [r3, #4]
 80045b0:	7015      	strb	r5, [r2, #0]
  gptp->tim->PSC = psc;                         /* Prescaler value.         */
 80045b2:	629c      	str	r4, [r3, #40]	; 0x28
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
 80045b4:	6119      	str	r1, [r3, #16]
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
 80045b6:	60d8      	str	r0, [r3, #12]
 80045b8:	f381 8811 	msr	BASEPRI, r1
  osalSysUnlock();
}
 80045bc:	bcf0      	pop	{r4, r5, r6, r7}
 80045be:	4770      	bx	lr
    }
#endif

#if STM32_GPT_USE_TIM3
    if (&GPTD3 == gptp) {
      rccEnableTIM3(FALSE);
 80045c0:	4b0c      	ldr	r3, [pc, #48]	; (80045f4 <gptStart.constprop.14+0x74>)
      nvicEnableVector(STM32_TIM3_NUMBER, STM32_GPT_TIM3_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM3CLK)
      gptp->clock = STM32_TIM3CLK;
#else
      gptp->clock = STM32_TIMCLK1;
 80045c2:	4c0d      	ldr	r4, [pc, #52]	; (80045f8 <gptStart.constprop.14+0x78>)
    }
#endif

#if STM32_GPT_USE_TIM3
    if (&GPTD3 == gptp) {
      rccEnableTIM3(FALSE);
 80045c4:	69dd      	ldr	r5, [r3, #28]
      nvicEnableVector(STM32_TIM3_NUMBER, STM32_GPT_TIM3_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM3CLK)
      gptp->clock = STM32_TIM3CLK;
#else
      gptp->clock = STM32_TIMCLK1;
 80045c6:	6094      	str	r4, [r2, #8]
    }
#endif

#if STM32_GPT_USE_TIM3
    if (&GPTD3 == gptp) {
      rccEnableTIM3(FALSE);
 80045c8:	f045 0502 	orr.w	r5, r5, #2
 80045cc:	61dd      	str	r5, [r3, #28]
      rccResetTIM3();
 80045ce:	691d      	ldr	r5, [r3, #16]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80045d0:	490a      	ldr	r1, [pc, #40]	; (80045fc <gptStart.constprop.14+0x7c>)
 80045d2:	f045 0c02 	orr.w	ip, r5, #2
 80045d6:	2700      	movs	r7, #0
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80045d8:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80045dc:	2620      	movs	r6, #32
 80045de:	f8c3 c010 	str.w	ip, [r3, #16]
 80045e2:	611f      	str	r7, [r3, #16]
 80045e4:	f881 631d 	strb.w	r6, [r1, #797]	; 0x31d
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80045e8:	f8c1 5180 	str.w	r5, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80045ec:	600d      	str	r5, [r1, #0]
 80045ee:	e7d1      	b.n	8004594 <gptStart.constprop.14+0x14>
 80045f0:	20000f54 	.word	0x20000f54
 80045f4:	40021000 	.word	0x40021000
 80045f8:	02255100 	.word	0x02255100
 80045fc:	e000e100 	.word	0xe000e100

08004600 <ACenable>:

/**** PUBLIC AC FUNCTIONS **************************************/

// Enable ADCs for AC operation
void ACenable(void)
 {
 8004600:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 // ADC Dual operation
 BIT_FIELD_WRITE(ADC1_2_COMMON->CCR,0,31,1); // Dual 1+2
 8004604:	4f4d      	ldr	r7, [pc, #308]	; (800473c <ACenable+0x13c>)
 BIT_FIELD_WRITE(ADC3_4_COMMON->CCR,0,31,1); // Dual 3+4
 8004606:	f8df c154 	ldr.w	ip, [pc, #340]	; 800475c <ACenable+0x15c>

// Enable ADCs for AC operation
void ACenable(void)
 {
 // ADC Dual operation
 BIT_FIELD_WRITE(ADC1_2_COMMON->CCR,0,31,1); // Dual 1+2
 800460a:	f8d7 8008 	ldr.w	r8, [r7, #8]
//                6 : 181.5 cycles
//                7 : 601.5 cycles
void adcSetSampleTime(ADC_TypeDef *adc,int channel,int value)
 {
 if (channel<10)
    BIT_FIELD_WRITE(adc->SMPR1,3*channel,7,value);
 800460e:	4d4c      	ldr	r5, [pc, #304]	; (8004740 <ACenable+0x140>)

// Configure opamp
void adcOpamp(OPAMP_TypeDef *opamp,int nii)
 {
 // Enable clocks
 BIT_SET(RCC->APB2ENR,RCC_APB2ENR_SYSCFGEN);
 8004610:	494c      	ldr	r1, [pc, #304]	; (8004744 <ACenable+0x144>)
 // Enable opamp
 BIT_SET(opamp->CSR,OPAMP_CSR_OPAMPxEN);
 8004612:	4e4d      	ldr	r6, [pc, #308]	; (8004748 <ACenable+0x148>)
//                6 : 181.5 cycles
//                7 : 601.5 cycles
void adcSetSampleTime(ADC_TypeDef *adc,int channel,int value)
 {
 if (channel<10)
    BIT_FIELD_WRITE(adc->SMPR1,3*channel,7,value);
 8004614:	484d      	ldr	r0, [pc, #308]	; (800474c <ACenable+0x14c>)
void adcOpamp(OPAMP_TypeDef *opamp,int nii)
 {
 // Enable clocks
 BIT_SET(RCC->APB2ENR,RCC_APB2ENR_SYSCFGEN);
 // Enable opamp
 BIT_SET(opamp->CSR,OPAMP_CSR_OPAMPxEN);
 8004616:	4c4e      	ldr	r4, [pc, #312]	; (8004750 <ACenable+0x150>)
//                6 : 181.5 cycles
//                7 : 601.5 cycles
void adcSetSampleTime(ADC_TypeDef *adc,int channel,int value)
 {
 if (channel<10)
    BIT_FIELD_WRITE(adc->SMPR1,3*channel,7,value);
 8004618:	4b4e      	ldr	r3, [pc, #312]	; (8004754 <ACenable+0x154>)
void adcOpamp(OPAMP_TypeDef *opamp,int nii)
 {
 // Enable clocks
 BIT_SET(RCC->APB2ENR,RCC_APB2ENR_SYSCFGEN);
 // Enable opamp
 BIT_SET(opamp->CSR,OPAMP_CSR_OPAMPxEN);
 800461a:	4a4f      	ldr	r2, [pc, #316]	; (8004758 <ACenable+0x158>)

// Enable ADCs for AC operation
void ACenable(void)
 {
 // ADC Dual operation
 BIT_FIELD_WRITE(ADC1_2_COMMON->CCR,0,31,1); // Dual 1+2
 800461c:	f028 081f 	bic.w	r8, r8, #31
 8004620:	f048 0801 	orr.w	r8, r8, #1
 8004624:	f8c7 8008 	str.w	r8, [r7, #8]
 BIT_FIELD_WRITE(ADC3_4_COMMON->CCR,0,31,1); // Dual 3+4
 8004628:	f8dc 7008 	ldr.w	r7, [ip, #8]
 800462c:	f027 081f 	bic.w	r8, r7, #31
 8004630:	f048 0801 	orr.w	r8, r8, #1
//                6 : 181.5 cycles
//                7 : 601.5 cycles
void adcSetSampleTime(ADC_TypeDef *adc,int channel,int value)
 {
 if (channel<10)
    BIT_FIELD_WRITE(adc->SMPR1,3*channel,7,value);
 8004634:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
// Enable ADCs for AC operation
void ACenable(void)
 {
 // ADC Dual operation
 BIT_FIELD_WRITE(ADC1_2_COMMON->CCR,0,31,1); // Dual 1+2
 BIT_FIELD_WRITE(ADC3_4_COMMON->CCR,0,31,1); // Dual 3+4
 8004638:	f8cc 8008 	str.w	r8, [ip, #8]
//                6 : 181.5 cycles
//                7 : 601.5 cycles
void adcSetSampleTime(ADC_TypeDef *adc,int channel,int value)
 {
 if (channel<10)
    BIT_FIELD_WRITE(adc->SMPR1,3*channel,7,value);
 800463c:	f8d7 c014 	ldr.w	ip, [r7, #20]
 8004640:	f02c 0c38 	bic.w	ip, ip, #56	; 0x38
 8004644:	f04c 0c10 	orr.w	ip, ip, #16
 8004648:	f8c7 c014 	str.w	ip, [r7, #20]
//      adc  : Pointer to ADC to use
//   channel : Channel to read 1..
void adcSetChannel(ADC_TypeDef *adc,int channel)
 {
 // Configure for just one conversion
 BIT_FIELD_WRITE(adc->SQR1,0,15,0);
 800464c:	f8d7 c030 	ldr.w	ip, [r7, #48]	; 0x30
 8004650:	f02c 0c0f 	bic.w	ip, ip, #15
 8004654:	f8c7 c030 	str.w	ip, [r7, #48]	; 0x30
 // Set channel to use
 BIT_FIELD_WRITE(adc->SQR1,6,31,channel);
 8004658:	f8d7 c030 	ldr.w	ip, [r7, #48]	; 0x30
 800465c:	f42c 6cf8 	bic.w	ip, ip, #1984	; 0x7c0
 8004660:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
 8004664:	f8c7 c030 	str.w	ip, [r7, #48]	; 0x30
//                6 : 181.5 cycles
//                7 : 601.5 cycles
void adcSetSampleTime(ADC_TypeDef *adc,int channel,int value)
 {
 if (channel<10)
    BIT_FIELD_WRITE(adc->SMPR1,3*channel,7,value);
 8004668:	696f      	ldr	r7, [r5, #20]
 800466a:	f027 0738 	bic.w	r7, r7, #56	; 0x38
 800466e:	f047 0710 	orr.w	r7, r7, #16
 8004672:	616f      	str	r7, [r5, #20]

// Configure opamp
void adcOpamp(OPAMP_TypeDef *opamp,int nii)
 {
 // Enable clocks
 BIT_SET(RCC->APB2ENR,RCC_APB2ENR_SYSCFGEN);
 8004674:	698f      	ldr	r7, [r1, #24]
 8004676:	f047 0701 	orr.w	r7, r7, #1
 800467a:	618f      	str	r7, [r1, #24]
 // Enable opamp
 BIT_SET(opamp->CSR,OPAMP_CSR_OPAMPxEN);
 800467c:	6837      	ldr	r7, [r6, #0]
 800467e:	f047 0701 	orr.w	r7, r7, #1
 8004682:	6037      	str	r7, [r6, #0]
 // Set as follower
 BIT_FIELD_WRITE(opamp->CSR,5,3,3);
 8004684:	6837      	ldr	r7, [r6, #0]
 8004686:	f047 0760 	orr.w	r7, r7, #96	; 0x60
 800468a:	6037      	str	r7, [r6, #0]
 // Set nii
 BIT_FIELD_WRITE(opamp->CSR,2,3,nii);
 800468c:	6837      	ldr	r7, [r6, #0]
 800468e:	f027 070c 	bic.w	r7, r7, #12
 8004692:	f047 0708 	orr.w	r7, r7, #8
 8004696:	6037      	str	r7, [r6, #0]
//      adc  : Pointer to ADC to use
//   channel : Channel to read 1..
void adcSetChannel(ADC_TypeDef *adc,int channel)
 {
 // Configure for just one conversion
 BIT_FIELD_WRITE(adc->SQR1,0,15,0);
 8004698:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 800469a:	f026 060f 	bic.w	r6, r6, #15
 800469e:	632e      	str	r6, [r5, #48]	; 0x30
 // Set channel to use
 BIT_FIELD_WRITE(adc->SQR1,6,31,channel);
 80046a0:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 80046a2:	f426 66f8 	bic.w	r6, r6, #1984	; 0x7c0
 80046a6:	f046 0640 	orr.w	r6, r6, #64	; 0x40
 80046aa:	632e      	str	r6, [r5, #48]	; 0x30
//                6 : 181.5 cycles
//                7 : 601.5 cycles
void adcSetSampleTime(ADC_TypeDef *adc,int channel,int value)
 {
 if (channel<10)
    BIT_FIELD_WRITE(adc->SMPR1,3*channel,7,value);
 80046ac:	6945      	ldr	r5, [r0, #20]
 80046ae:	f425 6560 	bic.w	r5, r5, #3584	; 0xe00
 80046b2:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
 80046b6:	6145      	str	r5, [r0, #20]

// Configure opamp
void adcOpamp(OPAMP_TypeDef *opamp,int nii)
 {
 // Enable clocks
 BIT_SET(RCC->APB2ENR,RCC_APB2ENR_SYSCFGEN);
 80046b8:	698d      	ldr	r5, [r1, #24]
 80046ba:	f045 0501 	orr.w	r5, r5, #1
 80046be:	618d      	str	r5, [r1, #24]
 // Enable opamp
 BIT_SET(opamp->CSR,OPAMP_CSR_OPAMPxEN);
 80046c0:	6825      	ldr	r5, [r4, #0]
 80046c2:	f045 0501 	orr.w	r5, r5, #1
 80046c6:	6025      	str	r5, [r4, #0]
 // Set as follower
 BIT_FIELD_WRITE(opamp->CSR,5,3,3);
 80046c8:	6825      	ldr	r5, [r4, #0]
 80046ca:	f045 0560 	orr.w	r5, r5, #96	; 0x60
 80046ce:	6025      	str	r5, [r4, #0]
 // Set nii
 BIT_FIELD_WRITE(opamp->CSR,2,3,nii);
 80046d0:	6825      	ldr	r5, [r4, #0]
 80046d2:	f025 050c 	bic.w	r5, r5, #12
 80046d6:	f045 0508 	orr.w	r5, r5, #8
 80046da:	6025      	str	r5, [r4, #0]
//      adc  : Pointer to ADC to use
//   channel : Channel to read 1..
void adcSetChannel(ADC_TypeDef *adc,int channel)
 {
 // Configure for just one conversion
 BIT_FIELD_WRITE(adc->SQR1,0,15,0);
 80046dc:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80046de:	f024 040f 	bic.w	r4, r4, #15
 80046e2:	6304      	str	r4, [r0, #48]	; 0x30
 // Set channel to use
 BIT_FIELD_WRITE(adc->SQR1,6,31,channel);
 80046e4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80046e6:	f424 64f8 	bic.w	r4, r4, #1984	; 0x7c0
 80046ea:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 80046ee:	6304      	str	r4, [r0, #48]	; 0x30
//                6 : 181.5 cycles
//                7 : 601.5 cycles
void adcSetSampleTime(ADC_TypeDef *adc,int channel,int value)
 {
 if (channel<10)
    BIT_FIELD_WRITE(adc->SMPR1,3*channel,7,value);
 80046f0:	6958      	ldr	r0, [r3, #20]
 80046f2:	f420 6060 	bic.w	r0, r0, #3584	; 0xe00
 80046f6:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
 80046fa:	6158      	str	r0, [r3, #20]

// Configure opamp
void adcOpamp(OPAMP_TypeDef *opamp,int nii)
 {
 // Enable clocks
 BIT_SET(RCC->APB2ENR,RCC_APB2ENR_SYSCFGEN);
 80046fc:	6988      	ldr	r0, [r1, #24]
 80046fe:	f040 0001 	orr.w	r0, r0, #1
 8004702:	6188      	str	r0, [r1, #24]
 // Enable opamp
 BIT_SET(opamp->CSR,OPAMP_CSR_OPAMPxEN);
 8004704:	6811      	ldr	r1, [r2, #0]
 8004706:	f041 0101 	orr.w	r1, r1, #1
 800470a:	6011      	str	r1, [r2, #0]
 // Set as follower
 BIT_FIELD_WRITE(opamp->CSR,5,3,3);
 800470c:	6811      	ldr	r1, [r2, #0]
 800470e:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 8004712:	6011      	str	r1, [r2, #0]
 // Set nii
 BIT_FIELD_WRITE(opamp->CSR,2,3,nii);
 8004714:	6811      	ldr	r1, [r2, #0]
 8004716:	f021 010c 	bic.w	r1, r1, #12
 800471a:	f041 0104 	orr.w	r1, r1, #4
 800471e:	6011      	str	r1, [r2, #0]
//      adc  : Pointer to ADC to use
//   channel : Channel to read 1..
void adcSetChannel(ADC_TypeDef *adc,int channel)
 {
 // Configure for just one conversion
 BIT_FIELD_WRITE(adc->SQR1,0,15,0);
 8004720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004722:	f022 020f 	bic.w	r2, r2, #15
 8004726:	631a      	str	r2, [r3, #48]	; 0x30
 // Set channel to use
 BIT_FIELD_WRITE(adc->SQR1,6,31,channel);
 8004728:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800472a:	f422 62f8 	bic.w	r2, r2, #1984	; 0x7c0
 800472e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004732:	631a      	str	r2, [r3, #48]	; 0x30

 // AD4 PB11 on opamp4 (ch#3) input #1
 adcSetSampleTime(ADC4,3,AC_SAMPLE_TIME);
 adcOpamp(OPAMP4,1);
 adcSetChannel(ADC4,3);
 }
 8004734:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	50000300 	.word	0x50000300
 8004740:	50000400 	.word	0x50000400
 8004744:	40021000 	.word	0x40021000
 8004748:	40010040 	.word	0x40010040
 800474c:	50000100 	.word	0x50000100
 8004750:	4001003c 	.word	0x4001003c
 8004754:	50000500 	.word	0x50000500
 8004758:	40010044 	.word	0x40010044
 800475c:	50000700 	.word	0x50000700

08004760 <iqGetTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t iqGetTimeout(input_queue_t *iqp, systime_t timeout) {
 8004760:	b570      	push	{r4, r5, r6, lr}
 8004762:	2320      	movs	r3, #32
 8004764:	4604      	mov	r4, r0
 8004766:	460e      	mov	r6, r1
 8004768:	f383 8811 	msr	BASEPRI, r3
 800476c:	e003      	b.n	8004776 <iqGetTimeout+0x16>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              systime_t time) {

  return chThdEnqueueTimeoutS(tqp, time);
 800476e:	f7ff f88f 	bl	8003890 <chThdEnqueueTimeoutS>
  osalSysLock();

  /* Waiting until there is a character available or a timeout occurs.*/
  while (iqIsEmptyI(iqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 8004772:	2800      	cmp	r0, #0
 8004774:	db1b      	blt.n	80047ae <iqGetTimeout+0x4e>
  uint8_t b;

  osalSysLock();

  /* Waiting until there is a character available or a timeout occurs.*/
  while (iqIsEmptyI(iqp)) {
 8004776:	68a5      	ldr	r5, [r4, #8]
 8004778:	4620      	mov	r0, r4
 800477a:	4631      	mov	r1, r6
 800477c:	2d00      	cmp	r5, #0
 800477e:	d0f6      	beq.n	800476e <iqGetTimeout+0xe>
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8004780:	69a2      	ldr	r2, [r4, #24]
      return msg;
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
 8004782:	68a0      	ldr	r0, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 8004784:	6921      	ldr	r1, [r4, #16]
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8004786:	1c53      	adds	r3, r2, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 8004788:	428b      	cmp	r3, r1
      return msg;
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
 800478a:	f100 30ff 	add.w	r0, r0, #4294967295
  b = *iqp->q_rdptr++;
 800478e:	61a3      	str	r3, [r4, #24]
      return msg;
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
 8004790:	60a0      	str	r0, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 8004792:	bf28      	it	cs
 8004794:	68e3      	ldrcs	r3, [r4, #12]
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8004796:	7815      	ldrb	r5, [r2, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 8004798:	bf28      	it	cs
 800479a:	61a3      	strcs	r3, [r4, #24]
  }

  /* Inform the low side that the queue has at least one slot available.*/
  if (iqp->q_notify != NULL) {
 800479c:	69e3      	ldr	r3, [r4, #28]
 800479e:	b10b      	cbz	r3, 80047a4 <iqGetTimeout+0x44>
    iqp->q_notify(iqp);
 80047a0:	4620      	mov	r0, r4
 80047a2:	4798      	blx	r3
 80047a4:	2300      	movs	r3, #0
 80047a6:	f383 8811 	msr	BASEPRI, r3
  }

  osalSysUnlock();

  return (msg_t)b;
 80047aa:	4628      	mov	r0, r5
}
 80047ac:	bd70      	pop	{r4, r5, r6, pc}
 80047ae:	f385 8811 	msr	BASEPRI, r5
 80047b2:	bd70      	pop	{r4, r5, r6, pc}
 80047b4:	f3af 8000 	nop.w
 80047b8:	f3af 8000 	nop.w
 80047bc:	f3af 8000 	nop.w

080047c0 <crcResponse>:

// Get and check CRC and sends ECRC in case of error
// If no error, don't respond anything
// Returns 1 if CRC is ok, 0 if not
int crcResponse(void)
 {
 80047c0:	b510      	push	{r4, lr}
// Returns 1 if CRC is ok, 0 if not
int getAndCheckCRC(void)
 {
 int crc;

 crc = sdGet(&SDRIVER);
 80047c2:	480f      	ldr	r0, [pc, #60]	; (8004800 <crcResponse+0x40>)
 80047c4:	f04f 31ff 	mov.w	r1, #4294967295
 80047c8:	f7ff ffca 	bl	8004760 <iqGetTimeout>
 if (crc != crcRx) return 0;
 80047cc:	4b0d      	ldr	r3, [pc, #52]	; (8004804 <crcResponse+0x44>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4298      	cmp	r0, r3
 80047d2:	d012      	beq.n	80047fa <crcResponse+0x3a>
 }

// Send one byte and computes crc
void sendByte(int value)
 {
 sdPut(&SDRIVER,value);
 80047d4:	2125      	movs	r1, #37	; 0x25
 80047d6:	f04f 32ff 	mov.w	r2, #4294967295
 80047da:	480b      	ldr	r0, [pc, #44]	; (8004808 <crcResponse+0x48>)
 80047dc:	f7ff f940 	bl	8003a60 <oqPutTimeout>
 crcTx = crcTx ^ value;
 80047e0:	4b0a      	ldr	r3, [pc, #40]	; (800480c <crcResponse+0x4c>)

// Send Tx CRC
// Usually that ends transmission
void sendCRC(void)
 {
 sdPut(&SDRIVER,crcTx);
 80047e2:	4809      	ldr	r0, [pc, #36]	; (8004808 <crcResponse+0x48>)

// Send one byte and computes crc
void sendByte(int value)
 {
 sdPut(&SDRIVER,value);
 crcTx = crcTx ^ value;
 80047e4:	681c      	ldr	r4, [r3, #0]
 80047e6:	f084 0425 	eor.w	r4, r4, #37	; 0x25

// Send Tx CRC
// Usually that ends transmission
void sendCRC(void)
 {
 sdPut(&SDRIVER,crcTx);
 80047ea:	b2e1      	uxtb	r1, r4
 80047ec:	f04f 32ff 	mov.w	r2, #4294967295

// Send one byte and computes crc
void sendByte(int value)
 {
 sdPut(&SDRIVER,value);
 crcTx = crcTx ^ value;
 80047f0:	601c      	str	r4, [r3, #0]

// Send Tx CRC
// Usually that ends transmission
void sendCRC(void)
 {
 sdPut(&SDRIVER,crcTx);
 80047f2:	f7ff f935 	bl	8003a60 <oqPutTimeout>
 80047f6:	2000      	movs	r0, #0
 // If CRC is not ok
 sendByte(ECRC);
 // End transmission
 sendCRC();
 return 0;
 }
 80047f8:	bd10      	pop	{r4, pc}
// If no error, don't respond anything
// Returns 1 if CRC is ok, 0 if not
int crcResponse(void)
 {
 // Check if CRC is ok
 if (getAndCheckCRC()) return 1;
 80047fa:	2001      	movs	r0, #1
 80047fc:	bd10      	pop	{r4, pc}
 80047fe:	bf00      	nop
 8004800:	20000e6c 	.word	0x20000e6c
 8004804:	20000c50 	.word	0x20000c50
 8004808:	20000e90 	.word	0x20000e90
 800480c:	20000c54 	.word	0x20000c54

08004810 <getByte>:
 return 0;
 }

// Get one byte from the serial stream and computes crc
int getByte(void)
 {
 8004810:	b508      	push	{r3, lr}
 int byte;

 byte = sdGet(&SDRIVER);
 8004812:	f04f 31ff 	mov.w	r1, #4294967295
 8004816:	4804      	ldr	r0, [pc, #16]	; (8004828 <getByte+0x18>)
 8004818:	f7ff ffa2 	bl	8004760 <iqGetTimeout>
 crcRx = crcRx ^ byte;
 800481c:	4b03      	ldr	r3, [pc, #12]	; (800482c <getByte+0x1c>)
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	4042      	eors	r2, r0
 8004822:	601a      	str	r2, [r3, #0]
 return byte;
 }
 8004824:	bd08      	pop	{r3, pc}
 8004826:	bf00      	nop
 8004828:	20000e6c 	.word	0x20000e6c
 800482c:	20000c50 	.word	0x20000c50

08004830 <getU16>:

// Get one uint16 and computes crc
int getU16(void)
 {
 8004830:	b570      	push	{r4, r5, r6, lr}
// Get one byte from the serial stream and computes crc
int getByte(void)
 {
 int byte;

 byte = sdGet(&SDRIVER);
 8004832:	4e0b      	ldr	r6, [pc, #44]	; (8004860 <getU16+0x30>)
 crcRx = crcRx ^ byte;
 8004834:	4c0b      	ldr	r4, [pc, #44]	; (8004864 <getU16+0x34>)
// Get one byte from the serial stream and computes crc
int getByte(void)
 {
 int byte;

 byte = sdGet(&SDRIVER);
 8004836:	4630      	mov	r0, r6
 8004838:	f04f 31ff 	mov.w	r1, #4294967295
 800483c:	f7ff ff90 	bl	8004760 <iqGetTimeout>
 crcRx = crcRx ^ byte;
 8004840:	6823      	ldr	r3, [r4, #0]
// Get one byte from the serial stream and computes crc
int getByte(void)
 {
 int byte;

 byte = sdGet(&SDRIVER);
 8004842:	4605      	mov	r5, r0
 crcRx = crcRx ^ byte;
 8004844:	406b      	eors	r3, r5
// Get one byte from the serial stream and computes crc
int getByte(void)
 {
 int byte;

 byte = sdGet(&SDRIVER);
 8004846:	4630      	mov	r0, r6
 8004848:	f04f 31ff 	mov.w	r1, #4294967295
 crcRx = crcRx ^ byte;
 800484c:	6023      	str	r3, [r4, #0]
// Get one byte from the serial stream and computes crc
int getByte(void)
 {
 int byte;

 byte = sdGet(&SDRIVER);
 800484e:	f7ff ff87 	bl	8004760 <iqGetTimeout>
 crcRx = crcRx ^ byte;
 8004852:	6823      	ldr	r3, [r4, #0]
 8004854:	4043      	eors	r3, r0
 8004856:	6023      	str	r3, [r4, #0]
 low  = getByte();
 high = getByte();
 value = (256 * high) + low;

 return value;
 }
 8004858:	eb05 2000 	add.w	r0, r5, r0, lsl #8
 800485c:	bd70      	pop	{r4, r5, r6, pc}
 800485e:	bf00      	nop
 8004860:	20000e6c 	.word	0x20000e6c
 8004864:	20000c50 	.word	0x20000c50
 8004868:	f3af 8000 	nop.w
 800486c:	f3af 8000 	nop.w

08004870 <_gett.8449>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
}

static msg_t _gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8004870:	300c      	adds	r0, #12
 8004872:	f7ff bf75 	b.w	8004760 <iqGetTimeout>
 8004876:	bf00      	nop
 8004878:	f3af 8000 	nop.w
 800487c:	f3af 8000 	nop.w

08004880 <_get.8453>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t _get(void *ip) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8004880:	300c      	adds	r0, #12
 8004882:	f04f 31ff 	mov.w	r1, #4294967295
 8004886:	f7ff bf6b 	b.w	8004760 <iqGetTimeout>
 800488a:	bf00      	nop
 800488c:	f3af 8000 	nop.w

08004890 <waveResponseCallback.9898>:

/****************** WAVE RESPONSE CODE *************************/

// ISR for the waveResponse function
void waveResponseCallback(GPTDriver *gptp)
 {
 8004890:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 (void)gptp; // So that the compiler don't complain about gptp usage

 // Write DAC if enabled
 if (w_s)
 8004894:	4e62      	ldr	r6, [pc, #392]	; (8004a20 <waveResponseCallback.9898+0x190>)
	 DAC1_WRITE(buff[w_pos++]);
 8004896:	4963      	ldr	r1, [pc, #396]	; (8004a24 <waveResponseCallback.9898+0x194>)
void waveResponseCallback(GPTDriver *gptp)
 {
 (void)gptp; // So that the compiler don't complain about gptp usage

 // Write DAC if enabled
 if (w_s)
 8004898:	6830      	ldr	r0, [r6, #0]
 800489a:	b140      	cbz	r0, 80048ae <waveResponseCallback.9898+0x1e>
	 DAC1_WRITE(buff[w_pos++]);
 800489c:	680b      	ldr	r3, [r1, #0]
 800489e:	4c62      	ldr	r4, [pc, #392]	; (8004a28 <waveResponseCallback.9898+0x198>)
 80048a0:	4a62      	ldr	r2, [pc, #392]	; (8004a2c <waveResponseCallback.9898+0x19c>)
 80048a2:	f834 4013 	ldrh.w	r4, [r4, r3, lsl #1]
 80048a6:	3301      	adds	r3, #1
 80048a8:	0924      	lsrs	r4, r4, #4
 80048aa:	600b      	str	r3, [r1, #0]
 80048ac:	6094      	str	r4, [r2, #8]
 // Write digital if enabled
 if (w_d)
 80048ae:	4d60      	ldr	r5, [pc, #384]	; (8004a30 <waveResponseCallback.9898+0x1a0>)
 80048b0:	682c      	ldr	r4, [r5, #0]
 80048b2:	2c00      	cmp	r4, #0
 80048b4:	d140      	bne.n	8004938 <waveResponseCallback.9898+0xa8>
 80048b6:	4a5f      	ldr	r2, [pc, #380]	; (8004a34 <waveResponseCallback.9898+0x1a4>)
	 (DIO_PORT->ODR) = (waveDbuff[w_posd++])|waved_base;

 // Store analog data
 if (!w_n)
 80048b8:	4b5f      	ldr	r3, [pc, #380]	; (8004a38 <waveResponseCallback.9898+0x1a8>)
 80048ba:	681f      	ldr	r7, [r3, #0]
 80048bc:	bb17      	cbnz	r7, 8004904 <waveResponseCallback.9898+0x74>
      {
	  // Store analog data (Non pipelined mode)
	  if (n_ai) storeAnalog();
 80048be:	4b5f      	ldr	r3, [pc, #380]	; (8004a3c <waveResponseCallback.9898+0x1ac>)
 80048c0:	f8d3 c000 	ldr.w	ip, [r3]
 80048c4:	f1bc 0f00 	cmp.w	ip, #0
 80048c8:	d156      	bne.n	8004978 <waveResponseCallback.9898+0xe8>

	  // Store digital data
	  if (n_di) storeDigital();
 80048ca:	4b5d      	ldr	r3, [pc, #372]	; (8004a40 <waveResponseCallback.9898+0x1b0>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	b15b      	cbz	r3, 80048e8 <waveResponseCallback.9898+0x58>
 }

// Store digital inputs in circular buffer
static inline void storeDigital(void)
 {
 tranBuff[inBuffPos++] = DIO_PORT->IDR;
 80048d0:	485c      	ldr	r0, [pc, #368]	; (8004a44 <waveResponseCallback.9898+0x1b4>)
 80048d2:	4c5d      	ldr	r4, [pc, #372]	; (8004a48 <waveResponseCallback.9898+0x1b8>)
 80048d4:	6803      	ldr	r3, [r0, #0]
 80048d6:	4f5d      	ldr	r7, [pc, #372]	; (8004a4c <waveResponseCallback.9898+0x1bc>)
 80048d8:	6824      	ldr	r4, [r4, #0]
 80048da:	f103 0c01 	add.w	ip, r3, #1
 80048de:	f8c0 c000 	str.w	ip, [r0]
 80048e2:	6938      	ldr	r0, [r7, #16]
 80048e4:	f824 0013 	strh.w	r0, [r4, r3, lsl #1]

	  // Store digital data
	  if (n_di) storeDigital();

      // Increase sample
      samples++;
 80048e8:	4859      	ldr	r0, [pc, #356]	; (8004a50 <waveResponseCallback.9898+0x1c0>)

      // Check if we should end
      if (samples >= n_s)
 80048ea:	4c5a      	ldr	r4, [pc, #360]	; (8004a54 <waveResponseCallback.9898+0x1c4>)

	  // Store digital data
	  if (n_di) storeDigital();

      // Increase sample
      samples++;
 80048ec:	6803      	ldr	r3, [r0, #0]

      // Check if we should end
      if (samples >= n_s)
 80048ee:	6824      	ldr	r4, [r4, #0]

	  // Store digital data
	  if (n_di) storeDigital();

      // Increase sample
      samples++;
 80048f0:	3301      	adds	r3, #1

      // Check if we should end
      if (samples >= n_s)
 80048f2:	42a3      	cmp	r3, r4

	  // Store digital data
	  if (n_di) storeDigital();

      // Increase sample
      samples++;
 80048f4:	6003      	str	r3, [r0, #0]

      // Check if we should end
      if (samples >= n_s)
 80048f6:	db36      	blt.n	8004966 <waveResponseCallback.9898+0xd6>
           {
           // Signal end
           endTicker = 1;
 80048f8:	4b57      	ldr	r3, [pc, #348]	; (8004a58 <waveResponseCallback.9898+0x1c8>)
 80048fa:	682c      	ldr	r4, [r5, #0]
 80048fc:	6830      	ldr	r0, [r6, #0]
 80048fe:	2501      	movs	r5, #1
 8004900:	601d      	str	r5, [r3, #0]
 8004902:	e002      	b.n	800490a <waveResponseCallback.9898+0x7a>
           }
      }
     else
      {
      // Decrease counter
      w_n--;
 8004904:	681d      	ldr	r5, [r3, #0]
 8004906:	3d01      	subs	r5, #1
 8004908:	601d      	str	r5, [r3, #0]
      }

 // Check wave rollover
 if (w_pos == w_s)  w_pos = 0;
 800490a:	680b      	ldr	r3, [r1, #0]
 800490c:	4945      	ldr	r1, [pc, #276]	; (8004a24 <waveResponseCallback.9898+0x194>)
 800490e:	4283      	cmp	r3, r0
 8004910:	bf04      	itt	eq
 8004912:	2300      	moveq	r3, #0
 8004914:	600b      	streq	r3, [r1, #0]
 if (w_posd == w_d) w_posd = 0;
 8004916:	6813      	ldr	r3, [r2, #0]
 8004918:	4a46      	ldr	r2, [pc, #280]	; (8004a34 <waveResponseCallback.9898+0x1a4>)
 800491a:	42a3      	cmp	r3, r4
 800491c:	bf04      	itt	eq
 800491e:	2300      	moveq	r3, #0
 8004920:	6013      	streq	r3, [r2, #0]

 // Check halt
 if (halt)
 8004922:	4b4e      	ldr	r3, [pc, #312]	; (8004a5c <waveResponseCallback.9898+0x1cc>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	bb0b      	cbnz	r3, 800496c <waveResponseCallback.9898+0xdc>
    endTicker = 1;
    return;
    }

 // Check for overrun
 if (overrun)
 8004928:	4b4d      	ldr	r3, [pc, #308]	; (8004a60 <waveResponseCallback.9898+0x1d0>)
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	b9ba      	cbnz	r2, 800495e <waveResponseCallback.9898+0xce>
    overrun_error = 1;

 overrun = 1;
 800492e:	2201      	movs	r2, #1
 8004930:	601a      	str	r2, [r3, #0]
 }
 8004932:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004936:	4770      	bx	lr
 // Write DAC if enabled
 if (w_s)
	 DAC1_WRITE(buff[w_pos++]);
 // Write digital if enabled
 if (w_d)
	 (DIO_PORT->ODR) = (waveDbuff[w_posd++])|waved_base;
 8004938:	4b4a      	ldr	r3, [pc, #296]	; (8004a64 <waveResponseCallback.9898+0x1d4>)
 800493a:	4a3e      	ldr	r2, [pc, #248]	; (8004a34 <waveResponseCallback.9898+0x1a4>)
 800493c:	f8d3 c000 	ldr.w	ip, [r3]
 8004940:	4f49      	ldr	r7, [pc, #292]	; (8004a68 <waveResponseCallback.9898+0x1d8>)
 8004942:	6813      	ldr	r3, [r2, #0]
 8004944:	f8d7 8000 	ldr.w	r8, [r7]
 8004948:	f83c 9013 	ldrh.w	r9, [ip, r3, lsl #1]
 800494c:	4f3f      	ldr	r7, [pc, #252]	; (8004a4c <waveResponseCallback.9898+0x1bc>)
 800494e:	f103 0c01 	add.w	ip, r3, #1
 8004952:	ea49 0308 	orr.w	r3, r9, r8
 8004956:	f8c2 c000 	str.w	ip, [r2]
 800495a:	617b      	str	r3, [r7, #20]
 800495c:	e7ac      	b.n	80048b8 <waveResponseCallback.9898+0x28>
    return;
    }

 // Check for overrun
 if (overrun)
    overrun_error = 1;
 800495e:	4a43      	ldr	r2, [pc, #268]	; (8004a6c <waveResponseCallback.9898+0x1dc>)
 8004960:	2101      	movs	r1, #1
 8004962:	6011      	str	r1, [r2, #0]
 8004964:	e7e3      	b.n	800492e <waveResponseCallback.9898+0x9e>
 8004966:	6830      	ldr	r0, [r6, #0]
 8004968:	682c      	ldr	r4, [r5, #0]
 800496a:	e7ce      	b.n	800490a <waveResponseCallback.9898+0x7a>

 // Check halt
 if (halt)
    {
    // Signal end
    endTicker = 1;
 800496c:	4b3a      	ldr	r3, [pc, #232]	; (8004a58 <waveResponseCallback.9898+0x1c8>)
 800496e:	2201      	movs	r2, #1
 8004970:	601a      	str	r2, [r3, #0]
 // Check for overrun
 if (overrun)
    overrun_error = 1;

 overrun = 1;
 }
 8004972:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004976:	4770      	bx	lr
// Checked with hardware profiling that it is inlined
static inline int storeAnalog(void)
 {
 int a1,a2,a3,a4;

 if (inBuffPos == currentBsize) inBuffPos = 0;
 8004978:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8004a44 <waveResponseCallback.9898+0x1b4>
 800497c:	483c      	ldr	r0, [pc, #240]	; (8004a70 <waveResponseCallback.9898+0x1e0>)
 800497e:	f8d8 3000 	ldr.w	r3, [r8]
 8004982:	6800      	ldr	r0, [r0, #0]

 ADC1->CR |= ADC_CR_ADSTART;
 ADC3->CR |= ADC_CR_ADSTART;
 8004984:	4c3b      	ldr	r4, [pc, #236]	; (8004a74 <waveResponseCallback.9898+0x1e4>)
// Checked with hardware profiling that it is inlined
static inline int storeAnalog(void)
 {
 int a1,a2,a3,a4;

 if (inBuffPos == currentBsize) inBuffPos = 0;
 8004986:	4283      	cmp	r3, r0

 ADC1->CR |= ADC_CR_ADSTART;
 8004988:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
// Checked with hardware profiling that it is inlined
static inline int storeAnalog(void)
 {
 int a1,a2,a3,a4;

 if (inBuffPos == currentBsize) inBuffPos = 0;
 800498c:	bf08      	it	eq
 800498e:	f8c8 7000 	streq.w	r7, [r8]

 ADC1->CR |= ADC_CR_ADSTART;
 8004992:	6898      	ldr	r0, [r3, #8]
 8004994:	f040 0004 	orr.w	r0, r0, #4
 8004998:	6098      	str	r0, [r3, #8]
 ADC3->CR |= ADC_CR_ADSTART;
 800499a:	68a3      	ldr	r3, [r4, #8]
 800499c:	f043 0304 	orr.w	r3, r3, #4
 80049a0:	60a3      	str	r3, [r4, #8]
 while (!(ADC3->ISR & ADC_ISR_EOC));
 80049a2:	6823      	ldr	r3, [r4, #0]
 80049a4:	4833      	ldr	r0, [pc, #204]	; (8004a74 <waveResponseCallback.9898+0x1e4>)
 80049a6:	075b      	lsls	r3, r3, #29
 80049a8:	d5fb      	bpl.n	80049a2 <waveResponseCallback.9898+0x112>

 a4 = (ADC1->DR)<<4;
 80049aa:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
 a2 = (ADC2->DR)<<4;
 80049ae:	4c32      	ldr	r4, [pc, #200]	; (8004a78 <waveResponseCallback.9898+0x1e8>)
 a1 = (ADC3->DR)<<4;
 a3 = (ADC4->DR)<<4;
 80049b0:	4b32      	ldr	r3, [pc, #200]	; (8004a7c <waveResponseCallback.9898+0x1ec>)

 ADC1->CR |= ADC_CR_ADSTART;
 ADC3->CR |= ADC_CR_ADSTART;
 while (!(ADC3->ISR & ADC_ISR_EOC));

 a4 = (ADC1->DR)<<4;
 80049b2:	f8d7 9040 	ldr.w	r9, [r7, #64]	; 0x40
 a2 = (ADC2->DR)<<4;
 80049b6:	6c27      	ldr	r7, [r4, #64]	; 0x40
 a1 = (ADC3->DR)<<4;
 80049b8:	6c04      	ldr	r4, [r0, #64]	; 0x40
 a3 = (ADC4->DR)<<4;
 80049ba:	f8d3 a040 	ldr.w	sl, [r3, #64]	; 0x40

 if (n_ai >= 1) tranBuff[inBuffPos++] = a1;
 80049be:	f1bc 0f00 	cmp.w	ip, #0
 80049c2:	dd82      	ble.n	80048ca <waveResponseCallback.9898+0x3a>
 80049c4:	4820      	ldr	r0, [pc, #128]	; (8004a48 <waveResponseCallback.9898+0x1b8>)
 80049c6:	f8d8 3000 	ldr.w	r3, [r8]
 80049ca:	6800      	ldr	r0, [r0, #0]
 ADC3->CR |= ADC_CR_ADSTART;
 while (!(ADC3->ISR & ADC_ISR_EOC));

 a4 = (ADC1->DR)<<4;
 a2 = (ADC2->DR)<<4;
 a1 = (ADC3->DR)<<4;
 80049cc:	0124      	lsls	r4, r4, #4
 a3 = (ADC4->DR)<<4;

 if (n_ai >= 1) tranBuff[inBuffPos++] = a1;
 80049ce:	f103 0b01 	add.w	fp, r3, #1
 if (n_ai >= 2) tranBuff[inBuffPos++] = a2;
 80049d2:	f1bc 0f01 	cmp.w	ip, #1
 a4 = (ADC1->DR)<<4;
 a2 = (ADC2->DR)<<4;
 a1 = (ADC3->DR)<<4;
 a3 = (ADC4->DR)<<4;

 if (n_ai >= 1) tranBuff[inBuffPos++] = a1;
 80049d6:	f8c8 b000 	str.w	fp, [r8]
 80049da:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
 80049de:	ea4f 0843 	mov.w	r8, r3, lsl #1
 80049e2:	4c18      	ldr	r4, [pc, #96]	; (8004a44 <waveResponseCallback.9898+0x1b4>)
 if (n_ai >= 2) tranBuff[inBuffPos++] = a2;
 80049e4:	f43f af71 	beq.w	80048ca <waveResponseCallback.9898+0x3a>
 80049e8:	4440      	add	r0, r8
 ADC1->CR |= ADC_CR_ADSTART;
 ADC3->CR |= ADC_CR_ADSTART;
 while (!(ADC3->ISR & ADC_ISR_EOC));

 a4 = (ADC1->DR)<<4;
 a2 = (ADC2->DR)<<4;
 80049ea:	013f      	lsls	r7, r7, #4
 a1 = (ADC3->DR)<<4;
 a3 = (ADC4->DR)<<4;

 if (n_ai >= 1) tranBuff[inBuffPos++] = a1;
 if (n_ai >= 2) tranBuff[inBuffPos++] = a2;
 80049ec:	f103 0802 	add.w	r8, r3, #2
 if (n_ai >= 3) tranBuff[inBuffPos++] = a3;
 80049f0:	f1bc 0f02 	cmp.w	ip, #2
 a2 = (ADC2->DR)<<4;
 a1 = (ADC3->DR)<<4;
 a3 = (ADC4->DR)<<4;

 if (n_ai >= 1) tranBuff[inBuffPos++] = a1;
 if (n_ai >= 2) tranBuff[inBuffPos++] = a2;
 80049f4:	f8c4 8000 	str.w	r8, [r4]
 80049f8:	8047      	strh	r7, [r0, #2]
 if (n_ai >= 3) tranBuff[inBuffPos++] = a3;
 80049fa:	f43f af66 	beq.w	80048ca <waveResponseCallback.9898+0x3a>
 while (!(ADC3->ISR & ADC_ISR_EOC));

 a4 = (ADC1->DR)<<4;
 a2 = (ADC2->DR)<<4;
 a1 = (ADC3->DR)<<4;
 a3 = (ADC4->DR)<<4;
 80049fe:	ea4f 1a0a 	mov.w	sl, sl, lsl #4

 if (n_ai >= 1) tranBuff[inBuffPos++] = a1;
 if (n_ai >= 2) tranBuff[inBuffPos++] = a2;
 if (n_ai >= 3) tranBuff[inBuffPos++] = a3;
 8004a02:	1cdf      	adds	r7, r3, #3
 if (n_ai >= 4) tranBuff[inBuffPos++] = a4;
 8004a04:	f1bc 0f03 	cmp.w	ip, #3
 a1 = (ADC3->DR)<<4;
 a3 = (ADC4->DR)<<4;

 if (n_ai >= 1) tranBuff[inBuffPos++] = a1;
 if (n_ai >= 2) tranBuff[inBuffPos++] = a2;
 if (n_ai >= 3) tranBuff[inBuffPos++] = a3;
 8004a08:	6027      	str	r7, [r4, #0]
 8004a0a:	f8a0 a004 	strh.w	sl, [r0, #4]
 if (n_ai >= 4) tranBuff[inBuffPos++] = a4;
 8004a0e:	f43f af5c 	beq.w	80048ca <waveResponseCallback.9898+0x3a>
 8004a12:	3304      	adds	r3, #4

 ADC1->CR |= ADC_CR_ADSTART;
 ADC3->CR |= ADC_CR_ADSTART;
 while (!(ADC3->ISR & ADC_ISR_EOC));

 a4 = (ADC1->DR)<<4;
 8004a14:	ea4f 1909 	mov.w	r9, r9, lsl #4
 a3 = (ADC4->DR)<<4;

 if (n_ai >= 1) tranBuff[inBuffPos++] = a1;
 if (n_ai >= 2) tranBuff[inBuffPos++] = a2;
 if (n_ai >= 3) tranBuff[inBuffPos++] = a3;
 if (n_ai >= 4) tranBuff[inBuffPos++] = a4;
 8004a18:	6023      	str	r3, [r4, #0]
 8004a1a:	f8a0 9006 	strh.w	r9, [r0, #6]
 8004a1e:	e754      	b.n	80048ca <waveResponseCallback.9898+0x3a>
 8004a20:	2000f9cc 	.word	0x2000f9cc
 8004a24:	20000e50 	.word	0x20000e50
 8004a28:	20000f6c 	.word	0x20000f6c
 8004a2c:	40007400 	.word	0x40007400
 8004a30:	20000f44 	.word	0x20000f44
 8004a34:	20000f64 	.word	0x20000f64
 8004a38:	20000818 	.word	0x20000818
 8004a3c:	20000804 	.word	0x20000804
 8004a40:	20000f40 	.word	0x20000f40
 8004a44:	20000e58 	.word	0x20000e58
 8004a48:	20000cb8 	.word	0x20000cb8
 8004a4c:	48000800 	.word	0x48000800
 8004a50:	20000c58 	.word	0x20000c58
 8004a54:	20000814 	.word	0x20000814
 8004a58:	20000f68 	.word	0x20000f68
 8004a5c:	20000e4c 	.word	0x20000e4c
 8004a60:	20000c94 	.word	0x20000c94
 8004a64:	20000f4c 	.word	0x20000f4c
 8004a68:	20000cb0 	.word	0x20000cb0
 8004a6c:	20000c90 	.word	0x20000c90
 8004a70:	20000c98 	.word	0x20000c98
 8004a74:	50000400 	.word	0x50000400
 8004a78:	50000100 	.word	0x50000100
 8004a7c:	50000500 	.word	0x50000500

08004a80 <stepResponseCallback.9895>:
void stepResponseCallback(GPTDriver *gptp)
 {
 (void)gptp; // So that the compiler don't complain about gptp usage

 // Store analog data (Non pipelined mode)
 if (n_ai) storeAnalog();
 8004a80:	4b3e      	ldr	r3, [pc, #248]	; (8004b7c <stepResponseCallback.9895+0xfc>)
 8004a82:	6818      	ldr	r0, [r3, #0]
// Hardware profiling operation (if enabled)
//   Not implemented yet

// Callback for the stepResponse function
void stepResponseCallback(GPTDriver *gptp)
 {
 8004a84:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 (void)gptp; // So that the compiler don't complain about gptp usage

 // Store analog data (Non pipelined mode)
 if (n_ai) storeAnalog();
 8004a88:	2800      	cmp	r0, #0
 8004a8a:	d12c      	bne.n	8004ae6 <stepResponseCallback.9895+0x66>

 // Store digital data
 if (n_di) storeDigital();
 8004a8c:	4b3c      	ldr	r3, [pc, #240]	; (8004b80 <stepResponseCallback.9895+0x100>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	b14b      	cbz	r3, 8004aa6 <stepResponseCallback.9895+0x26>
 }

// Store digital inputs in circular buffer
static inline void storeDigital(void)
 {
 tranBuff[inBuffPos++] = DIO_PORT->IDR;
 8004a92:	4a3c      	ldr	r2, [pc, #240]	; (8004b84 <stepResponseCallback.9895+0x104>)
 8004a94:	493c      	ldr	r1, [pc, #240]	; (8004b88 <stepResponseCallback.9895+0x108>)
 8004a96:	6813      	ldr	r3, [r2, #0]
 8004a98:	483c      	ldr	r0, [pc, #240]	; (8004b8c <stepResponseCallback.9895+0x10c>)
 8004a9a:	6809      	ldr	r1, [r1, #0]
 8004a9c:	1c5c      	adds	r4, r3, #1
 8004a9e:	6014      	str	r4, [r2, #0]
 8004aa0:	6902      	ldr	r2, [r0, #16]
 8004aa2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

 // Store digital data
 if (n_di) storeDigital();

 // Increase sample
 samples++;
 8004aa6:	4a3a      	ldr	r2, [pc, #232]	; (8004b90 <stepResponseCallback.9895+0x110>)

 // Check trigger position
 if (samples == triggerSample)
 8004aa8:	493a      	ldr	r1, [pc, #232]	; (8004b94 <stepResponseCallback.9895+0x114>)

 // Store digital data
 if (n_di) storeDigital();

 // Increase sample
 samples++;
 8004aaa:	6813      	ldr	r3, [r2, #0]

 // Check trigger position
 if (samples == triggerSample)
 8004aac:	6809      	ldr	r1, [r1, #0]

 // Store digital data
 if (n_di) storeDigital();

 // Increase sample
 samples++;
 8004aae:	3301      	adds	r3, #1

 // Check trigger position
 if (samples == triggerSample)
 8004ab0:	428b      	cmp	r3, r1

 // Store digital data
 if (n_di) storeDigital();

 // Increase sample
 samples++;
 8004ab2:	6013      	str	r3, [r2, #0]

 // Check trigger position
 if (samples == triggerSample)
 8004ab4:	d05c      	beq.n	8004b70 <stepResponseCallback.9895+0xf0>
       DAC1_WRITE(stepValue);

 // Check halt
 if (halt)
 8004ab6:	4a38      	ldr	r2, [pc, #224]	; (8004b98 <stepResponseCallback.9895+0x118>)
 8004ab8:	6812      	ldr	r2, [r2, #0]
 8004aba:	b112      	cbz	r2, 8004ac2 <stepResponseCallback.9895+0x42>
    {
    // Signal end
    endTicker = 1;
 8004abc:	4a37      	ldr	r2, [pc, #220]	; (8004b9c <stepResponseCallback.9895+0x11c>)
 8004abe:	2101      	movs	r1, #1
 8004ac0:	6011      	str	r1, [r2, #0]
    }

 // Check if we should end
 if (samples >= n_s)
 8004ac2:	4a37      	ldr	r2, [pc, #220]	; (8004ba0 <stepResponseCallback.9895+0x120>)
 8004ac4:	6812      	ldr	r2, [r2, #0]
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	db02      	blt.n	8004ad0 <stepResponseCallback.9895+0x50>
    {
    // Signal end
    endTicker = 1;
 8004aca:	4b34      	ldr	r3, [pc, #208]	; (8004b9c <stepResponseCallback.9895+0x11c>)
 8004acc:	2201      	movs	r2, #1
 8004ace:	601a      	str	r2, [r3, #0]
    }

 // Check for overrun
 if (overrun)
 8004ad0:	4b34      	ldr	r3, [pc, #208]	; (8004ba4 <stepResponseCallback.9895+0x124>)
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	b112      	cbz	r2, 8004adc <stepResponseCallback.9895+0x5c>
    overrun_error = 1;
 8004ad6:	4a34      	ldr	r2, [pc, #208]	; (8004ba8 <stepResponseCallback.9895+0x128>)
 8004ad8:	2101      	movs	r1, #1
 8004ada:	6011      	str	r1, [r2, #0]

 overrun = 1;
 8004adc:	2201      	movs	r2, #1
 8004ade:	601a      	str	r2, [r3, #0]
 }
 8004ae0:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8004ae4:	4770      	bx	lr
// Checked with hardware profiling that it is inlined
static inline int storeAnalog(void)
 {
 int a1,a2,a3,a4;

 if (inBuffPos == currentBsize) inBuffPos = 0;
 8004ae6:	4c27      	ldr	r4, [pc, #156]	; (8004b84 <stepResponseCallback.9895+0x104>)
 8004ae8:	4a30      	ldr	r2, [pc, #192]	; (8004bac <stepResponseCallback.9895+0x12c>)
 8004aea:	6823      	ldr	r3, [r4, #0]
 8004aec:	6812      	ldr	r2, [r2, #0]

 ADC1->CR |= ADC_CR_ADSTART;
 ADC3->CR |= ADC_CR_ADSTART;
 8004aee:	4930      	ldr	r1, [pc, #192]	; (8004bb0 <stepResponseCallback.9895+0x130>)
// Checked with hardware profiling that it is inlined
static inline int storeAnalog(void)
 {
 int a1,a2,a3,a4;

 if (inBuffPos == currentBsize) inBuffPos = 0;
 8004af0:	4293      	cmp	r3, r2
 8004af2:	bf04      	itt	eq
 8004af4:	2300      	moveq	r3, #0
 8004af6:	6023      	streq	r3, [r4, #0]

 ADC1->CR |= ADC_CR_ADSTART;
 8004af8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004afc:	689a      	ldr	r2, [r3, #8]
 8004afe:	f042 0204 	orr.w	r2, r2, #4
 8004b02:	609a      	str	r2, [r3, #8]
 ADC3->CR |= ADC_CR_ADSTART;
 8004b04:	688b      	ldr	r3, [r1, #8]
 8004b06:	f043 0304 	orr.w	r3, r3, #4
 8004b0a:	608b      	str	r3, [r1, #8]
 while (!(ADC3->ISR & ADC_ISR_EOC));
 8004b0c:	680b      	ldr	r3, [r1, #0]
 8004b0e:	4a28      	ldr	r2, [pc, #160]	; (8004bb0 <stepResponseCallback.9895+0x130>)
 8004b10:	075b      	lsls	r3, r3, #29
 8004b12:	d5fb      	bpl.n	8004b0c <stepResponseCallback.9895+0x8c>

 a4 = (ADC1->DR)<<4;
 8004b14:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
 a2 = (ADC2->DR)<<4;
 8004b18:	4926      	ldr	r1, [pc, #152]	; (8004bb4 <stepResponseCallback.9895+0x134>)
 a1 = (ADC3->DR)<<4;
 a3 = (ADC4->DR)<<4;
 8004b1a:	4b27      	ldr	r3, [pc, #156]	; (8004bb8 <stepResponseCallback.9895+0x138>)

 ADC1->CR |= ADC_CR_ADSTART;
 ADC3->CR |= ADC_CR_ADSTART;
 while (!(ADC3->ISR & ADC_ISR_EOC));

 a4 = (ADC1->DR)<<4;
 8004b1c:	6c2f      	ldr	r7, [r5, #64]	; 0x40
 a2 = (ADC2->DR)<<4;
 8004b1e:	6c0d      	ldr	r5, [r1, #64]	; 0x40
 a1 = (ADC3->DR)<<4;
 8004b20:	6c16      	ldr	r6, [r2, #64]	; 0x40
 a3 = (ADC4->DR)<<4;
 8004b22:	f8d3 c040 	ldr.w	ip, [r3, #64]	; 0x40

 if (n_ai >= 1) tranBuff[inBuffPos++] = a1;
 8004b26:	2800      	cmp	r0, #0
 8004b28:	ddb0      	ble.n	8004a8c <stepResponseCallback.9895+0xc>
 8004b2a:	4a17      	ldr	r2, [pc, #92]	; (8004b88 <stepResponseCallback.9895+0x108>)
 8004b2c:	6823      	ldr	r3, [r4, #0]
 8004b2e:	6812      	ldr	r2, [r2, #0]
 8004b30:	4914      	ldr	r1, [pc, #80]	; (8004b84 <stepResponseCallback.9895+0x104>)
 ADC3->CR |= ADC_CR_ADSTART;
 while (!(ADC3->ISR & ADC_ISR_EOC));

 a4 = (ADC1->DR)<<4;
 a2 = (ADC2->DR)<<4;
 a1 = (ADC3->DR)<<4;
 8004b32:	0136      	lsls	r6, r6, #4
 a3 = (ADC4->DR)<<4;

 if (n_ai >= 1) tranBuff[inBuffPos++] = a1;
 8004b34:	f103 0801 	add.w	r8, r3, #1
 if (n_ai >= 2) tranBuff[inBuffPos++] = a2;
 8004b38:	2801      	cmp	r0, #1
 a4 = (ADC1->DR)<<4;
 a2 = (ADC2->DR)<<4;
 a1 = (ADC3->DR)<<4;
 a3 = (ADC4->DR)<<4;

 if (n_ai >= 1) tranBuff[inBuffPos++] = a1;
 8004b3a:	f8c4 8000 	str.w	r8, [r4]
 8004b3e:	ea4f 0443 	mov.w	r4, r3, lsl #1
 8004b42:	f822 6013 	strh.w	r6, [r2, r3, lsl #1]
 if (n_ai >= 2) tranBuff[inBuffPos++] = a2;
 8004b46:	d0a1      	beq.n	8004a8c <stepResponseCallback.9895+0xc>
 8004b48:	4422      	add	r2, r4
 ADC1->CR |= ADC_CR_ADSTART;
 ADC3->CR |= ADC_CR_ADSTART;
 while (!(ADC3->ISR & ADC_ISR_EOC));

 a4 = (ADC1->DR)<<4;
 a2 = (ADC2->DR)<<4;
 8004b4a:	012d      	lsls	r5, r5, #4
 a1 = (ADC3->DR)<<4;
 a3 = (ADC4->DR)<<4;

 if (n_ai >= 1) tranBuff[inBuffPos++] = a1;
 if (n_ai >= 2) tranBuff[inBuffPos++] = a2;
 8004b4c:	1c9c      	adds	r4, r3, #2
 if (n_ai >= 3) tranBuff[inBuffPos++] = a3;
 8004b4e:	2802      	cmp	r0, #2
 a2 = (ADC2->DR)<<4;
 a1 = (ADC3->DR)<<4;
 a3 = (ADC4->DR)<<4;

 if (n_ai >= 1) tranBuff[inBuffPos++] = a1;
 if (n_ai >= 2) tranBuff[inBuffPos++] = a2;
 8004b50:	600c      	str	r4, [r1, #0]
 8004b52:	8055      	strh	r5, [r2, #2]
 if (n_ai >= 3) tranBuff[inBuffPos++] = a3;
 8004b54:	d09a      	beq.n	8004a8c <stepResponseCallback.9895+0xc>
 while (!(ADC3->ISR & ADC_ISR_EOC));

 a4 = (ADC1->DR)<<4;
 a2 = (ADC2->DR)<<4;
 a1 = (ADC3->DR)<<4;
 a3 = (ADC4->DR)<<4;
 8004b56:	ea4f 1c0c 	mov.w	ip, ip, lsl #4

 if (n_ai >= 1) tranBuff[inBuffPos++] = a1;
 if (n_ai >= 2) tranBuff[inBuffPos++] = a2;
 if (n_ai >= 3) tranBuff[inBuffPos++] = a3;
 8004b5a:	1cdc      	adds	r4, r3, #3
 if (n_ai >= 4) tranBuff[inBuffPos++] = a4;
 8004b5c:	2803      	cmp	r0, #3
 a1 = (ADC3->DR)<<4;
 a3 = (ADC4->DR)<<4;

 if (n_ai >= 1) tranBuff[inBuffPos++] = a1;
 if (n_ai >= 2) tranBuff[inBuffPos++] = a2;
 if (n_ai >= 3) tranBuff[inBuffPos++] = a3;
 8004b5e:	600c      	str	r4, [r1, #0]
 8004b60:	f8a2 c004 	strh.w	ip, [r2, #4]
 if (n_ai >= 4) tranBuff[inBuffPos++] = a4;
 8004b64:	d092      	beq.n	8004a8c <stepResponseCallback.9895+0xc>
 8004b66:	3304      	adds	r3, #4

 ADC1->CR |= ADC_CR_ADSTART;
 ADC3->CR |= ADC_CR_ADSTART;
 while (!(ADC3->ISR & ADC_ISR_EOC));

 a4 = (ADC1->DR)<<4;
 8004b68:	013f      	lsls	r7, r7, #4
 a3 = (ADC4->DR)<<4;

 if (n_ai >= 1) tranBuff[inBuffPos++] = a1;
 if (n_ai >= 2) tranBuff[inBuffPos++] = a2;
 if (n_ai >= 3) tranBuff[inBuffPos++] = a3;
 if (n_ai >= 4) tranBuff[inBuffPos++] = a4;
 8004b6a:	600b      	str	r3, [r1, #0]
 8004b6c:	80d7      	strh	r7, [r2, #6]
 8004b6e:	e78d      	b.n	8004a8c <stepResponseCallback.9895+0xc>
 // Increase sample
 samples++;

 // Check trigger position
 if (samples == triggerSample)
       DAC1_WRITE(stepValue);
 8004b70:	4912      	ldr	r1, [pc, #72]	; (8004bbc <stepResponseCallback.9895+0x13c>)
 8004b72:	4a13      	ldr	r2, [pc, #76]	; (8004bc0 <stepResponseCallback.9895+0x140>)
 8004b74:	6809      	ldr	r1, [r1, #0]
 8004b76:	1109      	asrs	r1, r1, #4
 8004b78:	6091      	str	r1, [r2, #8]
 8004b7a:	e79c      	b.n	8004ab6 <stepResponseCallback.9895+0x36>
 8004b7c:	20000804 	.word	0x20000804
 8004b80:	20000f40 	.word	0x20000f40
 8004b84:	20000e58 	.word	0x20000e58
 8004b88:	20000cb8 	.word	0x20000cb8
 8004b8c:	48000800 	.word	0x48000800
 8004b90:	20000c58 	.word	0x20000c58
 8004b94:	20000c5c 	.word	0x20000c5c
 8004b98:	20000e4c 	.word	0x20000e4c
 8004b9c:	20000f68 	.word	0x20000f68
 8004ba0:	20000814 	.word	0x20000814
 8004ba4:	20000c94 	.word	0x20000c94
 8004ba8:	20000c90 	.word	0x20000c90
 8004bac:	20000c98 	.word	0x20000c98
 8004bb0:	50000400 	.word	0x50000400
 8004bb4:	50000100 	.word	0x50000100
 8004bb8:	50000500 	.word	0x50000500
 8004bbc:	20000e5c 	.word	0x20000e5c
 8004bc0:	40007400 	.word	0x40007400
 8004bc4:	f3af 8000 	nop.w
 8004bc8:	f3af 8000 	nop.w
 8004bcc:	f3af 8000 	nop.w

08004bd0 <asyncReadCallback.9915>:
static void asyncReadCallback(GPTDriver *gptp)
 {
 (void)gptp; // So that the compiler don't complain about gptp usage

 // Store analog data (Non pipelined mode)
 if (n_ai) storeAnalog();
 8004bd0:	4b39      	ldr	r3, [pc, #228]	; (8004cb8 <asyncReadCallback.9915+0xe8>)
 8004bd2:	6818      	ldr	r0, [r3, #0]
//   PRO2 line mimics overrun variable
// Currently, minimum sample time is 25us (40kHz)


static void asyncReadCallback(GPTDriver *gptp)
 {
 8004bd4:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 (void)gptp; // So that the compiler don't complain about gptp usage

 // Store analog data (Non pipelined mode)
 if (n_ai) storeAnalog();
 8004bd8:	2800      	cmp	r0, #0
 8004bda:	d128      	bne.n	8004c2e <asyncReadCallback.9915+0x5e>
 // Store analog data (Pipelined mode)
 //if (samples) storeADCs();
 //runADCs();

 // Store digital data
 if (n_di) storeDigital();
 8004bdc:	4b37      	ldr	r3, [pc, #220]	; (8004cbc <asyncReadCallback.9915+0xec>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	b14b      	cbz	r3, 8004bf6 <asyncReadCallback.9915+0x26>
 }

// Store digital inputs in circular buffer
static inline void storeDigital(void)
 {
 tranBuff[inBuffPos++] = DIO_PORT->IDR;
 8004be2:	4a37      	ldr	r2, [pc, #220]	; (8004cc0 <asyncReadCallback.9915+0xf0>)
 8004be4:	4937      	ldr	r1, [pc, #220]	; (8004cc4 <asyncReadCallback.9915+0xf4>)
 8004be6:	6813      	ldr	r3, [r2, #0]
 8004be8:	4837      	ldr	r0, [pc, #220]	; (8004cc8 <asyncReadCallback.9915+0xf8>)
 8004bea:	6809      	ldr	r1, [r1, #0]
 8004bec:	1c5c      	adds	r4, r3, #1
 8004bee:	6014      	str	r4, [r2, #0]
 8004bf0:	6902      	ldr	r2, [r0, #16]
 8004bf2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

 // Store digital data
 if (n_di) storeDigital();

 // Increase sample
 samples++;
 8004bf6:	4a35      	ldr	r2, [pc, #212]	; (8004ccc <asyncReadCallback.9915+0xfc>)

 // Check if we should end
 if (samples >= n_s)
 8004bf8:	4935      	ldr	r1, [pc, #212]	; (8004cd0 <asyncReadCallback.9915+0x100>)

 // Store digital data
 if (n_di) storeDigital();

 // Increase sample
 samples++;
 8004bfa:	6813      	ldr	r3, [r2, #0]

 // Check if we should end
 if (samples >= n_s)
 8004bfc:	6809      	ldr	r1, [r1, #0]

 // Store digital data
 if (n_di) storeDigital();

 // Increase sample
 samples++;
 8004bfe:	3301      	adds	r3, #1

 // Check if we should end
 if (samples >= n_s)
 8004c00:	428b      	cmp	r3, r1

 // Store digital data
 if (n_di) storeDigital();

 // Increase sample
 samples++;
 8004c02:	6013      	str	r3, [r2, #0]

 // Check if we should end
 if (samples >= n_s)
 8004c04:	da0d      	bge.n	8004c22 <asyncReadCallback.9915+0x52>
    endTicker = 1;
    return;
    }

 // Check for halt
 if (halt)
 8004c06:	4b33      	ldr	r3, [pc, #204]	; (8004cd4 <asyncReadCallback.9915+0x104>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	b953      	cbnz	r3, 8004c22 <asyncReadCallback.9915+0x52>
    //PRO1_CLEAR // Profiling
    return;
    }

 // Check for overrun
 if (overrun)
 8004c0c:	4b32      	ldr	r3, [pc, #200]	; (8004cd8 <asyncReadCallback.9915+0x108>)
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	b112      	cbz	r2, 8004c18 <asyncReadCallback.9915+0x48>
    {
	overrun_error = 1;
 8004c12:	4a32      	ldr	r2, [pc, #200]	; (8004cdc <asyncReadCallback.9915+0x10c>)
 8004c14:	2101      	movs	r1, #1
 8004c16:	6011      	str	r1, [r2, #0]
    }

 overrun = 1;
 8004c18:	2201      	movs	r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]

 }
 8004c1c:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8004c20:	4770      	bx	lr

 // Check for halt
 if (halt)
    {
    // Signal end
    endTicker = 1;
 8004c22:	4b2f      	ldr	r3, [pc, #188]	; (8004ce0 <asyncReadCallback.9915+0x110>)
 8004c24:	2201      	movs	r2, #1
 8004c26:	601a      	str	r2, [r3, #0]
	overrun_error = 1;
    }

 overrun = 1;

 }
 8004c28:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8004c2c:	4770      	bx	lr
// Checked with hardware profiling that it is inlined
static inline int storeAnalog(void)
 {
 int a1,a2,a3,a4;

 if (inBuffPos == currentBsize) inBuffPos = 0;
 8004c2e:	4c24      	ldr	r4, [pc, #144]	; (8004cc0 <asyncReadCallback.9915+0xf0>)
 8004c30:	4a2c      	ldr	r2, [pc, #176]	; (8004ce4 <asyncReadCallback.9915+0x114>)
 8004c32:	6823      	ldr	r3, [r4, #0]
 8004c34:	6812      	ldr	r2, [r2, #0]

 ADC1->CR |= ADC_CR_ADSTART;
 ADC3->CR |= ADC_CR_ADSTART;
 8004c36:	492c      	ldr	r1, [pc, #176]	; (8004ce8 <asyncReadCallback.9915+0x118>)
// Checked with hardware profiling that it is inlined
static inline int storeAnalog(void)
 {
 int a1,a2,a3,a4;

 if (inBuffPos == currentBsize) inBuffPos = 0;
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	bf04      	itt	eq
 8004c3c:	2300      	moveq	r3, #0
 8004c3e:	6023      	streq	r3, [r4, #0]

 ADC1->CR |= ADC_CR_ADSTART;
 8004c40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004c44:	689a      	ldr	r2, [r3, #8]
 8004c46:	f042 0204 	orr.w	r2, r2, #4
 8004c4a:	609a      	str	r2, [r3, #8]
 ADC3->CR |= ADC_CR_ADSTART;
 8004c4c:	688b      	ldr	r3, [r1, #8]
 8004c4e:	f043 0304 	orr.w	r3, r3, #4
 8004c52:	608b      	str	r3, [r1, #8]
 while (!(ADC3->ISR & ADC_ISR_EOC));
 8004c54:	680b      	ldr	r3, [r1, #0]
 8004c56:	4a24      	ldr	r2, [pc, #144]	; (8004ce8 <asyncReadCallback.9915+0x118>)
 8004c58:	075b      	lsls	r3, r3, #29
 8004c5a:	d5fb      	bpl.n	8004c54 <asyncReadCallback.9915+0x84>

 a4 = (ADC1->DR)<<4;
 8004c5c:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
 a2 = (ADC2->DR)<<4;
 8004c60:	4922      	ldr	r1, [pc, #136]	; (8004cec <asyncReadCallback.9915+0x11c>)
 a1 = (ADC3->DR)<<4;
 a3 = (ADC4->DR)<<4;
 8004c62:	4b23      	ldr	r3, [pc, #140]	; (8004cf0 <asyncReadCallback.9915+0x120>)

 ADC1->CR |= ADC_CR_ADSTART;
 ADC3->CR |= ADC_CR_ADSTART;
 while (!(ADC3->ISR & ADC_ISR_EOC));

 a4 = (ADC1->DR)<<4;
 8004c64:	6c2f      	ldr	r7, [r5, #64]	; 0x40
 a2 = (ADC2->DR)<<4;
 8004c66:	6c0d      	ldr	r5, [r1, #64]	; 0x40
 a1 = (ADC3->DR)<<4;
 8004c68:	6c16      	ldr	r6, [r2, #64]	; 0x40
 a3 = (ADC4->DR)<<4;
 8004c6a:	f8d3 c040 	ldr.w	ip, [r3, #64]	; 0x40

 if (n_ai >= 1) tranBuff[inBuffPos++] = a1;
 8004c6e:	2800      	cmp	r0, #0
 8004c70:	ddb4      	ble.n	8004bdc <asyncReadCallback.9915+0xc>
 8004c72:	4a14      	ldr	r2, [pc, #80]	; (8004cc4 <asyncReadCallback.9915+0xf4>)
 8004c74:	6823      	ldr	r3, [r4, #0]
 8004c76:	6812      	ldr	r2, [r2, #0]
 8004c78:	4911      	ldr	r1, [pc, #68]	; (8004cc0 <asyncReadCallback.9915+0xf0>)
 ADC3->CR |= ADC_CR_ADSTART;
 while (!(ADC3->ISR & ADC_ISR_EOC));

 a4 = (ADC1->DR)<<4;
 a2 = (ADC2->DR)<<4;
 a1 = (ADC3->DR)<<4;
 8004c7a:	0136      	lsls	r6, r6, #4
 a3 = (ADC4->DR)<<4;

 if (n_ai >= 1) tranBuff[inBuffPos++] = a1;
 8004c7c:	f103 0801 	add.w	r8, r3, #1
 if (n_ai >= 2) tranBuff[inBuffPos++] = a2;
 8004c80:	2801      	cmp	r0, #1
 a4 = (ADC1->DR)<<4;
 a2 = (ADC2->DR)<<4;
 a1 = (ADC3->DR)<<4;
 a3 = (ADC4->DR)<<4;

 if (n_ai >= 1) tranBuff[inBuffPos++] = a1;
 8004c82:	f8c4 8000 	str.w	r8, [r4]
 8004c86:	ea4f 0443 	mov.w	r4, r3, lsl #1
 8004c8a:	f822 6013 	strh.w	r6, [r2, r3, lsl #1]
 if (n_ai >= 2) tranBuff[inBuffPos++] = a2;
 8004c8e:	d0a5      	beq.n	8004bdc <asyncReadCallback.9915+0xc>
 8004c90:	4422      	add	r2, r4
 ADC1->CR |= ADC_CR_ADSTART;
 ADC3->CR |= ADC_CR_ADSTART;
 while (!(ADC3->ISR & ADC_ISR_EOC));

 a4 = (ADC1->DR)<<4;
 a2 = (ADC2->DR)<<4;
 8004c92:	012d      	lsls	r5, r5, #4
 a1 = (ADC3->DR)<<4;
 a3 = (ADC4->DR)<<4;

 if (n_ai >= 1) tranBuff[inBuffPos++] = a1;
 if (n_ai >= 2) tranBuff[inBuffPos++] = a2;
 8004c94:	1c9c      	adds	r4, r3, #2
 if (n_ai >= 3) tranBuff[inBuffPos++] = a3;
 8004c96:	2802      	cmp	r0, #2
 a2 = (ADC2->DR)<<4;
 a1 = (ADC3->DR)<<4;
 a3 = (ADC4->DR)<<4;

 if (n_ai >= 1) tranBuff[inBuffPos++] = a1;
 if (n_ai >= 2) tranBuff[inBuffPos++] = a2;
 8004c98:	600c      	str	r4, [r1, #0]
 8004c9a:	8055      	strh	r5, [r2, #2]
 if (n_ai >= 3) tranBuff[inBuffPos++] = a3;
 8004c9c:	d09e      	beq.n	8004bdc <asyncReadCallback.9915+0xc>
 while (!(ADC3->ISR & ADC_ISR_EOC));

 a4 = (ADC1->DR)<<4;
 a2 = (ADC2->DR)<<4;
 a1 = (ADC3->DR)<<4;
 a3 = (ADC4->DR)<<4;
 8004c9e:	ea4f 1c0c 	mov.w	ip, ip, lsl #4

 if (n_ai >= 1) tranBuff[inBuffPos++] = a1;
 if (n_ai >= 2) tranBuff[inBuffPos++] = a2;
 if (n_ai >= 3) tranBuff[inBuffPos++] = a3;
 8004ca2:	1cdc      	adds	r4, r3, #3
 if (n_ai >= 4) tranBuff[inBuffPos++] = a4;
 8004ca4:	2803      	cmp	r0, #3
 a1 = (ADC3->DR)<<4;
 a3 = (ADC4->DR)<<4;

 if (n_ai >= 1) tranBuff[inBuffPos++] = a1;
 if (n_ai >= 2) tranBuff[inBuffPos++] = a2;
 if (n_ai >= 3) tranBuff[inBuffPos++] = a3;
 8004ca6:	600c      	str	r4, [r1, #0]
 8004ca8:	f8a2 c004 	strh.w	ip, [r2, #4]
 if (n_ai >= 4) tranBuff[inBuffPos++] = a4;
 8004cac:	d096      	beq.n	8004bdc <asyncReadCallback.9915+0xc>
 8004cae:	3304      	adds	r3, #4

 ADC1->CR |= ADC_CR_ADSTART;
 ADC3->CR |= ADC_CR_ADSTART;
 while (!(ADC3->ISR & ADC_ISR_EOC));

 a4 = (ADC1->DR)<<4;
 8004cb0:	013f      	lsls	r7, r7, #4
 a3 = (ADC4->DR)<<4;

 if (n_ai >= 1) tranBuff[inBuffPos++] = a1;
 if (n_ai >= 2) tranBuff[inBuffPos++] = a2;
 if (n_ai >= 3) tranBuff[inBuffPos++] = a3;
 if (n_ai >= 4) tranBuff[inBuffPos++] = a4;
 8004cb2:	600b      	str	r3, [r1, #0]
 8004cb4:	80d7      	strh	r7, [r2, #6]
 8004cb6:	e791      	b.n	8004bdc <asyncReadCallback.9915+0xc>
 8004cb8:	20000804 	.word	0x20000804
 8004cbc:	20000f40 	.word	0x20000f40
 8004cc0:	20000e58 	.word	0x20000e58
 8004cc4:	20000cb8 	.word	0x20000cb8
 8004cc8:	48000800 	.word	0x48000800
 8004ccc:	20000c58 	.word	0x20000c58
 8004cd0:	20000814 	.word	0x20000814
 8004cd4:	20000e4c 	.word	0x20000e4c
 8004cd8:	20000c94 	.word	0x20000c94
 8004cdc:	20000c90 	.word	0x20000c90
 8004ce0:	20000f68 	.word	0x20000f68
 8004ce4:	20000c98 	.word	0x20000c98
 8004ce8:	50000400 	.word	0x50000400
 8004cec:	50000100 	.word	0x50000100
 8004cf0:	50000500 	.word	0x50000500
 8004cf4:	f3af 8000 	nop.w
 8004cf8:	f3af 8000 	nop.w
 8004cfc:	f3af 8000 	nop.w

08004d00 <triggeredReadCallback.9892>:
// Checked with hardware profiling that it is inlined
static inline int storeAnalog(void)
 {
 int a1,a2,a3,a4;

 if (inBuffPos == currentBsize) inBuffPos = 0;
 8004d00:	4861      	ldr	r0, [pc, #388]	; (8004e88 <triggeredReadCallback.9892+0x188>)
 8004d02:	4a62      	ldr	r2, [pc, #392]	; (8004e8c <triggeredReadCallback.9892+0x18c>)
 8004d04:	6803      	ldr	r3, [r0, #0]
 8004d06:	6812      	ldr	r2, [r2, #0]

 ADC1->CR |= ADC_CR_ADSTART;
 ADC3->CR |= ADC_CR_ADSTART;
 8004d08:	4961      	ldr	r1, [pc, #388]	; (8004e90 <triggeredReadCallback.9892+0x190>)
// Checked with hardware profiling that it is inlined
static inline int storeAnalog(void)
 {
 int a1,a2,a3,a4;

 if (inBuffPos == currentBsize) inBuffPos = 0;
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	bf08      	it	eq
 8004d0e:	2300      	moveq	r3, #0
	  }
  }

// ISR for the triggeredRead function
void triggeredReadCallback(GPTDriver *gptp)
 {
 8004d10:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
// Checked with hardware profiling that it is inlined
static inline int storeAnalog(void)
 {
 int a1,a2,a3,a4;

 if (inBuffPos == currentBsize) inBuffPos = 0;
 8004d14:	bf08      	it	eq
 8004d16:	6003      	streq	r3, [r0, #0]

 ADC1->CR |= ADC_CR_ADSTART;
 8004d18:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004d1c:	689a      	ldr	r2, [r3, #8]
 8004d1e:	f042 0204 	orr.w	r2, r2, #4
 8004d22:	609a      	str	r2, [r3, #8]
 ADC3->CR |= ADC_CR_ADSTART;
 8004d24:	688b      	ldr	r3, [r1, #8]
 8004d26:	f043 0304 	orr.w	r3, r3, #4
 8004d2a:	608b      	str	r3, [r1, #8]
 while (!(ADC3->ISR & ADC_ISR_EOC));
 8004d2c:	680b      	ldr	r3, [r1, #0]
 8004d2e:	4a58      	ldr	r2, [pc, #352]	; (8004e90 <triggeredReadCallback.9892+0x190>)
 8004d30:	075b      	lsls	r3, r3, #29
 8004d32:	d5fb      	bpl.n	8004d2c <triggeredReadCallback.9892+0x2c>
 a4 = (ADC1->DR)<<4;
 a2 = (ADC2->DR)<<4;
 a1 = (ADC3->DR)<<4;
 a3 = (ADC4->DR)<<4;

 if (n_ai >= 1) tranBuff[inBuffPos++] = a1;
 8004d34:	4957      	ldr	r1, [pc, #348]	; (8004e94 <triggeredReadCallback.9892+0x194>)
 ADC1->CR |= ADC_CR_ADSTART;
 ADC3->CR |= ADC_CR_ADSTART;
 while (!(ADC3->ISR & ADC_ISR_EOC));

 a4 = (ADC1->DR)<<4;
 a2 = (ADC2->DR)<<4;
 8004d36:	4b58      	ldr	r3, [pc, #352]	; (8004e98 <triggeredReadCallback.9892+0x198>)
 a1 = (ADC3->DR)<<4;
 a3 = (ADC4->DR)<<4;

 if (n_ai >= 1) tranBuff[inBuffPos++] = a1;
 8004d38:	6809      	ldr	r1, [r1, #0]

 ADC1->CR |= ADC_CR_ADSTART;
 ADC3->CR |= ADC_CR_ADSTART;
 while (!(ADC3->ISR & ADC_ISR_EOC));

 a4 = (ADC1->DR)<<4;
 8004d3a:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
 a2 = (ADC2->DR)<<4;
 a1 = (ADC3->DR)<<4;
 a3 = (ADC4->DR)<<4;

 if (n_ai >= 1) tranBuff[inBuffPos++] = a1;
 8004d3e:	2900      	cmp	r1, #0

 ADC1->CR |= ADC_CR_ADSTART;
 ADC3->CR |= ADC_CR_ADSTART;
 while (!(ADC3->ISR & ADC_ISR_EOC));

 a4 = (ADC1->DR)<<4;
 8004d40:	6c26      	ldr	r6, [r4, #64]	; 0x40
 a2 = (ADC2->DR)<<4;
 8004d42:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 a1 = (ADC3->DR)<<4;
 8004d44:	6c15      	ldr	r5, [r2, #64]	; 0x40
 a3 = (ADC4->DR)<<4;
 8004d46:	f8d3 c440 	ldr.w	ip, [r3, #1088]	; 0x440
 ADC3->CR |= ADC_CR_ADSTART;
 while (!(ADC3->ISR & ADC_ISR_EOC));

 a4 = (ADC1->DR)<<4;
 a2 = (ADC2->DR)<<4;
 a1 = (ADC3->DR)<<4;
 8004d4a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 a3 = (ADC4->DR)<<4;

 if (n_ai >= 1) tranBuff[inBuffPos++] = a1;
 8004d4e:	dd22      	ble.n	8004d96 <triggeredReadCallback.9892+0x96>
 8004d50:	4a52      	ldr	r2, [pc, #328]	; (8004e9c <triggeredReadCallback.9892+0x19c>)
 8004d52:	6803      	ldr	r3, [r0, #0]
 8004d54:	6812      	ldr	r2, [r2, #0]
 8004d56:	4c4c      	ldr	r4, [pc, #304]	; (8004e88 <triggeredReadCallback.9892+0x188>)
 8004d58:	f103 0801 	add.w	r8, r3, #1
 if (n_ai >= 2) tranBuff[inBuffPos++] = a2;
 8004d5c:	2901      	cmp	r1, #1
 a4 = (ADC1->DR)<<4;
 a2 = (ADC2->DR)<<4;
 a1 = (ADC3->DR)<<4;
 a3 = (ADC4->DR)<<4;

 if (n_ai >= 1) tranBuff[inBuffPos++] = a1;
 8004d5e:	f8c0 8000 	str.w	r8, [r0]
 8004d62:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8004d66:	f822 5013 	strh.w	r5, [r2, r3, lsl #1]
 if (n_ai >= 2) tranBuff[inBuffPos++] = a2;
 8004d6a:	d014      	beq.n	8004d96 <triggeredReadCallback.9892+0x96>
 8004d6c:	4442      	add	r2, r8
 ADC1->CR |= ADC_CR_ADSTART;
 ADC3->CR |= ADC_CR_ADSTART;
 while (!(ADC3->ISR & ADC_ISR_EOC));

 a4 = (ADC1->DR)<<4;
 a2 = (ADC2->DR)<<4;
 8004d6e:	013f      	lsls	r7, r7, #4
 a1 = (ADC3->DR)<<4;
 a3 = (ADC4->DR)<<4;

 if (n_ai >= 1) tranBuff[inBuffPos++] = a1;
 if (n_ai >= 2) tranBuff[inBuffPos++] = a2;
 8004d70:	f103 0802 	add.w	r8, r3, #2
 if (n_ai >= 3) tranBuff[inBuffPos++] = a3;
 8004d74:	2902      	cmp	r1, #2
 a2 = (ADC2->DR)<<4;
 a1 = (ADC3->DR)<<4;
 a3 = (ADC4->DR)<<4;

 if (n_ai >= 1) tranBuff[inBuffPos++] = a1;
 if (n_ai >= 2) tranBuff[inBuffPos++] = a2;
 8004d76:	f8c4 8000 	str.w	r8, [r4]
 8004d7a:	8057      	strh	r7, [r2, #2]
 if (n_ai >= 3) tranBuff[inBuffPos++] = a3;
 8004d7c:	d00b      	beq.n	8004d96 <triggeredReadCallback.9892+0x96>
 while (!(ADC3->ISR & ADC_ISR_EOC));

 a4 = (ADC1->DR)<<4;
 a2 = (ADC2->DR)<<4;
 a1 = (ADC3->DR)<<4;
 a3 = (ADC4->DR)<<4;
 8004d7e:	ea4f 1c0c 	mov.w	ip, ip, lsl #4

 if (n_ai >= 1) tranBuff[inBuffPos++] = a1;
 if (n_ai >= 2) tranBuff[inBuffPos++] = a2;
 if (n_ai >= 3) tranBuff[inBuffPos++] = a3;
 8004d82:	1cdf      	adds	r7, r3, #3
 if (n_ai >= 4) tranBuff[inBuffPos++] = a4;
 8004d84:	2903      	cmp	r1, #3
 a1 = (ADC3->DR)<<4;
 a3 = (ADC4->DR)<<4;

 if (n_ai >= 1) tranBuff[inBuffPos++] = a1;
 if (n_ai >= 2) tranBuff[inBuffPos++] = a2;
 if (n_ai >= 3) tranBuff[inBuffPos++] = a3;
 8004d86:	6027      	str	r7, [r4, #0]
 8004d88:	f8a2 c004 	strh.w	ip, [r2, #4]
 if (n_ai >= 4) tranBuff[inBuffPos++] = a4;
 8004d8c:	d003      	beq.n	8004d96 <triggeredReadCallback.9892+0x96>
 8004d8e:	3304      	adds	r3, #4

 ADC1->CR |= ADC_CR_ADSTART;
 ADC3->CR |= ADC_CR_ADSTART;
 while (!(ADC3->ISR & ADC_ISR_EOC));

 a4 = (ADC1->DR)<<4;
 8004d90:	0136      	lsls	r6, r6, #4
 a3 = (ADC4->DR)<<4;

 if (n_ai >= 1) tranBuff[inBuffPos++] = a1;
 if (n_ai >= 2) tranBuff[inBuffPos++] = a2;
 if (n_ai >= 3) tranBuff[inBuffPos++] = a3;
 if (n_ai >= 4) tranBuff[inBuffPos++] = a4;
 8004d92:	6023      	str	r3, [r4, #0]
 8004d94:	80d6      	strh	r6, [r2, #6]

 // Store analog data
 a1 = storeAnalog();

 // Store digital data
 if (n_di) storeDigital();
 8004d96:	4b42      	ldr	r3, [pc, #264]	; (8004ea0 <triggeredReadCallback.9892+0x1a0>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	b143      	cbz	r3, 8004dae <triggeredReadCallback.9892+0xae>
 }

// Store digital inputs in circular buffer
static inline void storeDigital(void)
 {
 tranBuff[inBuffPos++] = DIO_PORT->IDR;
 8004d9c:	6803      	ldr	r3, [r0, #0]
 8004d9e:	4a3f      	ldr	r2, [pc, #252]	; (8004e9c <triggeredReadCallback.9892+0x19c>)
 8004da0:	4940      	ldr	r1, [pc, #256]	; (8004ea4 <triggeredReadCallback.9892+0x1a4>)
 8004da2:	6812      	ldr	r2, [r2, #0]
 8004da4:	1c5c      	adds	r4, r3, #1
 8004da6:	6004      	str	r4, [r0, #0]
 8004da8:	6909      	ldr	r1, [r1, #16]
 8004daa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

 // Store digital data
 if (n_di) storeDigital();

 // Increase sample
 samples++;
 8004dae:	4b3e      	ldr	r3, [pc, #248]	; (8004ea8 <triggeredReadCallback.9892+0x1a8>)
 if (samples == n_s) samples = 0;
 8004db0:	493e      	ldr	r1, [pc, #248]	; (8004eac <triggeredReadCallback.9892+0x1ac>)

 // Store digital data
 if (n_di) storeDigital();

 // Increase sample
 samples++;
 8004db2:	681a      	ldr	r2, [r3, #0]
 if (samples == n_s) samples = 0;
 8004db4:	6809      	ldr	r1, [r1, #0]

 // Decrease timeout
 timeOut--;

 // Check halt
 if (halt)
 8004db6:	483e      	ldr	r0, [pc, #248]	; (8004eb0 <triggeredReadCallback.9892+0x1b0>)

 // Store digital data
 if (n_di) storeDigital();

 // Increase sample
 samples++;
 8004db8:	3201      	adds	r2, #1
 if (samples == n_s) samples = 0;
 8004dba:	428a      	cmp	r2, r1

 // Store digital data
 if (n_di) storeDigital();

 // Increase sample
 samples++;
 8004dbc:	601a      	str	r2, [r3, #0]
 if (samples == n_s) samples = 0;
 8004dbe:	bf04      	itt	eq
 8004dc0:	2200      	moveq	r2, #0
 8004dc2:	601a      	streq	r2, [r3, #0]

 // Decrease timeout
 timeOut--;
 8004dc4:	4a3b      	ldr	r2, [pc, #236]	; (8004eb4 <triggeredReadCallback.9892+0x1b4>)

 // Check halt
 if (halt)
 8004dc6:	6800      	ldr	r0, [r0, #0]
 // Increase sample
 samples++;
 if (samples == n_s) samples = 0;

 // Decrease timeout
 timeOut--;
 8004dc8:	6811      	ldr	r1, [r2, #0]
 8004dca:	3901      	subs	r1, #1
 8004dcc:	6011      	str	r1, [r2, #0]

 // Check halt
 if (halt)
 8004dce:	b9e0      	cbnz	r0, 8004e0a <triggeredReadCallback.9892+0x10a>
    endTicker = 1;
    return;
    }

 // Check phase
 switch(samplePhase)
 8004dd0:	4839      	ldr	r0, [pc, #228]	; (8004eb8 <triggeredReadCallback.9892+0x1b8>)
 8004dd2:	6802      	ldr	r2, [r0, #0]
 8004dd4:	2a03      	cmp	r2, #3
 8004dd6:	d80c      	bhi.n	8004df2 <triggeredReadCallback.9892+0xf2>
 8004dd8:	e8df f002 	tbb	[pc, r2]
 8004ddc:	0239311d 	.word	0x0239311d
        // Signal end
        endTicker = 1;
        }
      break;
    case 3: // Capture after trigger
      if (!postsamples)
 8004de0:	4b36      	ldr	r3, [pc, #216]	; (8004ebc <triggeredReadCallback.9892+0x1bc>)
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	b912      	cbnz	r2, 8004dec <triggeredReadCallback.9892+0xec>
            {
            // Signal end
            endTicker = 1;
 8004de6:	4a36      	ldr	r2, [pc, #216]	; (8004ec0 <triggeredReadCallback.9892+0x1c0>)
 8004de8:	2101      	movs	r1, #1
 8004dea:	6011      	str	r1, [r2, #0]
            PRO1_CLEAR
            }
      postsamples--;
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	3a01      	subs	r2, #1
 8004df0:	601a      	str	r2, [r3, #0]
      break;
    }

 // Check for overrun
 if (overrun)
 8004df2:	4b34      	ldr	r3, [pc, #208]	; (8004ec4 <triggeredReadCallback.9892+0x1c4>)
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	b922      	cbnz	r2, 8004e02 <triggeredReadCallback.9892+0x102>
    overrun_error = 1;

 overrun = 1;
 8004df8:	2201      	movs	r2, #1
 8004dfa:	601a      	str	r2, [r3, #0]
 }
 8004dfc:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8004e00:	4770      	bx	lr
      break;
    }

 // Check for overrun
 if (overrun)
    overrun_error = 1;
 8004e02:	4a31      	ldr	r2, [pc, #196]	; (8004ec8 <triggeredReadCallback.9892+0x1c8>)
 8004e04:	2101      	movs	r1, #1
 8004e06:	6011      	str	r1, [r2, #0]
 8004e08:	e7f6      	b.n	8004df8 <triggeredReadCallback.9892+0xf8>

 // Check halt
 if (halt)
    {
    // Signal end
    endTicker = 1;
 8004e0a:	4b2d      	ldr	r3, [pc, #180]	; (8004ec0 <triggeredReadCallback.9892+0x1c0>)
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]
 // Check for overrun
 if (overrun)
    overrun_error = 1;

 overrun = 1;
 }
 8004e10:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8004e14:	4770      	bx	lr

 // Check phase
 switch(samplePhase)
    {
    case 0: // Prefill of the buffer
      presamples--;
 8004e16:	4b2d      	ldr	r3, [pc, #180]	; (8004ecc <triggeredReadCallback.9892+0x1cc>)
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	3a01      	subs	r2, #1
 8004e1c:	601a      	str	r2, [r3, #0]
      if (!presamples) samplePhase = 1;
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	b90b      	cbnz	r3, 8004e26 <triggeredReadCallback.9892+0x126>
 8004e22:	2301      	movs	r3, #1
 8004e24:	6003      	str	r3, [r0, #0]
                     {
                     samplePhase = 3;
                     triggerSample = samples;
                     PRO1_SET
                     }
      if (!timeOut)
 8004e26:	2900      	cmp	r1, #0
 8004e28:	d1e3      	bne.n	8004df2 <triggeredReadCallback.9892+0xf2>
        {
        // Set error
        timeout_error = 1;
        // Signal end
        endTicker = 1;
 8004e2a:	4a25      	ldr	r2, [pc, #148]	; (8004ec0 <triggeredReadCallback.9892+0x1c0>)
                     PRO1_SET
                     }
      if (!timeOut)
        {
        // Set error
        timeout_error = 1;
 8004e2c:	4928      	ldr	r1, [pc, #160]	; (8004ed0 <triggeredReadCallback.9892+0x1d0>)
 8004e2e:	2301      	movs	r3, #1
 8004e30:	600b      	str	r3, [r1, #0]
        // Signal end
        endTicker = 1;
 8004e32:	6013      	str	r3, [r2, #0]
      postsamples--;
      break;
    }

 // Check for overrun
 if (overrun)
 8004e34:	4b23      	ldr	r3, [pc, #140]	; (8004ec4 <triggeredReadCallback.9892+0x1c4>)
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	2a00      	cmp	r2, #0
 8004e3a:	d0dd      	beq.n	8004df8 <triggeredReadCallback.9892+0xf8>
 8004e3c:	e7e1      	b.n	8004e02 <triggeredReadCallback.9892+0x102>
        // Signal end
        endTicker = 1;
        }
      break;
    case 1: // Wait for trigger precondition
      if (triggerMode == 0) // Rise
 8004e3e:	4b25      	ldr	r3, [pc, #148]	; (8004ed4 <triggeredReadCallback.9892+0x1d4>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	b963      	cbnz	r3, 8004e5e <triggeredReadCallback.9892+0x15e>
         if (a1 < trigger) {samplePhase = 2; }
 8004e44:	4b24      	ldr	r3, [pc, #144]	; (8004ed8 <triggeredReadCallback.9892+0x1d8>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	42ab      	cmp	r3, r5
 8004e4a:	ddec      	ble.n	8004e26 <triggeredReadCallback.9892+0x126>
 8004e4c:	e00d      	b.n	8004e6a <triggeredReadCallback.9892+0x16a>
        // Signal end
        endTicker = 1;
        }
      break;
    case 2: // Wait for trigger postcondition
      if (triggerMode == 0) // Rise
 8004e4e:	4a21      	ldr	r2, [pc, #132]	; (8004ed4 <triggeredReadCallback.9892+0x1d4>)
 8004e50:	6812      	ldr	r2, [r2, #0]
 8004e52:	b96a      	cbnz	r2, 8004e70 <triggeredReadCallback.9892+0x170>
         if (a1 > trigger)
 8004e54:	4a20      	ldr	r2, [pc, #128]	; (8004ed8 <triggeredReadCallback.9892+0x1d8>)
 8004e56:	6812      	ldr	r2, [r2, #0]
 8004e58:	42aa      	cmp	r2, r5
 8004e5a:	dae4      	bge.n	8004e26 <triggeredReadCallback.9892+0x126>
 8004e5c:	e00e      	b.n	8004e7c <triggeredReadCallback.9892+0x17c>
        }
      break;
    case 1: // Wait for trigger precondition
      if (triggerMode == 0) // Rise
         if (a1 < trigger) {samplePhase = 2; }
      if (triggerMode == 1) // Fall
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d1e1      	bne.n	8004e26 <triggeredReadCallback.9892+0x126>
         if (a1 > trigger) {samplePhase = 2; }
 8004e62:	4b1d      	ldr	r3, [pc, #116]	; (8004ed8 <triggeredReadCallback.9892+0x1d8>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	42ab      	cmp	r3, r5
 8004e68:	dadd      	bge.n	8004e26 <triggeredReadCallback.9892+0x126>
 8004e6a:	2302      	movs	r3, #2
 8004e6c:	6003      	str	r3, [r0, #0]
 8004e6e:	e7da      	b.n	8004e26 <triggeredReadCallback.9892+0x126>
                     {
                     samplePhase = 3;
                     triggerSample = samples;
                     PRO1_SET
                     }
      if (triggerMode == 1) // Fall
 8004e70:	2a01      	cmp	r2, #1
 8004e72:	d1d8      	bne.n	8004e26 <triggeredReadCallback.9892+0x126>
         if (a1 < trigger)
 8004e74:	4a18      	ldr	r2, [pc, #96]	; (8004ed8 <triggeredReadCallback.9892+0x1d8>)
 8004e76:	6812      	ldr	r2, [r2, #0]
 8004e78:	42aa      	cmp	r2, r5
 8004e7a:	ddd4      	ble.n	8004e26 <triggeredReadCallback.9892+0x126>
                     {
                     samplePhase = 3;
                     triggerSample = samples;
 8004e7c:	4a17      	ldr	r2, [pc, #92]	; (8004edc <triggeredReadCallback.9892+0x1dc>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
                     PRO1_SET
                     }
      if (triggerMode == 1) // Fall
         if (a1 < trigger)
                     {
                     samplePhase = 3;
 8004e80:	2403      	movs	r4, #3
 8004e82:	6004      	str	r4, [r0, #0]
                     triggerSample = samples;
 8004e84:	6013      	str	r3, [r2, #0]
 8004e86:	e7ce      	b.n	8004e26 <triggeredReadCallback.9892+0x126>
 8004e88:	20000e58 	.word	0x20000e58
 8004e8c:	20000c98 	.word	0x20000c98
 8004e90:	50000400 	.word	0x50000400
 8004e94:	20000804 	.word	0x20000804
 8004e98:	50000100 	.word	0x50000100
 8004e9c:	20000cb8 	.word	0x20000cb8
 8004ea0:	20000f40 	.word	0x20000f40
 8004ea4:	48000800 	.word	0x48000800
 8004ea8:	20000c58 	.word	0x20000c58
 8004eac:	20000814 	.word	0x20000814
 8004eb0:	20000e4c 	.word	0x20000e4c
 8004eb4:	20000ec0 	.word	0x20000ec0
 8004eb8:	20000c64 	.word	0x20000c64
 8004ebc:	20000f50 	.word	0x20000f50
 8004ec0:	20000f68 	.word	0x20000f68
 8004ec4:	20000c94 	.word	0x20000c94
 8004ec8:	20000c90 	.word	0x20000c90
 8004ecc:	20000cac 	.word	0x20000cac
 8004ed0:	20000c60 	.word	0x20000c60
 8004ed4:	20000c88 	.word	0x20000c88
 8004ed8:	20000f48 	.word	0x20000f48
 8004edc:	20000c5c 	.word	0x20000c5c

08004ee0 <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8004ee0:	4920      	ldr	r1, [pc, #128]	; (8004f64 <__early_init+0x84>)
 8004ee2:	680b      	ldr	r3, [r1, #0]
 8004ee4:	f043 0301 	orr.w	r3, r3, #1
 8004ee8:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8004eea:	680b      	ldr	r3, [r1, #0]
 8004eec:	4a1d      	ldr	r2, [pc, #116]	; (8004f64 <__early_init+0x84>)
 8004eee:	079b      	lsls	r3, r3, #30
 8004ef0:	d5fb      	bpl.n	8004eea <__early_init+0xa>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8004ef2:	6853      	ldr	r3, [r2, #4]
 8004ef4:	f023 0303 	bic.w	r3, r3, #3
 8004ef8:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 8004efa:	6853      	ldr	r3, [r2, #4]
 8004efc:	6053      	str	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8004efe:	4611      	mov	r1, r2
 8004f00:	684b      	ldr	r3, [r1, #4]
 8004f02:	4a18      	ldr	r2, [pc, #96]	; (8004f64 <__early_init+0x84>)
 8004f04:	f013 030c 	ands.w	r3, r3, #12
 8004f08:	d1fa      	bne.n	8004f00 <__early_init+0x20>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8004f0a:	6811      	ldr	r1, [r2, #0]
 8004f0c:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 8004f10:	6011      	str	r1, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8004f12:	6053      	str	r3, [r2, #4]
    ;                                       /* Waits until HSE is stable.   */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8004f14:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8004f16:	f043 0301 	orr.w	r3, r3, #1
 8004f1a:	6253      	str	r3, [r2, #36]	; 0x24
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8004f1c:	4611      	mov	r1, r2
 8004f1e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8004f20:	4a10      	ldr	r2, [pc, #64]	; (8004f64 <__early_init+0x84>)
 8004f22:	0798      	lsls	r0, r3, #30
 8004f24:	d5fb      	bpl.n	8004f1e <__early_init+0x3e>
    ;                                       /* Waits until LSI is stable.   */
#endif

  /* Clock settings.*/
  RCC->CFGR  = STM32_MCOSEL    | STM32_USBPRE    | STM32_PLLMUL   |
 8004f26:	4b10      	ldr	r3, [pc, #64]	; (8004f68 <__early_init+0x88>)
 8004f28:	6053      	str	r3, [r2, #4]
               STM32_PLLSRC    | STM32_PPRE1     | STM32_PPRE2    |
               STM32_HPRE;
  RCC->CFGR2 = STM32_ADC34PRES | STM32_ADC12PRES | STM32_PREDIV;
 8004f2a:	f44f 5104 	mov.w	r1, #8448	; 0x2100
  RCC->CFGR3 = STM32_UART5SW   | STM32_UART4SW   | STM32_USART3SW |
 8004f2e:	2330      	movs	r3, #48	; 0x30

  /* Clock settings.*/
  RCC->CFGR  = STM32_MCOSEL    | STM32_USBPRE    | STM32_PLLMUL   |
               STM32_PLLSRC    | STM32_PPRE1     | STM32_PPRE2    |
               STM32_HPRE;
  RCC->CFGR2 = STM32_ADC34PRES | STM32_ADC12PRES | STM32_PREDIV;
 8004f30:	62d1      	str	r1, [r2, #44]	; 0x2c
  RCC->CFGR3 = STM32_UART5SW   | STM32_UART4SW   | STM32_USART3SW |
 8004f32:	6313      	str	r3, [r2, #48]	; 0x30
               STM32_USART2SW  | STM32_I2C2SW    | STM32_I2C1SW   |
               STM32_USART1SW;

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CR   |= RCC_CR_PLLON;
 8004f34:	6813      	ldr	r3, [r2, #0]
 8004f36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f3a:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8004f3c:	6813      	ldr	r3, [r2, #0]
 8004f3e:	4909      	ldr	r1, [pc, #36]	; (8004f64 <__early_init+0x84>)
 8004f40:	019b      	lsls	r3, r3, #6
 8004f42:	d5fb      	bpl.n	8004f3c <__early_init+0x5c>
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8004f44:	4b09      	ldr	r3, [pc, #36]	; (8004f6c <__early_init+0x8c>)
 8004f46:	2211      	movs	r2, #17
 8004f48:	601a      	str	r2, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 8004f4a:	684b      	ldr	r3, [r1, #4]
 8004f4c:	f043 0302 	orr.w	r3, r3, #2
 8004f50:	604b      	str	r3, [r1, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8004f52:	684b      	ldr	r3, [r1, #4]
 8004f54:	4a03      	ldr	r2, [pc, #12]	; (8004f64 <__early_init+0x84>)
 8004f56:	f003 030c 	and.w	r3, r3, #12
 8004f5a:	2b08      	cmp	r3, #8
 8004f5c:	d1f9      	bne.n	8004f52 <__early_init+0x72>
    ;                                       /* Waits selection complete.    */
#endif

  /* After PLL activation because the special requirements for TIM1 and
     TIM8 bits.*/
  RCC->CFGR3 |= STM32_TIM8SW | STM32_TIM1SW;
 8004f5e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004f60:	6313      	str	r3, [r2, #48]	; 0x30
 8004f62:	4770      	bx	lr
 8004f64:	40021000 	.word	0x40021000
 8004f68:	001c2400 	.word	0x001c2400
 8004f6c:	40022000 	.word	0x40022000

08004f70 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 8004f70:	b538      	push	{r3, r4, r5, lr}
 8004f72:	2220      	movs	r2, #32
 8004f74:	4603      	mov	r3, r0
 8004f76:	f382 8811 	msr	BASEPRI, r2
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;
 8004f7a:	4a10      	ldr	r2, [pc, #64]	; (8004fbc <chThdExit+0x4c>)
 8004f7c:	6994      	ldr	r4, [r2, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->next != (thread_t *)tlp);
 8004f7e:	6aa0      	ldr	r0, [r4, #40]	; 0x28

  /* Storing exit message.*/
  tp->u.exitcode = msg;
 8004f80:	6263      	str	r3, [r4, #36]	; 0x24
  /* Exit handler hook.*/
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (list_notempty(&tp->waiting)) {
 8004f82:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8004f86:	42a8      	cmp	r0, r5
 8004f88:	d006      	beq.n	8004f98 <chThdExit+0x28>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->next;
  tlp->next = tp->queue.next;
 8004f8a:	6803      	ldr	r3, [r0, #0]
 8004f8c:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 8004f8e:	f7fe feff 	bl	8003d90 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->next != (thread_t *)tlp);
 8004f92:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  /* Exit handler hook.*/
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (list_notempty(&tp->waiting)) {
 8004f94:	42a8      	cmp	r0, r5
 8004f96:	d1f8      	bne.n	8004f8a <chThdExit+0x1a>

#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads with no references are immediately removed from the
     registry because there is no memory to recover.*/
#if CH_CFG_USE_DYNAMIC == TRUE
  if ((tp->refs == (trefs_t)0) &&
 8004f98:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8004f9c:	b943      	cbnz	r3, 8004fb0 <chThdExit+0x40>
      ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
 8004f9e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21

#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads with no references are immediately removed from the
     registry because there is no memory to recover.*/
#if CH_CFG_USE_DYNAMIC == TRUE
  if ((tp->refs == (trefs_t)0) &&
 8004fa2:	079b      	lsls	r3, r3, #30
 8004fa4:	d104      	bne.n	8004fb0 <chThdExit+0x40>
      ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
    REG_REMOVE(tp);
 8004fa6:	6963      	ldr	r3, [r4, #20]
 8004fa8:	6922      	ldr	r2, [r4, #16]
 8004faa:	611a      	str	r2, [r3, #16]
 8004fac:	6922      	ldr	r2, [r4, #16]
 8004fae:	6153      	str	r3, [r2, #20]
  }
#endif
#endif

  /* Going into final state.*/
  chSchGoSleepS(CH_STATE_FINAL);
 8004fb0:	200f      	movs	r0, #15
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
  /* The thread never returns here.*/
}
 8004fb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  }
#endif
#endif

  /* Going into final state.*/
  chSchGoSleepS(CH_STATE_FINAL);
 8004fb6:	f7fe bc53 	b.w	8003860 <chSchGoSleepS>
 8004fba:	bf00      	nop
 8004fbc:	20000ec8 	.word	0x20000ec8

08004fc0 <chSchDoReschedule>:
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
  thread_t *otp = currp;
 8004fc0:	4a0e      	ldr	r2, [pc, #56]	; (8004ffc <chSchDoReschedule+0x3c>)
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;
 8004fc2:	6810      	ldr	r0, [r2, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 8004fc4:	b470      	push	{r4, r5, r6}

  tqp->next             = tp->queue.next;
 8004fc6:	6803      	ldr	r3, [r0, #0]
  thread_t *otp = currp;
 8004fc8:	6995      	ldr	r5, [r2, #24]
 8004fca:	6013      	str	r3, [r2, #0]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8004fcc:	2601      	movs	r6, #1
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8004fce:	2100      	movs	r1, #0
 8004fd0:	68ac      	ldr	r4, [r5, #8]
  tqp->next->queue.prev = (thread_t *)tqp;
 8004fd2:	605a      	str	r2, [r3, #4]
void chSchDoReschedule(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8004fd4:	f880 6020 	strb.w	r6, [r0, #32]
 */
void chSchDoReschedule(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 8004fd8:	6190      	str	r0, [r2, #24]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8004fda:	f885 1020 	strb.w	r1, [r5, #32]
 8004fde:	e000      	b.n	8004fe2 <chSchDoReschedule+0x22>
 8004fe0:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio > tp->prio);
 8004fe2:	689a      	ldr	r2, [r3, #8]
 8004fe4:	42a2      	cmp	r2, r4
 8004fe6:	d8fb      	bhi.n	8004fe0 <chSchDoReschedule+0x20>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 8004fe8:	685a      	ldr	r2, [r3, #4]
 8004fea:	606a      	str	r2, [r5, #4]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio > tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 8004fec:	602b      	str	r3, [r5, #0]
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8004fee:	4629      	mov	r1, r5
    cp = cp->queue.next;
  } while (cp->prio > tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
  tp->queue.prev->queue.next = tp;
 8004ff0:	6015      	str	r5, [r2, #0]
  cp->queue.prev             = tp;
 8004ff2:	605d      	str	r5, [r3, #4]
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
}
 8004ff4:	bc70      	pop	{r4, r5, r6}
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8004ff6:	f7fb b999 	b.w	800032c <_port_switch>
 8004ffa:	bf00      	nop
 8004ffc:	20000ec8 	.word	0x20000ec8

08005000 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8005000:	b4f0      	push	{r4, r5, r6, r7}
 8005002:	4e13      	ldr	r6, [pc, #76]	; (8005050 <__init_ram_areas+0x50>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8005004:	2500      	movs	r5, #0
 8005006:	f106 0770 	add.w	r7, r6, #112	; 0x70
void __init_ram_areas(void) {
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;

  do {
    uint32_t *tp = rap->init_text_area;
 800500a:	f1a6 0110 	sub.w	r1, r6, #16
 800500e:	c91a      	ldmia	r1, {r1, r3, r4}
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8005010:	42a3      	cmp	r3, r4
 8005012:	d20d      	bcs.n	8005030 <__init_ram_areas+0x30>
 8005014:	3904      	subs	r1, #4
 8005016:	461a      	mov	r2, r3
      *p = *tp;
 8005018:	f851 0f04 	ldr.w	r0, [r1, #4]!
 800501c:	f842 0b04 	str.w	r0, [r2], #4
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8005020:	42a2      	cmp	r2, r4
 8005022:	d3f9      	bcc.n	8005018 <__init_ram_areas+0x18>
 8005024:	43da      	mvns	r2, r3
 8005026:	4414      	add	r4, r2
 8005028:	f024 0403 	bic.w	r4, r4, #3
 800502c:	3404      	adds	r4, #4
 800502e:	4423      	add	r3, r4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8005030:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005034:	4293      	cmp	r3, r2
 8005036:	d203      	bcs.n	8005040 <__init_ram_areas+0x40>
      *p = 0;
 8005038:	f843 5b04 	str.w	r5, [r3], #4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 800503c:	4293      	cmp	r3, r2
 800503e:	d3fb      	bcc.n	8005038 <__init_ram_areas+0x38>
      *p = 0;
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8005040:	42be      	cmp	r6, r7
 8005042:	f106 0310 	add.w	r3, r6, #16
 8005046:	d201      	bcs.n	800504c <__init_ram_areas+0x4c>
 8005048:	461e      	mov	r6, r3
 800504a:	e7de      	b.n	800500a <__init_ram_areas+0xa>
#endif
}
 800504c:	bcf0      	pop	{r4, r5, r6, r7}
 800504e:	4770      	bx	lr
 8005050:	080065d4 	.word	0x080065d4
 8005054:	f3af 8000 	nop.w
 8005058:	f3af 8000 	nop.w
 800505c:	f3af 8000 	nop.w

08005060 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8005060:	e7fe      	b.n	8005060 <__default_exit>
 8005062:	bf00      	nop
 8005064:	f3af 8000 	nop.w
 8005068:	f3af 8000 	nop.w
 800506c:	f3af 8000 	nop.w

08005070 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	f3af 8000 	nop.w
 8005078:	f3af 8000 	nop.w
 800507c:	f3af 8000 	nop.w

08005080 <__core_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __core_init(void) {
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	f3af 8000 	nop.w
 8005088:	f3af 8000 	nop.w
 800508c:	f3af 8000 	nop.w

08005090 <pow>:
 8005090:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005094:	ed2d 8b06 	vpush	{d8-d10}
 8005098:	eeb0 aa40 	vmov.f32	s20, s0
 800509c:	eef0 aa60 	vmov.f32	s21, s1
 80050a0:	eeb0 8a41 	vmov.f32	s16, s2
 80050a4:	eef0 8a61 	vmov.f32	s17, s3
 80050a8:	4e9f      	ldr	r6, [pc, #636]	; (8005328 <pow+0x298>)
 80050aa:	b08b      	sub	sp, #44	; 0x2c
 80050ac:	f000 f990 	bl	80053d0 <__ieee754_pow>
 80050b0:	f996 3000 	ldrsb.w	r3, [r6]
 80050b4:	eeb0 9a40 	vmov.f32	s18, s0
 80050b8:	eef0 9a60 	vmov.f32	s19, s1
 80050bc:	3301      	adds	r3, #1
 80050be:	d006      	beq.n	80050ce <pow+0x3e>
 80050c0:	eeb0 0a48 	vmov.f32	s0, s16
 80050c4:	eef0 0a68 	vmov.f32	s1, s17
 80050c8:	f000 ffd4 	bl	8006074 <__fpclassifyd>
 80050cc:	b940      	cbnz	r0, 80050e0 <pow+0x50>
 80050ce:	eeb0 0a49 	vmov.f32	s0, s18
 80050d2:	eef0 0a69 	vmov.f32	s1, s19
 80050d6:	b00b      	add	sp, #44	; 0x2c
 80050d8:	ecbd 8b06 	vpop	{d8-d10}
 80050dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80050e0:	eeb0 0a4a 	vmov.f32	s0, s20
 80050e4:	eef0 0a6a 	vmov.f32	s1, s21
 80050e8:	f000 ffc4 	bl	8006074 <__fpclassifyd>
 80050ec:	4604      	mov	r4, r0
 80050ee:	bb68      	cbnz	r0, 800514c <pow+0xbc>
 80050f0:	ec51 0b18 	vmov	r0, r1, d8
 80050f4:	2200      	movs	r2, #0
 80050f6:	2300      	movs	r3, #0
 80050f8:	f7fb fda0 	bl	8000c3c <__aeabi_dcmpeq>
 80050fc:	2800      	cmp	r0, #0
 80050fe:	d0e6      	beq.n	80050ce <pow+0x3e>
 8005100:	4b8a      	ldr	r3, [pc, #552]	; (800532c <pow+0x29c>)
 8005102:	f996 1000 	ldrsb.w	r1, [r6]
 8005106:	488a      	ldr	r0, [pc, #552]	; (8005330 <pow+0x2a0>)
 8005108:	9408      	str	r4, [sp, #32]
 800510a:	2200      	movs	r2, #0
 800510c:	2401      	movs	r4, #1
 800510e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005112:	1c4b      	adds	r3, r1, #1
 8005114:	ed8d ab02 	vstr	d10, [sp, #8]
 8005118:	ed8d 8b04 	vstr	d8, [sp, #16]
 800511c:	9400      	str	r4, [sp, #0]
 800511e:	9001      	str	r0, [sp, #4]
 8005120:	d00d      	beq.n	800513e <pow+0xae>
 8005122:	2902      	cmp	r1, #2
 8005124:	d00b      	beq.n	800513e <pow+0xae>
 8005126:	4668      	mov	r0, sp
 8005128:	f000 ffce 	bl	80060c8 <matherr>
 800512c:	2800      	cmp	r0, #0
 800512e:	f000 809d 	beq.w	800526c <pow+0x1dc>
 8005132:	9b08      	ldr	r3, [sp, #32]
 8005134:	b11b      	cbz	r3, 800513e <pow+0xae>
 8005136:	f001 f905 	bl	8006344 <__errno>
 800513a:	9b08      	ldr	r3, [sp, #32]
 800513c:	6003      	str	r3, [r0, #0]
 800513e:	ed9d 0b06 	vldr	d0, [sp, #24]
 8005142:	b00b      	add	sp, #44	; 0x2c
 8005144:	ecbd 8b06 	vpop	{d8-d10}
 8005148:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800514c:	2400      	movs	r4, #0
 800514e:	2500      	movs	r5, #0
 8005150:	ec51 0b1a 	vmov	r0, r1, d10
 8005154:	4622      	mov	r2, r4
 8005156:	462b      	mov	r3, r5
 8005158:	f7fb fd70 	bl	8000c3c <__aeabi_dcmpeq>
 800515c:	b1e8      	cbz	r0, 800519a <pow+0x10a>
 800515e:	ec51 0b18 	vmov	r0, r1, d8
 8005162:	4622      	mov	r2, r4
 8005164:	462b      	mov	r3, r5
 8005166:	f7fb fd69 	bl	8000c3c <__aeabi_dcmpeq>
 800516a:	4607      	mov	r7, r0
 800516c:	2800      	cmp	r0, #0
 800516e:	d054      	beq.n	800521a <pow+0x18a>
 8005170:	4a6f      	ldr	r2, [pc, #444]	; (8005330 <pow+0x2a0>)
 8005172:	f996 3000 	ldrsb.w	r3, [r6]
 8005176:	9201      	str	r2, [sp, #4]
 8005178:	2101      	movs	r1, #1
 800517a:	2200      	movs	r2, #0
 800517c:	ed8d ab02 	vstr	d10, [sp, #8]
 8005180:	ed8d 8b04 	vstr	d8, [sp, #16]
 8005184:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005188:	9100      	str	r1, [sp, #0]
 800518a:	9208      	str	r2, [sp, #32]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d0ca      	beq.n	8005126 <pow+0x96>
 8005190:	4b66      	ldr	r3, [pc, #408]	; (800532c <pow+0x29c>)
 8005192:	2200      	movs	r2, #0
 8005194:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005198:	e7d1      	b.n	800513e <pow+0xae>
 800519a:	eeb0 0a49 	vmov.f32	s0, s18
 800519e:	eef0 0a69 	vmov.f32	s1, s19
 80051a2:	f000 ff5f 	bl	8006064 <finite>
 80051a6:	4607      	mov	r7, r0
 80051a8:	2800      	cmp	r0, #0
 80051aa:	d064      	beq.n	8005276 <pow+0x1e6>
 80051ac:	2400      	movs	r4, #0
 80051ae:	2500      	movs	r5, #0
 80051b0:	ec51 0b19 	vmov	r0, r1, d9
 80051b4:	4622      	mov	r2, r4
 80051b6:	462b      	mov	r3, r5
 80051b8:	f7fb fd40 	bl	8000c3c <__aeabi_dcmpeq>
 80051bc:	2800      	cmp	r0, #0
 80051be:	d086      	beq.n	80050ce <pow+0x3e>
 80051c0:	eeb0 0a4a 	vmov.f32	s0, s20
 80051c4:	eef0 0a6a 	vmov.f32	s1, s21
 80051c8:	f000 ff4c 	bl	8006064 <finite>
 80051cc:	2800      	cmp	r0, #0
 80051ce:	f43f af7e 	beq.w	80050ce <pow+0x3e>
 80051d2:	eeb0 0a48 	vmov.f32	s0, s16
 80051d6:	eef0 0a68 	vmov.f32	s1, s17
 80051da:	f000 ff43 	bl	8006064 <finite>
 80051de:	2800      	cmp	r0, #0
 80051e0:	f43f af75 	beq.w	80050ce <pow+0x3e>
 80051e4:	f996 3000 	ldrsb.w	r3, [r6]
 80051e8:	4a51      	ldr	r2, [pc, #324]	; (8005330 <pow+0x2a0>)
 80051ea:	9201      	str	r2, [sp, #4]
 80051ec:	2104      	movs	r1, #4
 80051ee:	2200      	movs	r2, #0
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	ed8d ab02 	vstr	d10, [sp, #8]
 80051f6:	ed8d 8b04 	vstr	d8, [sp, #16]
 80051fa:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80051fe:	9100      	str	r1, [sp, #0]
 8005200:	9208      	str	r2, [sp, #32]
 8005202:	f000 808c 	beq.w	800531e <pow+0x28e>
 8005206:	4668      	mov	r0, sp
 8005208:	f000 ff5e 	bl	80060c8 <matherr>
 800520c:	2800      	cmp	r0, #0
 800520e:	f000 8086 	beq.w	800531e <pow+0x28e>
 8005212:	9b08      	ldr	r3, [sp, #32]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d092      	beq.n	800513e <pow+0xae>
 8005218:	e78d      	b.n	8005136 <pow+0xa6>
 800521a:	eeb0 0a48 	vmov.f32	s0, s16
 800521e:	eef0 0a68 	vmov.f32	s1, s17
 8005222:	f000 ff1f 	bl	8006064 <finite>
 8005226:	2800      	cmp	r0, #0
 8005228:	f43f af51 	beq.w	80050ce <pow+0x3e>
 800522c:	ec51 0b18 	vmov	r0, r1, d8
 8005230:	4622      	mov	r2, r4
 8005232:	462b      	mov	r3, r5
 8005234:	f7fb fd0c 	bl	8000c50 <__aeabi_dcmplt>
 8005238:	2800      	cmp	r0, #0
 800523a:	f43f af48 	beq.w	80050ce <pow+0x3e>
 800523e:	4b3c      	ldr	r3, [pc, #240]	; (8005330 <pow+0x2a0>)
 8005240:	7831      	ldrb	r1, [r6, #0]
 8005242:	9708      	str	r7, [sp, #32]
 8005244:	2201      	movs	r2, #1
 8005246:	ed8d ab02 	vstr	d10, [sp, #8]
 800524a:	ed8d 8b04 	vstr	d8, [sp, #16]
 800524e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8005252:	2900      	cmp	r1, #0
 8005254:	d041      	beq.n	80052da <pow+0x24a>
 8005256:	4b37      	ldr	r3, [pc, #220]	; (8005334 <pow+0x2a4>)
 8005258:	2200      	movs	r2, #0
 800525a:	2902      	cmp	r1, #2
 800525c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005260:	d135      	bne.n	80052ce <pow+0x23e>
 8005262:	f001 f86f 	bl	8006344 <__errno>
 8005266:	2321      	movs	r3, #33	; 0x21
 8005268:	6003      	str	r3, [r0, #0]
 800526a:	e7d2      	b.n	8005212 <pow+0x182>
 800526c:	f001 f86a 	bl	8006344 <__errno>
 8005270:	2321      	movs	r3, #33	; 0x21
 8005272:	6003      	str	r3, [r0, #0]
 8005274:	e75d      	b.n	8005132 <pow+0xa2>
 8005276:	eeb0 0a4a 	vmov.f32	s0, s20
 800527a:	eef0 0a6a 	vmov.f32	s1, s21
 800527e:	f000 fef1 	bl	8006064 <finite>
 8005282:	2800      	cmp	r0, #0
 8005284:	d092      	beq.n	80051ac <pow+0x11c>
 8005286:	eeb0 0a48 	vmov.f32	s0, s16
 800528a:	eef0 0a68 	vmov.f32	s1, s17
 800528e:	f000 fee9 	bl	8006064 <finite>
 8005292:	2800      	cmp	r0, #0
 8005294:	d08a      	beq.n	80051ac <pow+0x11c>
 8005296:	eeb0 0a49 	vmov.f32	s0, s18
 800529a:	eef0 0a69 	vmov.f32	s1, s19
 800529e:	f000 fee9 	bl	8006074 <__fpclassifyd>
 80052a2:	b9e8      	cbnz	r0, 80052e0 <pow+0x250>
 80052a4:	4b22      	ldr	r3, [pc, #136]	; (8005330 <pow+0x2a0>)
 80052a6:	7836      	ldrb	r6, [r6, #0]
 80052a8:	9008      	str	r0, [sp, #32]
 80052aa:	2201      	movs	r2, #1
 80052ac:	ed8d ab02 	vstr	d10, [sp, #8]
 80052b0:	ed8d 8b04 	vstr	d8, [sp, #16]
 80052b4:	e88d 000c 	stmia.w	sp, {r2, r3}
 80052b8:	b17e      	cbz	r6, 80052da <pow+0x24a>
 80052ba:	4620      	mov	r0, r4
 80052bc:	4629      	mov	r1, r5
 80052be:	4622      	mov	r2, r4
 80052c0:	462b      	mov	r3, r5
 80052c2:	f7fb fb2d 	bl	8000920 <__aeabi_ddiv>
 80052c6:	2e02      	cmp	r6, #2
 80052c8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80052cc:	d0c9      	beq.n	8005262 <pow+0x1d2>
 80052ce:	4668      	mov	r0, sp
 80052d0:	f000 fefa 	bl	80060c8 <matherr>
 80052d4:	2800      	cmp	r0, #0
 80052d6:	d19c      	bne.n	8005212 <pow+0x182>
 80052d8:	e7c3      	b.n	8005262 <pow+0x1d2>
 80052da:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80052de:	e7f6      	b.n	80052ce <pow+0x23e>
 80052e0:	4a13      	ldr	r2, [pc, #76]	; (8005330 <pow+0x2a0>)
 80052e2:	f996 3000 	ldrsb.w	r3, [r6]
 80052e6:	9708      	str	r7, [sp, #32]
 80052e8:	2103      	movs	r1, #3
 80052ea:	ed8d ab02 	vstr	d10, [sp, #8]
 80052ee:	ed8d 8b04 	vstr	d8, [sp, #16]
 80052f2:	e88d 0006 	stmia.w	sp, {r1, r2}
 80052f6:	bb0b      	cbnz	r3, 800533c <pow+0x2ac>
 80052f8:	f8df 903c 	ldr.w	r9, [pc, #60]	; 8005338 <pow+0x2a8>
 80052fc:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
 8005300:	4622      	mov	r2, r4
 8005302:	462b      	mov	r3, r5
 8005304:	ec51 0b1a 	vmov	r0, r1, d10
 8005308:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800530c:	f7fb fca0 	bl	8000c50 <__aeabi_dcmplt>
 8005310:	2800      	cmp	r0, #0
 8005312:	d13a      	bne.n	800538a <pow+0x2fa>
 8005314:	f996 3000 	ldrsb.w	r3, [r6]
 8005318:	2b02      	cmp	r3, #2
 800531a:	f47f af74 	bne.w	8005206 <pow+0x176>
 800531e:	f001 f811 	bl	8006344 <__errno>
 8005322:	2322      	movs	r3, #34	; 0x22
 8005324:	6003      	str	r3, [r0, #0]
 8005326:	e774      	b.n	8005212 <pow+0x182>
 8005328:	2000081c 	.word	0x2000081c
 800532c:	3ff00000 	.word	0x3ff00000
 8005330:	08006644 	.word	0x08006644
 8005334:	fff00000 	.word	0xfff00000
 8005338:	47efffff 	.word	0x47efffff
 800533c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80053cc <pow+0x33c>
 8005340:	f04f 0800 	mov.w	r8, #0
 8005344:	4622      	mov	r2, r4
 8005346:	462b      	mov	r3, r5
 8005348:	ec51 0b1a 	vmov	r0, r1, d10
 800534c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005350:	f7fb fc7e 	bl	8000c50 <__aeabi_dcmplt>
 8005354:	2800      	cmp	r0, #0
 8005356:	d0dd      	beq.n	8005314 <pow+0x284>
 8005358:	2200      	movs	r2, #0
 800535a:	4b19      	ldr	r3, [pc, #100]	; (80053c0 <pow+0x330>)
 800535c:	ec51 0b18 	vmov	r0, r1, d8
 8005360:	f7fb f9b4 	bl	80006cc <__aeabi_dmul>
 8005364:	4604      	mov	r4, r0
 8005366:	460d      	mov	r5, r1
 8005368:	ec45 4b10 	vmov	d0, r4, r5
 800536c:	f000 feb8 	bl	80060e0 <rint>
 8005370:	4622      	mov	r2, r4
 8005372:	ec51 0b10 	vmov	r0, r1, d0
 8005376:	462b      	mov	r3, r5
 8005378:	f7fb fc60 	bl	8000c3c <__aeabi_dcmpeq>
 800537c:	2800      	cmp	r0, #0
 800537e:	d1c9      	bne.n	8005314 <pow+0x284>
 8005380:	4b10      	ldr	r3, [pc, #64]	; (80053c4 <pow+0x334>)
 8005382:	2200      	movs	r2, #0
 8005384:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005388:	e7c4      	b.n	8005314 <pow+0x284>
 800538a:	2200      	movs	r2, #0
 800538c:	4b0c      	ldr	r3, [pc, #48]	; (80053c0 <pow+0x330>)
 800538e:	ec51 0b18 	vmov	r0, r1, d8
 8005392:	f7fb f99b 	bl	80006cc <__aeabi_dmul>
 8005396:	4604      	mov	r4, r0
 8005398:	460d      	mov	r5, r1
 800539a:	ec45 4b10 	vmov	d0, r4, r5
 800539e:	f000 fe9f 	bl	80060e0 <rint>
 80053a2:	4622      	mov	r2, r4
 80053a4:	ec51 0b10 	vmov	r0, r1, d0
 80053a8:	462b      	mov	r3, r5
 80053aa:	f7fb fc47 	bl	8000c3c <__aeabi_dcmpeq>
 80053ae:	2800      	cmp	r0, #0
 80053b0:	d1b0      	bne.n	8005314 <pow+0x284>
 80053b2:	4b05      	ldr	r3, [pc, #20]	; (80053c8 <pow+0x338>)
 80053b4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80053b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80053bc:	e7aa      	b.n	8005314 <pow+0x284>
 80053be:	bf00      	nop
 80053c0:	3fe00000 	.word	0x3fe00000
 80053c4:	fff00000 	.word	0xfff00000
 80053c8:	c7efffff 	.word	0xc7efffff
 80053cc:	7ff00000 	.word	0x7ff00000

080053d0 <__ieee754_pow>:
 80053d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053d4:	ec55 4b11 	vmov	r4, r5, d1
 80053d8:	ed2d 8b04 	vpush	{d8-d9}
 80053dc:	eeb0 9a41 	vmov.f32	s18, s2
 80053e0:	eef0 9a61 	vmov.f32	s19, s3
 80053e4:	eeb0 8a40 	vmov.f32	s16, s0
 80053e8:	eef0 8a60 	vmov.f32	s17, s1
 80053ec:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80053f0:	ea58 0104 	orrs.w	r1, r8, r4
 80053f4:	b08f      	sub	sp, #60	; 0x3c
 80053f6:	ec57 6b10 	vmov	r6, r7, d0
 80053fa:	d033      	beq.n	8005464 <__ieee754_pow+0x94>
 80053fc:	4b6c      	ldr	r3, [pc, #432]	; (80055b0 <__ieee754_pow+0x1e0>)
 80053fe:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
 8005402:	4599      	cmp	r9, r3
 8005404:	dc28      	bgt.n	8005458 <__ieee754_pow+0x88>
 8005406:	d025      	beq.n	8005454 <__ieee754_pow+0x84>
 8005408:	4b69      	ldr	r3, [pc, #420]	; (80055b0 <__ieee754_pow+0x1e0>)
 800540a:	4598      	cmp	r8, r3
 800540c:	dc24      	bgt.n	8005458 <__ieee754_pow+0x88>
 800540e:	f000 808a 	beq.w	8005526 <__ieee754_pow+0x156>
 8005412:	2f00      	cmp	r7, #0
 8005414:	f2c0 808b 	blt.w	800552e <__ieee754_pow+0x15e>
 8005418:	f04f 0a00 	mov.w	sl, #0
 800541c:	bb9c      	cbnz	r4, 8005486 <__ieee754_pow+0xb6>
 800541e:	4b64      	ldr	r3, [pc, #400]	; (80055b0 <__ieee754_pow+0x1e0>)
 8005420:	4598      	cmp	r8, r3
 8005422:	f000 80a2 	beq.w	800556a <__ieee754_pow+0x19a>
 8005426:	4b63      	ldr	r3, [pc, #396]	; (80055b4 <__ieee754_pow+0x1e4>)
 8005428:	4598      	cmp	r8, r3
 800542a:	d074      	beq.n	8005516 <__ieee754_pow+0x146>
 800542c:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8005430:	f000 840a 	beq.w	8005c48 <__ieee754_pow+0x878>
 8005434:	4b60      	ldr	r3, [pc, #384]	; (80055b8 <__ieee754_pow+0x1e8>)
 8005436:	429d      	cmp	r5, r3
 8005438:	d125      	bne.n	8005486 <__ieee754_pow+0xb6>
 800543a:	2f00      	cmp	r7, #0
 800543c:	db23      	blt.n	8005486 <__ieee754_pow+0xb6>
 800543e:	eeb0 0a48 	vmov.f32	s0, s16
 8005442:	eef0 0a68 	vmov.f32	s1, s17
 8005446:	b00f      	add	sp, #60	; 0x3c
 8005448:	ecbd 8b04 	vpop	{d8-d9}
 800544c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005450:	f000 bd32 	b.w	8005eb8 <__ieee754_sqrt>
 8005454:	2e00      	cmp	r6, #0
 8005456:	d0d7      	beq.n	8005408 <__ieee754_pow+0x38>
 8005458:	f109 4340 	add.w	r3, r9, #3221225472	; 0xc0000000
 800545c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005460:	4333      	orrs	r3, r6
 8005462:	d106      	bne.n	8005472 <__ieee754_pow+0xa2>
 8005464:	ed9f 0b4e 	vldr	d0, [pc, #312]	; 80055a0 <__ieee754_pow+0x1d0>
 8005468:	b00f      	add	sp, #60	; 0x3c
 800546a:	ecbd 8b04 	vpop	{d8-d9}
 800546e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005472:	4852      	ldr	r0, [pc, #328]	; (80055bc <__ieee754_pow+0x1ec>)
 8005474:	b00f      	add	sp, #60	; 0x3c
 8005476:	ecbd 8b04 	vpop	{d8-d9}
 800547a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800547e:	f000 be27 	b.w	80060d0 <nan>
 8005482:	f04f 0a00 	mov.w	sl, #0
 8005486:	eeb0 0a48 	vmov.f32	s0, s16
 800548a:	eef0 0a68 	vmov.f32	s1, s17
 800548e:	f000 fddf 	bl	8006050 <fabs>
 8005492:	bb0e      	cbnz	r6, 80054d8 <__ieee754_pow+0x108>
 8005494:	f1b9 0f00 	cmp.w	r9, #0
 8005498:	d004      	beq.n	80054a4 <__ieee754_pow+0xd4>
 800549a:	4b46      	ldr	r3, [pc, #280]	; (80055b4 <__ieee754_pow+0x1e4>)
 800549c:	f027 4240 	bic.w	r2, r7, #3221225472	; 0xc0000000
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d119      	bne.n	80054d8 <__ieee754_pow+0x108>
 80054a4:	2d00      	cmp	r5, #0
 80054a6:	f2c0 8419 	blt.w	8005cdc <__ieee754_pow+0x90c>
 80054aa:	2f00      	cmp	r7, #0
 80054ac:	dadc      	bge.n	8005468 <__ieee754_pow+0x98>
 80054ae:	f109 4940 	add.w	r9, r9, #3221225472	; 0xc0000000
 80054b2:	f509 1980 	add.w	r9, r9, #1048576	; 0x100000
 80054b6:	ea5a 0909 	orrs.w	r9, sl, r9
 80054ba:	f040 8495 	bne.w	8005de8 <__ieee754_pow+0xa18>
 80054be:	ec51 0b10 	vmov	r0, r1, d0
 80054c2:	4602      	mov	r2, r0
 80054c4:	460b      	mov	r3, r1
 80054c6:	f7fa ff4d 	bl	8000364 <__aeabi_dsub>
 80054ca:	4602      	mov	r2, r0
 80054cc:	460b      	mov	r3, r1
 80054ce:	f7fb fa27 	bl	8000920 <__aeabi_ddiv>
 80054d2:	ec41 0b10 	vmov	d0, r0, r1
 80054d6:	e7c7      	b.n	8005468 <__ieee754_pow+0x98>
 80054d8:	0ffb      	lsrs	r3, r7, #31
 80054da:	f103 3bff 	add.w	fp, r3, #4294967295
 80054de:	ea5a 020b 	orrs.w	r2, sl, fp
 80054e2:	d058      	beq.n	8005596 <__ieee754_pow+0x1c6>
 80054e4:	4b36      	ldr	r3, [pc, #216]	; (80055c0 <__ieee754_pow+0x1f0>)
 80054e6:	4598      	cmp	r8, r3
 80054e8:	dd70      	ble.n	80055cc <__ieee754_pow+0x1fc>
 80054ea:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80054ee:	4598      	cmp	r8, r3
 80054f0:	f340 83fe 	ble.w	8005cf0 <__ieee754_pow+0x920>
 80054f4:	4b33      	ldr	r3, [pc, #204]	; (80055c4 <__ieee754_pow+0x1f4>)
 80054f6:	4599      	cmp	r9, r3
 80054f8:	f340 83a0 	ble.w	8005c3c <__ieee754_pow+0x86c>
 80054fc:	2d00      	cmp	r5, #0
 80054fe:	f340 83a0 	ble.w	8005c42 <__ieee754_pow+0x872>
 8005502:	a129      	add	r1, pc, #164	; (adr r1, 80055a8 <__ieee754_pow+0x1d8>)
 8005504:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005508:	4602      	mov	r2, r0
 800550a:	460b      	mov	r3, r1
 800550c:	f7fb f8de 	bl	80006cc <__aeabi_dmul>
 8005510:	ec41 0b10 	vmov	d0, r0, r1
 8005514:	e7a8      	b.n	8005468 <__ieee754_pow+0x98>
 8005516:	2d00      	cmp	r5, #0
 8005518:	f2c0 844c 	blt.w	8005db4 <__ieee754_pow+0x9e4>
 800551c:	eeb0 0a48 	vmov.f32	s0, s16
 8005520:	eef0 0a68 	vmov.f32	s1, s17
 8005524:	e7a0      	b.n	8005468 <__ieee754_pow+0x98>
 8005526:	2c00      	cmp	r4, #0
 8005528:	f43f af73 	beq.w	8005412 <__ieee754_pow+0x42>
 800552c:	e794      	b.n	8005458 <__ieee754_pow+0x88>
 800552e:	4b26      	ldr	r3, [pc, #152]	; (80055c8 <__ieee754_pow+0x1f8>)
 8005530:	4598      	cmp	r8, r3
 8005532:	dc2d      	bgt.n	8005590 <__ieee754_pow+0x1c0>
 8005534:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005538:	4598      	cmp	r8, r3
 800553a:	f77f af6d 	ble.w	8005418 <__ieee754_pow+0x48>
 800553e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005542:	f240 4213 	movw	r2, #1043	; 0x413
 8005546:	4293      	cmp	r3, r2
 8005548:	f340 845c 	ble.w	8005e04 <__ieee754_pow+0xa34>
 800554c:	f5c3 6386 	rsb	r3, r3, #1072	; 0x430
 8005550:	3303      	adds	r3, #3
 8005552:	fa24 f203 	lsr.w	r2, r4, r3
 8005556:	fa02 f303 	lsl.w	r3, r2, r3
 800555a:	42a3      	cmp	r3, r4
 800555c:	f47f af5c 	bne.w	8005418 <__ieee754_pow+0x48>
 8005560:	f002 0201 	and.w	r2, r2, #1
 8005564:	f1c2 0a02 	rsb	sl, r2, #2
 8005568:	e758      	b.n	800541c <__ieee754_pow+0x4c>
 800556a:	f109 4340 	add.w	r3, r9, #3221225472	; 0xc0000000
 800556e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005572:	4333      	orrs	r3, r6
 8005574:	f43f af76 	beq.w	8005464 <__ieee754_pow+0x94>
 8005578:	4b12      	ldr	r3, [pc, #72]	; (80055c4 <__ieee754_pow+0x1f4>)
 800557a:	4599      	cmp	r9, r3
 800557c:	f340 83a2 	ble.w	8005cc4 <__ieee754_pow+0x8f4>
 8005580:	2d00      	cmp	r5, #0
 8005582:	f2c0 835e 	blt.w	8005c42 <__ieee754_pow+0x872>
 8005586:	eeb0 0a49 	vmov.f32	s0, s18
 800558a:	eef0 0a69 	vmov.f32	s1, s19
 800558e:	e76b      	b.n	8005468 <__ieee754_pow+0x98>
 8005590:	f04f 0a02 	mov.w	sl, #2
 8005594:	e742      	b.n	800541c <__ieee754_pow+0x4c>
 8005596:	ec51 0b18 	vmov	r0, r1, d8
 800559a:	e792      	b.n	80054c2 <__ieee754_pow+0xf2>
 800559c:	f3af 8000 	nop.w
 80055a0:	00000000 	.word	0x00000000
 80055a4:	3ff00000 	.word	0x3ff00000
 80055a8:	8800759c 	.word	0x8800759c
 80055ac:	7e37e43c 	.word	0x7e37e43c
 80055b0:	7ff00000 	.word	0x7ff00000
 80055b4:	3ff00000 	.word	0x3ff00000
 80055b8:	3fe00000 	.word	0x3fe00000
 80055bc:	08006498 	.word	0x08006498
 80055c0:	41e00000 	.word	0x41e00000
 80055c4:	3fefffff 	.word	0x3fefffff
 80055c8:	433fffff 	.word	0x433fffff
 80055cc:	f5b9 1f80 	cmp.w	r9, #1048576	; 0x100000
 80055d0:	f280 83ee 	bge.w	8005db0 <__ieee754_pow+0x9e0>
 80055d4:	ec51 0b10 	vmov	r0, r1, d0
 80055d8:	2200      	movs	r2, #0
 80055da:	4bab      	ldr	r3, [pc, #684]	; (8005888 <__ieee754_pow+0x4b8>)
 80055dc:	f7fb f876 	bl	80006cc <__aeabi_dmul>
 80055e0:	460b      	mov	r3, r1
 80055e2:	ec41 0b10 	vmov	d0, r0, r1
 80055e6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80055ea:	4699      	mov	r9, r3
 80055ec:	4ba7      	ldr	r3, [pc, #668]	; (800588c <__ieee754_pow+0x4bc>)
 80055ee:	ea4f 5129 	mov.w	r1, r9, asr #20
 80055f2:	f3c9 0913 	ubfx	r9, r9, #0, #20
 80055f6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80055fa:	f049 567f 	orr.w	r6, r9, #1069547520	; 0x3fc00000
 80055fe:	4599      	cmp	r9, r3
 8005600:	eb01 0c02 	add.w	ip, r1, r2
 8005604:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8005608:	f340 83cf 	ble.w	8005daa <__ieee754_pow+0x9da>
 800560c:	4ba0      	ldr	r3, [pc, #640]	; (8005890 <__ieee754_pow+0x4c0>)
 800560e:	4599      	cmp	r9, r3
 8005610:	f340 8410 	ble.w	8005e34 <__ieee754_pow+0xa64>
 8005614:	2700      	movs	r7, #0
 8005616:	f10c 0c01 	add.w	ip, ip, #1
 800561a:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 800561e:	463b      	mov	r3, r7
 8005620:	4a9c      	ldr	r2, [pc, #624]	; (8005894 <__ieee754_pow+0x4c4>)
 8005622:	f8cd c004 	str.w	ip, [sp, #4]
 8005626:	00db      	lsls	r3, r3, #3
 8005628:	930b      	str	r3, [sp, #44]	; 0x2c
 800562a:	4413      	add	r3, r2
 800562c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005630:	ec59 8b10 	vmov	r8, r9, d0
 8005634:	4622      	mov	r2, r4
 8005636:	462b      	mov	r3, r5
 8005638:	4640      	mov	r0, r8
 800563a:	4631      	mov	r1, r6
 800563c:	f7fa fe92 	bl	8000364 <__aeabi_dsub>
 8005640:	4622      	mov	r2, r4
 8005642:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005646:	462b      	mov	r3, r5
 8005648:	4640      	mov	r0, r8
 800564a:	4631      	mov	r1, r6
 800564c:	f7fa fe8c 	bl	8000368 <__adddf3>
 8005650:	4602      	mov	r2, r0
 8005652:	460b      	mov	r3, r1
 8005654:	2000      	movs	r0, #0
 8005656:	4990      	ldr	r1, [pc, #576]	; (8005898 <__ieee754_pow+0x4c8>)
 8005658:	f7fb f962 	bl	8000920 <__aeabi_ddiv>
 800565c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005660:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005664:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005668:	f7fb f830 	bl	80006cc <__aeabi_dmul>
 800566c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005670:	1071      	asrs	r1, r6, #1
 8005672:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005676:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800567a:	f501 2100 	add.w	r1, r1, #524288	; 0x80000
 800567e:	19cb      	adds	r3, r1, r7
 8005680:	2100      	movs	r1, #0
 8005682:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005686:	9102      	str	r1, [sp, #8]
 8005688:	46b1      	mov	r9, r6
 800568a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800568e:	2200      	movs	r2, #0
 8005690:	4630      	mov	r0, r6
 8005692:	4639      	mov	r1, r7
 8005694:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005698:	f7fb f818 	bl	80006cc <__aeabi_dmul>
 800569c:	4602      	mov	r2, r0
 800569e:	460b      	mov	r3, r1
 80056a0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80056a4:	f7fa fe5e 	bl	8000364 <__aeabi_dsub>
 80056a8:	4622      	mov	r2, r4
 80056aa:	462b      	mov	r3, r5
 80056ac:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80056b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056b4:	f7fa fe56 	bl	8000364 <__aeabi_dsub>
 80056b8:	4602      	mov	r2, r0
 80056ba:	460b      	mov	r3, r1
 80056bc:	4640      	mov	r0, r8
 80056be:	4649      	mov	r1, r9
 80056c0:	f7fa fe50 	bl	8000364 <__aeabi_dsub>
 80056c4:	4602      	mov	r2, r0
 80056c6:	460b      	mov	r3, r1
 80056c8:	4630      	mov	r0, r6
 80056ca:	4639      	mov	r1, r7
 80056cc:	f7fa fffe 	bl	80006cc <__aeabi_dmul>
 80056d0:	4602      	mov	r2, r0
 80056d2:	460b      	mov	r3, r1
 80056d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80056d8:	f7fa fe44 	bl	8000364 <__aeabi_dsub>
 80056dc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80056e0:	f7fa fff4 	bl	80006cc <__aeabi_dmul>
 80056e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80056e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056ec:	4602      	mov	r2, r0
 80056ee:	460b      	mov	r3, r1
 80056f0:	f7fa ffec 	bl	80006cc <__aeabi_dmul>
 80056f4:	4602      	mov	r2, r0
 80056f6:	460b      	mov	r3, r1
 80056f8:	4604      	mov	r4, r0
 80056fa:	460d      	mov	r5, r1
 80056fc:	f7fa ffe6 	bl	80006cc <__aeabi_dmul>
 8005700:	a351      	add	r3, pc, #324	; (adr r3, 8005848 <__ieee754_pow+0x478>)
 8005702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005706:	4680      	mov	r8, r0
 8005708:	4689      	mov	r9, r1
 800570a:	4620      	mov	r0, r4
 800570c:	4629      	mov	r1, r5
 800570e:	f7fa ffdd 	bl	80006cc <__aeabi_dmul>
 8005712:	a34f      	add	r3, pc, #316	; (adr r3, 8005850 <__ieee754_pow+0x480>)
 8005714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005718:	f7fa fe26 	bl	8000368 <__adddf3>
 800571c:	4622      	mov	r2, r4
 800571e:	462b      	mov	r3, r5
 8005720:	f7fa ffd4 	bl	80006cc <__aeabi_dmul>
 8005724:	a34c      	add	r3, pc, #304	; (adr r3, 8005858 <__ieee754_pow+0x488>)
 8005726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572a:	f7fa fe1d 	bl	8000368 <__adddf3>
 800572e:	4622      	mov	r2, r4
 8005730:	462b      	mov	r3, r5
 8005732:	f7fa ffcb 	bl	80006cc <__aeabi_dmul>
 8005736:	a34a      	add	r3, pc, #296	; (adr r3, 8005860 <__ieee754_pow+0x490>)
 8005738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573c:	f7fa fe14 	bl	8000368 <__adddf3>
 8005740:	4622      	mov	r2, r4
 8005742:	462b      	mov	r3, r5
 8005744:	f7fa ffc2 	bl	80006cc <__aeabi_dmul>
 8005748:	a347      	add	r3, pc, #284	; (adr r3, 8005868 <__ieee754_pow+0x498>)
 800574a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574e:	f7fa fe0b 	bl	8000368 <__adddf3>
 8005752:	4622      	mov	r2, r4
 8005754:	462b      	mov	r3, r5
 8005756:	f7fa ffb9 	bl	80006cc <__aeabi_dmul>
 800575a:	a345      	add	r3, pc, #276	; (adr r3, 8005870 <__ieee754_pow+0x4a0>)
 800575c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005760:	f7fa fe02 	bl	8000368 <__adddf3>
 8005764:	4602      	mov	r2, r0
 8005766:	460b      	mov	r3, r1
 8005768:	4640      	mov	r0, r8
 800576a:	4649      	mov	r1, r9
 800576c:	f7fa ffae 	bl	80006cc <__aeabi_dmul>
 8005770:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005774:	4604      	mov	r4, r0
 8005776:	460d      	mov	r5, r1
 8005778:	4630      	mov	r0, r6
 800577a:	4639      	mov	r1, r7
 800577c:	f7fa fdf4 	bl	8000368 <__adddf3>
 8005780:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005784:	f7fa ffa2 	bl	80006cc <__aeabi_dmul>
 8005788:	4622      	mov	r2, r4
 800578a:	462b      	mov	r3, r5
 800578c:	f7fa fdec 	bl	8000368 <__adddf3>
 8005790:	4632      	mov	r2, r6
 8005792:	4680      	mov	r8, r0
 8005794:	4689      	mov	r9, r1
 8005796:	463b      	mov	r3, r7
 8005798:	4630      	mov	r0, r6
 800579a:	4639      	mov	r1, r7
 800579c:	f7fa ff96 	bl	80006cc <__aeabi_dmul>
 80057a0:	2200      	movs	r2, #0
 80057a2:	4b3e      	ldr	r3, [pc, #248]	; (800589c <__ieee754_pow+0x4cc>)
 80057a4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80057a8:	f7fa fdde 	bl	8000368 <__adddf3>
 80057ac:	4642      	mov	r2, r8
 80057ae:	464b      	mov	r3, r9
 80057b0:	f7fa fdda 	bl	8000368 <__adddf3>
 80057b4:	9802      	ldr	r0, [sp, #8]
 80057b6:	460d      	mov	r5, r1
 80057b8:	4604      	mov	r4, r0
 80057ba:	4622      	mov	r2, r4
 80057bc:	462b      	mov	r3, r5
 80057be:	4630      	mov	r0, r6
 80057c0:	4639      	mov	r1, r7
 80057c2:	f7fa ff83 	bl	80006cc <__aeabi_dmul>
 80057c6:	4622      	mov	r2, r4
 80057c8:	462b      	mov	r3, r5
 80057ca:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80057ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057d2:	f7fa ff7b 	bl	80006cc <__aeabi_dmul>
 80057d6:	2200      	movs	r2, #0
 80057d8:	4606      	mov	r6, r0
 80057da:	460f      	mov	r7, r1
 80057dc:	4620      	mov	r0, r4
 80057de:	4629      	mov	r1, r5
 80057e0:	4b2e      	ldr	r3, [pc, #184]	; (800589c <__ieee754_pow+0x4cc>)
 80057e2:	f7fa fdbf 	bl	8000364 <__aeabi_dsub>
 80057e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80057ea:	f7fa fdbb 	bl	8000364 <__aeabi_dsub>
 80057ee:	4602      	mov	r2, r0
 80057f0:	460b      	mov	r3, r1
 80057f2:	4640      	mov	r0, r8
 80057f4:	4649      	mov	r1, r9
 80057f6:	f7fa fdb5 	bl	8000364 <__aeabi_dsub>
 80057fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057fe:	f7fa ff65 	bl	80006cc <__aeabi_dmul>
 8005802:	4602      	mov	r2, r0
 8005804:	460b      	mov	r3, r1
 8005806:	4630      	mov	r0, r6
 8005808:	4639      	mov	r1, r7
 800580a:	f7fa fdad 	bl	8000368 <__adddf3>
 800580e:	4680      	mov	r8, r0
 8005810:	4689      	mov	r9, r1
 8005812:	4642      	mov	r2, r8
 8005814:	464b      	mov	r3, r9
 8005816:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800581a:	f7fa fda5 	bl	8000368 <__adddf3>
 800581e:	9802      	ldr	r0, [sp, #8]
 8005820:	a315      	add	r3, pc, #84	; (adr r3, 8005878 <__ieee754_pow+0x4a8>)
 8005822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005826:	4604      	mov	r4, r0
 8005828:	460d      	mov	r5, r1
 800582a:	f7fa ff4f 	bl	80006cc <__aeabi_dmul>
 800582e:	a314      	add	r3, pc, #80	; (adr r3, 8005880 <__ieee754_pow+0x4b0>)
 8005830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005834:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005838:	4620      	mov	r0, r4
 800583a:	4629      	mov	r1, r5
 800583c:	f7fa ff46 	bl	80006cc <__aeabi_dmul>
 8005840:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005844:	4606      	mov	r6, r0
 8005846:	e02b      	b.n	80058a0 <__ieee754_pow+0x4d0>
 8005848:	4a454eef 	.word	0x4a454eef
 800584c:	3fca7e28 	.word	0x3fca7e28
 8005850:	93c9db65 	.word	0x93c9db65
 8005854:	3fcd864a 	.word	0x3fcd864a
 8005858:	a91d4101 	.word	0xa91d4101
 800585c:	3fd17460 	.word	0x3fd17460
 8005860:	518f264d 	.word	0x518f264d
 8005864:	3fd55555 	.word	0x3fd55555
 8005868:	db6fabff 	.word	0xdb6fabff
 800586c:	3fdb6db6 	.word	0x3fdb6db6
 8005870:	33333303 	.word	0x33333303
 8005874:	3fe33333 	.word	0x3fe33333
 8005878:	e0000000 	.word	0xe0000000
 800587c:	3feec709 	.word	0x3feec709
 8005880:	145b01f5 	.word	0x145b01f5
 8005884:	be3e2fe0 	.word	0xbe3e2fe0
 8005888:	43400000 	.word	0x43400000
 800588c:	0003988e 	.word	0x0003988e
 8005890:	000bb679 	.word	0x000bb679
 8005894:	08006668 	.word	0x08006668
 8005898:	3ff00000 	.word	0x3ff00000
 800589c:	40080000 	.word	0x40080000
 80058a0:	460f      	mov	r7, r1
 80058a2:	4620      	mov	r0, r4
 80058a4:	4629      	mov	r1, r5
 80058a6:	f7fa fd5d 	bl	8000364 <__aeabi_dsub>
 80058aa:	4602      	mov	r2, r0
 80058ac:	460b      	mov	r3, r1
 80058ae:	4640      	mov	r0, r8
 80058b0:	4649      	mov	r1, r9
 80058b2:	f7fa fd57 	bl	8000364 <__aeabi_dsub>
 80058b6:	a3bb      	add	r3, pc, #748	; (adr r3, 8005ba4 <__ieee754_pow+0x7d4>)
 80058b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058bc:	f7fa ff06 	bl	80006cc <__aeabi_dmul>
 80058c0:	4602      	mov	r2, r0
 80058c2:	460b      	mov	r3, r1
 80058c4:	4630      	mov	r0, r6
 80058c6:	4639      	mov	r1, r7
 80058c8:	f7fa fd4e 	bl	8000368 <__adddf3>
 80058cc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80058ce:	4bb2      	ldr	r3, [pc, #712]	; (8005b98 <__ieee754_pow+0x7c8>)
 80058d0:	4423      	add	r3, r4
 80058d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d6:	f7fa fd47 	bl	8000368 <__adddf3>
 80058da:	f8dd c004 	ldr.w	ip, [sp, #4]
 80058de:	4606      	mov	r6, r0
 80058e0:	4660      	mov	r0, ip
 80058e2:	460f      	mov	r7, r1
 80058e4:	f7fa fe8c 	bl	8000600 <__aeabi_i2d>
 80058e8:	4bac      	ldr	r3, [pc, #688]	; (8005b9c <__ieee754_pow+0x7cc>)
 80058ea:	4423      	add	r3, r4
 80058ec:	ed93 7b00 	vldr	d7, [r3]
 80058f0:	4680      	mov	r8, r0
 80058f2:	4689      	mov	r9, r1
 80058f4:	4632      	mov	r2, r6
 80058f6:	463b      	mov	r3, r7
 80058f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005900:	f7fa fd32 	bl	8000368 <__adddf3>
 8005904:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005908:	f7fa fd2e 	bl	8000368 <__adddf3>
 800590c:	4642      	mov	r2, r8
 800590e:	464b      	mov	r3, r9
 8005910:	f7fa fd2a 	bl	8000368 <__adddf3>
 8005914:	9802      	ldr	r0, [sp, #8]
 8005916:	4642      	mov	r2, r8
 8005918:	464b      	mov	r3, r9
 800591a:	4604      	mov	r4, r0
 800591c:	460d      	mov	r5, r1
 800591e:	f7fa fd21 	bl	8000364 <__aeabi_dsub>
 8005922:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005926:	f7fa fd1d 	bl	8000364 <__aeabi_dsub>
 800592a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800592e:	f7fa fd19 	bl	8000364 <__aeabi_dsub>
 8005932:	4602      	mov	r2, r0
 8005934:	460b      	mov	r3, r1
 8005936:	4630      	mov	r0, r6
 8005938:	4639      	mov	r1, r7
 800593a:	f7fa fd13 	bl	8000364 <__aeabi_dsub>
 800593e:	f10a 3cff 	add.w	ip, sl, #4294967295
 8005942:	ea5c 0c0b 	orrs.w	ip, ip, fp
 8005946:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800594a:	f040 81b6 	bne.w	8005cba <__ieee754_pow+0x8ea>
 800594e:	ed9f 7b7e 	vldr	d7, [pc, #504]	; 8005b48 <__ieee754_pow+0x778>
 8005952:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005956:	ec5b ab19 	vmov	sl, fp, d9
 800595a:	f04f 0a00 	mov.w	sl, #0
 800595e:	4652      	mov	r2, sl
 8005960:	465b      	mov	r3, fp
 8005962:	ec51 0b19 	vmov	r0, r1, d9
 8005966:	f7fa fcfd 	bl	8000364 <__aeabi_dsub>
 800596a:	462b      	mov	r3, r5
 800596c:	4622      	mov	r2, r4
 800596e:	f7fa fead 	bl	80006cc <__aeabi_dmul>
 8005972:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005976:	4680      	mov	r8, r0
 8005978:	4689      	mov	r9, r1
 800597a:	ec51 0b19 	vmov	r0, r1, d9
 800597e:	f7fa fea5 	bl	80006cc <__aeabi_dmul>
 8005982:	4602      	mov	r2, r0
 8005984:	460b      	mov	r3, r1
 8005986:	4640      	mov	r0, r8
 8005988:	4649      	mov	r1, r9
 800598a:	f7fa fced 	bl	8000368 <__adddf3>
 800598e:	462b      	mov	r3, r5
 8005990:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005994:	4622      	mov	r2, r4
 8005996:	4650      	mov	r0, sl
 8005998:	4659      	mov	r1, fp
 800599a:	f7fa fe97 	bl	80006cc <__aeabi_dmul>
 800599e:	4606      	mov	r6, r0
 80059a0:	460f      	mov	r7, r1
 80059a2:	463b      	mov	r3, r7
 80059a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059a8:	4632      	mov	r2, r6
 80059aa:	f7fa fcdd 	bl	8000368 <__adddf3>
 80059ae:	4b7c      	ldr	r3, [pc, #496]	; (8005ba0 <__ieee754_pow+0x7d0>)
 80059b0:	4299      	cmp	r1, r3
 80059b2:	4680      	mov	r8, r0
 80059b4:	4689      	mov	r9, r1
 80059b6:	460d      	mov	r5, r1
 80059b8:	f340 8150 	ble.w	8005c5c <__ieee754_pow+0x88c>
 80059bc:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80059c0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80059c4:	4303      	orrs	r3, r0
 80059c6:	f040 81ff 	bne.w	8005dc8 <__ieee754_pow+0x9f8>
 80059ca:	a361      	add	r3, pc, #388	; (adr r3, 8005b50 <__ieee754_pow+0x780>)
 80059cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059d4:	f7fa fcc8 	bl	8000368 <__adddf3>
 80059d8:	4632      	mov	r2, r6
 80059da:	4682      	mov	sl, r0
 80059dc:	468b      	mov	fp, r1
 80059de:	463b      	mov	r3, r7
 80059e0:	4640      	mov	r0, r8
 80059e2:	4649      	mov	r1, r9
 80059e4:	f7fa fcbe 	bl	8000364 <__aeabi_dsub>
 80059e8:	4602      	mov	r2, r0
 80059ea:	460b      	mov	r3, r1
 80059ec:	4650      	mov	r0, sl
 80059ee:	4659      	mov	r1, fp
 80059f0:	f7fb f94c 	bl	8000c8c <__aeabi_dcmpgt>
 80059f4:	2800      	cmp	r0, #0
 80059f6:	f040 81e7 	bne.w	8005dc8 <__ieee754_pow+0x9f8>
 80059fa:	46cc      	mov	ip, r9
 80059fc:	ea4f 532c 	mov.w	r3, ip, asr #20
 8005a00:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005a04:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005a08:	4118      	asrs	r0, r3
 8005a0a:	4428      	add	r0, r5
 8005a0c:	f3c0 510a 	ubfx	r1, r0, #20, #11
 8005a10:	f8df e198 	ldr.w	lr, [pc, #408]	; 8005bac <__ieee754_pow+0x7dc>
 8005a14:	f2a1 34ff 	subw	r4, r1, #1023	; 0x3ff
 8005a18:	fa4e fe04 	asr.w	lr, lr, r4
 8005a1c:	f5c1 6182 	rsb	r1, r1, #1040	; 0x410
 8005a20:	f3c0 0413 	ubfx	r4, r0, #0, #20
 8005a24:	ea20 030e 	bic.w	r3, r0, lr
 8005a28:	3103      	adds	r1, #3
 8005a2a:	f444 1080 	orr.w	r0, r4, #1048576	; 0x100000
 8005a2e:	fa40 f101 	asr.w	r1, r0, r1
 8005a32:	2d00      	cmp	r5, #0
 8005a34:	9106      	str	r1, [sp, #24]
 8005a36:	bfbc      	itt	lt
 8005a38:	4249      	neglt	r1, r1
 8005a3a:	9106      	strlt	r1, [sp, #24]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	4630      	mov	r0, r6
 8005a40:	4639      	mov	r1, r7
 8005a42:	f7fa fc8f 	bl	8000364 <__aeabi_dsub>
 8005a46:	4606      	mov	r6, r0
 8005a48:	460f      	mov	r7, r1
 8005a4a:	4632      	mov	r2, r6
 8005a4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a50:	463b      	mov	r3, r7
 8005a52:	f7fa fc89 	bl	8000368 <__adddf3>
 8005a56:	9c06      	ldr	r4, [sp, #24]
 8005a58:	0524      	lsls	r4, r4, #20
 8005a5a:	940b      	str	r4, [sp, #44]	; 0x2c
 8005a5c:	2400      	movs	r4, #0
 8005a5e:	a33e      	add	r3, pc, #248	; (adr r3, 8005b58 <__ieee754_pow+0x788>)
 8005a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a64:	4620      	mov	r0, r4
 8005a66:	460d      	mov	r5, r1
 8005a68:	f7fa fe30 	bl	80006cc <__aeabi_dmul>
 8005a6c:	4632      	mov	r2, r6
 8005a6e:	4680      	mov	r8, r0
 8005a70:	4689      	mov	r9, r1
 8005a72:	463b      	mov	r3, r7
 8005a74:	4620      	mov	r0, r4
 8005a76:	4629      	mov	r1, r5
 8005a78:	f7fa fc74 	bl	8000364 <__aeabi_dsub>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	460b      	mov	r3, r1
 8005a80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a84:	f7fa fc6e 	bl	8000364 <__aeabi_dsub>
 8005a88:	a335      	add	r3, pc, #212	; (adr r3, 8005b60 <__ieee754_pow+0x790>)
 8005a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8e:	f7fa fe1d 	bl	80006cc <__aeabi_dmul>
 8005a92:	a335      	add	r3, pc, #212	; (adr r3, 8005b68 <__ieee754_pow+0x798>)
 8005a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a98:	4606      	mov	r6, r0
 8005a9a:	460f      	mov	r7, r1
 8005a9c:	4620      	mov	r0, r4
 8005a9e:	4629      	mov	r1, r5
 8005aa0:	f7fa fe14 	bl	80006cc <__aeabi_dmul>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	4630      	mov	r0, r6
 8005aaa:	4639      	mov	r1, r7
 8005aac:	f7fa fc5c 	bl	8000368 <__adddf3>
 8005ab0:	4606      	mov	r6, r0
 8005ab2:	460f      	mov	r7, r1
 8005ab4:	4632      	mov	r2, r6
 8005ab6:	463b      	mov	r3, r7
 8005ab8:	4640      	mov	r0, r8
 8005aba:	4649      	mov	r1, r9
 8005abc:	f7fa fc54 	bl	8000368 <__adddf3>
 8005ac0:	4642      	mov	r2, r8
 8005ac2:	464b      	mov	r3, r9
 8005ac4:	4604      	mov	r4, r0
 8005ac6:	460d      	mov	r5, r1
 8005ac8:	f7fa fc4c 	bl	8000364 <__aeabi_dsub>
 8005acc:	4602      	mov	r2, r0
 8005ace:	460b      	mov	r3, r1
 8005ad0:	4630      	mov	r0, r6
 8005ad2:	4639      	mov	r1, r7
 8005ad4:	f7fa fc46 	bl	8000364 <__aeabi_dsub>
 8005ad8:	4622      	mov	r2, r4
 8005ada:	4682      	mov	sl, r0
 8005adc:	468b      	mov	fp, r1
 8005ade:	4620      	mov	r0, r4
 8005ae0:	462b      	mov	r3, r5
 8005ae2:	4629      	mov	r1, r5
 8005ae4:	f7fa fdf2 	bl	80006cc <__aeabi_dmul>
 8005ae8:	a321      	add	r3, pc, #132	; (adr r3, 8005b70 <__ieee754_pow+0x7a0>)
 8005aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aee:	4606      	mov	r6, r0
 8005af0:	460f      	mov	r7, r1
 8005af2:	f7fa fdeb 	bl	80006cc <__aeabi_dmul>
 8005af6:	a320      	add	r3, pc, #128	; (adr r3, 8005b78 <__ieee754_pow+0x7a8>)
 8005af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afc:	f7fa fc32 	bl	8000364 <__aeabi_dsub>
 8005b00:	4632      	mov	r2, r6
 8005b02:	463b      	mov	r3, r7
 8005b04:	f7fa fde2 	bl	80006cc <__aeabi_dmul>
 8005b08:	a31d      	add	r3, pc, #116	; (adr r3, 8005b80 <__ieee754_pow+0x7b0>)
 8005b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0e:	f7fa fc2b 	bl	8000368 <__adddf3>
 8005b12:	4632      	mov	r2, r6
 8005b14:	463b      	mov	r3, r7
 8005b16:	f7fa fdd9 	bl	80006cc <__aeabi_dmul>
 8005b1a:	a31b      	add	r3, pc, #108	; (adr r3, 8005b88 <__ieee754_pow+0x7b8>)
 8005b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b20:	f7fa fc20 	bl	8000364 <__aeabi_dsub>
 8005b24:	4632      	mov	r2, r6
 8005b26:	463b      	mov	r3, r7
 8005b28:	f7fa fdd0 	bl	80006cc <__aeabi_dmul>
 8005b2c:	a318      	add	r3, pc, #96	; (adr r3, 8005b90 <__ieee754_pow+0x7c0>)
 8005b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b32:	f7fa fc19 	bl	8000368 <__adddf3>
 8005b36:	4632      	mov	r2, r6
 8005b38:	463b      	mov	r3, r7
 8005b3a:	f7fa fdc7 	bl	80006cc <__aeabi_dmul>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	460b      	mov	r3, r1
 8005b42:	4620      	mov	r0, r4
 8005b44:	e034      	b.n	8005bb0 <__ieee754_pow+0x7e0>
 8005b46:	bf00      	nop
 8005b48:	00000000 	.word	0x00000000
 8005b4c:	bff00000 	.word	0xbff00000
 8005b50:	652b82fe 	.word	0x652b82fe
 8005b54:	3c971547 	.word	0x3c971547
 8005b58:	00000000 	.word	0x00000000
 8005b5c:	3fe62e43 	.word	0x3fe62e43
 8005b60:	fefa39ef 	.word	0xfefa39ef
 8005b64:	3fe62e42 	.word	0x3fe62e42
 8005b68:	0ca86c39 	.word	0x0ca86c39
 8005b6c:	be205c61 	.word	0xbe205c61
 8005b70:	72bea4d0 	.word	0x72bea4d0
 8005b74:	3e663769 	.word	0x3e663769
 8005b78:	c5d26bf1 	.word	0xc5d26bf1
 8005b7c:	3ebbbd41 	.word	0x3ebbbd41
 8005b80:	af25de2c 	.word	0xaf25de2c
 8005b84:	3f11566a 	.word	0x3f11566a
 8005b88:	16bebd93 	.word	0x16bebd93
 8005b8c:	3f66c16c 	.word	0x3f66c16c
 8005b90:	5555553e 	.word	0x5555553e
 8005b94:	3fc55555 	.word	0x3fc55555
 8005b98:	08006658 	.word	0x08006658
 8005b9c:	08006648 	.word	0x08006648
 8005ba0:	408fffff 	.word	0x408fffff
 8005ba4:	dc3a03fd 	.word	0xdc3a03fd
 8005ba8:	3feec709 	.word	0x3feec709
 8005bac:	000fffff 	.word	0x000fffff
 8005bb0:	4629      	mov	r1, r5
 8005bb2:	f7fa fbd7 	bl	8000364 <__aeabi_dsub>
 8005bb6:	4606      	mov	r6, r0
 8005bb8:	460f      	mov	r7, r1
 8005bba:	4632      	mov	r2, r6
 8005bbc:	463b      	mov	r3, r7
 8005bbe:	4620      	mov	r0, r4
 8005bc0:	4629      	mov	r1, r5
 8005bc2:	f7fa fd83 	bl	80006cc <__aeabi_dmul>
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	4680      	mov	r8, r0
 8005bca:	4689      	mov	r9, r1
 8005bcc:	4630      	mov	r0, r6
 8005bce:	4639      	mov	r1, r7
 8005bd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005bd4:	f7fa fbc6 	bl	8000364 <__aeabi_dsub>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	460b      	mov	r3, r1
 8005bdc:	4640      	mov	r0, r8
 8005bde:	4649      	mov	r1, r9
 8005be0:	f7fa fe9e 	bl	8000920 <__aeabi_ddiv>
 8005be4:	4652      	mov	r2, sl
 8005be6:	4606      	mov	r6, r0
 8005be8:	460f      	mov	r7, r1
 8005bea:	4620      	mov	r0, r4
 8005bec:	465b      	mov	r3, fp
 8005bee:	4629      	mov	r1, r5
 8005bf0:	f7fa fd6c 	bl	80006cc <__aeabi_dmul>
 8005bf4:	4652      	mov	r2, sl
 8005bf6:	465b      	mov	r3, fp
 8005bf8:	f7fa fbb6 	bl	8000368 <__adddf3>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	460b      	mov	r3, r1
 8005c00:	4630      	mov	r0, r6
 8005c02:	4639      	mov	r1, r7
 8005c04:	f7fa fbae 	bl	8000364 <__aeabi_dsub>
 8005c08:	4622      	mov	r2, r4
 8005c0a:	462b      	mov	r3, r5
 8005c0c:	f7fa fbaa 	bl	8000364 <__aeabi_dsub>
 8005c10:	4602      	mov	r2, r0
 8005c12:	460b      	mov	r3, r1
 8005c14:	2000      	movs	r0, #0
 8005c16:	49a2      	ldr	r1, [pc, #648]	; (8005ea0 <__ieee754_pow+0xad0>)
 8005c18:	f7fa fba4 	bl	8000364 <__aeabi_dsub>
 8005c1c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005c1e:	460b      	mov	r3, r1
 8005c20:	4421      	add	r1, r4
 8005c22:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005c26:	4602      	mov	r2, r0
 8005c28:	f2c0 8109 	blt.w	8005e3e <__ieee754_pow+0xa6e>
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c32:	f7fa fd4b 	bl	80006cc <__aeabi_dmul>
 8005c36:	ec41 0b10 	vmov	d0, r0, r1
 8005c3a:	e415      	b.n	8005468 <__ieee754_pow+0x98>
 8005c3c:	2d00      	cmp	r5, #0
 8005c3e:	f6ff ac60 	blt.w	8005502 <__ieee754_pow+0x132>
 8005c42:	ed9f 0b87 	vldr	d0, [pc, #540]	; 8005e60 <__ieee754_pow+0xa90>
 8005c46:	e40f      	b.n	8005468 <__ieee754_pow+0x98>
 8005c48:	ec51 0b18 	vmov	r0, r1, d8
 8005c4c:	ee18 2a10 	vmov	r2, s16
 8005c50:	460b      	mov	r3, r1
 8005c52:	f7fa fd3b 	bl	80006cc <__aeabi_dmul>
 8005c56:	ec41 0b10 	vmov	d0, r0, r1
 8005c5a:	e405      	b.n	8005468 <__ieee754_pow+0x98>
 8005c5c:	4b91      	ldr	r3, [pc, #580]	; (8005ea4 <__ieee754_pow+0xad4>)
 8005c5e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8005c62:	459c      	cmp	ip, r3
 8005c64:	f340 80dd 	ble.w	8005e22 <__ieee754_pow+0xa52>
 8005c68:	f101 537d 	add.w	r3, r1, #1061158912	; 0x3f400000
 8005c6c:	f503 133c 	add.w	r3, r3, #3080192	; 0x2f0000
 8005c70:	f503 5350 	add.w	r3, r3, #13312	; 0x3400
 8005c74:	4303      	orrs	r3, r0
 8005c76:	d110      	bne.n	8005c9a <__ieee754_pow+0x8ca>
 8005c78:	4632      	mov	r2, r6
 8005c7a:	463b      	mov	r3, r7
 8005c7c:	f8cd c004 	str.w	ip, [sp, #4]
 8005c80:	f7fa fb70 	bl	8000364 <__aeabi_dsub>
 8005c84:	4602      	mov	r2, r0
 8005c86:	460b      	mov	r3, r1
 8005c88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c8c:	f7fa ffea 	bl	8000c64 <__aeabi_dcmple>
 8005c90:	f8dd c004 	ldr.w	ip, [sp, #4]
 8005c94:	2800      	cmp	r0, #0
 8005c96:	f43f aeb1 	beq.w	80059fc <__ieee754_pow+0x62c>
 8005c9a:	a373      	add	r3, pc, #460	; (adr r3, 8005e68 <__ieee754_pow+0xa98>)
 8005c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ca4:	f7fa fd12 	bl	80006cc <__aeabi_dmul>
 8005ca8:	a36f      	add	r3, pc, #444	; (adr r3, 8005e68 <__ieee754_pow+0xa98>)
 8005caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cae:	f7fa fd0d 	bl	80006cc <__aeabi_dmul>
 8005cb2:	ec41 0b10 	vmov	d0, r0, r1
 8005cb6:	f7ff bbd7 	b.w	8005468 <__ieee754_pow+0x98>
 8005cba:	ed9f 7b6d 	vldr	d7, [pc, #436]	; 8005e70 <__ieee754_pow+0xaa0>
 8005cbe:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005cc2:	e648      	b.n	8005956 <__ieee754_pow+0x586>
 8005cc4:	2d00      	cmp	r5, #0
 8005cc6:	dabc      	bge.n	8005c42 <__ieee754_pow+0x872>
 8005cc8:	ee19 4a90 	vmov	r4, s19
 8005ccc:	ee19 2a10 	vmov	r2, s18
 8005cd0:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 8005cd4:	ec43 2b10 	vmov	d0, r2, r3
 8005cd8:	f7ff bbc6 	b.w	8005468 <__ieee754_pow+0x98>
 8005cdc:	ec53 2b10 	vmov	r2, r3, d0
 8005ce0:	2000      	movs	r0, #0
 8005ce2:	496f      	ldr	r1, [pc, #444]	; (8005ea0 <__ieee754_pow+0xad0>)
 8005ce4:	f7fa fe1c 	bl	8000920 <__aeabi_ddiv>
 8005ce8:	ec41 0b10 	vmov	d0, r0, r1
 8005cec:	f7ff bbdd 	b.w	80054aa <__ieee754_pow+0xda>
 8005cf0:	4b6d      	ldr	r3, [pc, #436]	; (8005ea8 <__ieee754_pow+0xad8>)
 8005cf2:	4599      	cmp	r9, r3
 8005cf4:	dda2      	ble.n	8005c3c <__ieee754_pow+0x86c>
 8005cf6:	4b6a      	ldr	r3, [pc, #424]	; (8005ea0 <__ieee754_pow+0xad0>)
 8005cf8:	4599      	cmp	r9, r3
 8005cfa:	f73f abff 	bgt.w	80054fc <__ieee754_pow+0x12c>
 8005cfe:	ec51 0b10 	vmov	r0, r1, d0
 8005d02:	2200      	movs	r2, #0
 8005d04:	4b66      	ldr	r3, [pc, #408]	; (8005ea0 <__ieee754_pow+0xad0>)
 8005d06:	f7fa fb2d 	bl	8000364 <__aeabi_dsub>
 8005d0a:	a35b      	add	r3, pc, #364	; (adr r3, 8005e78 <__ieee754_pow+0xaa8>)
 8005d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d10:	4604      	mov	r4, r0
 8005d12:	460d      	mov	r5, r1
 8005d14:	f7fa fcda 	bl	80006cc <__aeabi_dmul>
 8005d18:	a359      	add	r3, pc, #356	; (adr r3, 8005e80 <__ieee754_pow+0xab0>)
 8005d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1e:	4680      	mov	r8, r0
 8005d20:	4689      	mov	r9, r1
 8005d22:	4620      	mov	r0, r4
 8005d24:	4629      	mov	r1, r5
 8005d26:	f7fa fcd1 	bl	80006cc <__aeabi_dmul>
 8005d2a:	4622      	mov	r2, r4
 8005d2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d30:	462b      	mov	r3, r5
 8005d32:	4620      	mov	r0, r4
 8005d34:	4629      	mov	r1, r5
 8005d36:	f7fa fcc9 	bl	80006cc <__aeabi_dmul>
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	4606      	mov	r6, r0
 8005d3e:	460f      	mov	r7, r1
 8005d40:	4620      	mov	r0, r4
 8005d42:	4629      	mov	r1, r5
 8005d44:	4b59      	ldr	r3, [pc, #356]	; (8005eac <__ieee754_pow+0xadc>)
 8005d46:	f7fa fcc1 	bl	80006cc <__aeabi_dmul>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	a14e      	add	r1, pc, #312	; (adr r1, 8005e88 <__ieee754_pow+0xab8>)
 8005d50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d54:	f7fa fb06 	bl	8000364 <__aeabi_dsub>
 8005d58:	4622      	mov	r2, r4
 8005d5a:	462b      	mov	r3, r5
 8005d5c:	f7fa fcb6 	bl	80006cc <__aeabi_dmul>
 8005d60:	4602      	mov	r2, r0
 8005d62:	460b      	mov	r3, r1
 8005d64:	2000      	movs	r0, #0
 8005d66:	4952      	ldr	r1, [pc, #328]	; (8005eb0 <__ieee754_pow+0xae0>)
 8005d68:	f7fa fafc 	bl	8000364 <__aeabi_dsub>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	460b      	mov	r3, r1
 8005d70:	4630      	mov	r0, r6
 8005d72:	4639      	mov	r1, r7
 8005d74:	f7fa fcaa 	bl	80006cc <__aeabi_dmul>
 8005d78:	a345      	add	r3, pc, #276	; (adr r3, 8005e90 <__ieee754_pow+0xac0>)
 8005d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7e:	f7fa fca5 	bl	80006cc <__aeabi_dmul>
 8005d82:	4602      	mov	r2, r0
 8005d84:	460b      	mov	r3, r1
 8005d86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d8a:	f7fa faeb 	bl	8000364 <__aeabi_dsub>
 8005d8e:	4606      	mov	r6, r0
 8005d90:	460f      	mov	r7, r1
 8005d92:	4632      	mov	r2, r6
 8005d94:	463b      	mov	r3, r7
 8005d96:	4640      	mov	r0, r8
 8005d98:	4649      	mov	r1, r9
 8005d9a:	f7fa fae5 	bl	8000368 <__adddf3>
 8005d9e:	2000      	movs	r0, #0
 8005da0:	4604      	mov	r4, r0
 8005da2:	460d      	mov	r5, r1
 8005da4:	4642      	mov	r2, r8
 8005da6:	464b      	mov	r3, r9
 8005da8:	e5c1      	b.n	800592e <__ieee754_pow+0x55e>
 8005daa:	2700      	movs	r7, #0
 8005dac:	463b      	mov	r3, r7
 8005dae:	e437      	b.n	8005620 <__ieee754_pow+0x250>
 8005db0:	2200      	movs	r2, #0
 8005db2:	e41b      	b.n	80055ec <__ieee754_pow+0x21c>
 8005db4:	2000      	movs	r0, #0
 8005db6:	493a      	ldr	r1, [pc, #232]	; (8005ea0 <__ieee754_pow+0xad0>)
 8005db8:	ec53 2b18 	vmov	r2, r3, d8
 8005dbc:	f7fa fdb0 	bl	8000920 <__aeabi_ddiv>
 8005dc0:	ec41 0b10 	vmov	d0, r0, r1
 8005dc4:	f7ff bb50 	b.w	8005468 <__ieee754_pow+0x98>
 8005dc8:	a333      	add	r3, pc, #204	; (adr r3, 8005e98 <__ieee754_pow+0xac8>)
 8005dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005dd2:	f7fa fc7b 	bl	80006cc <__aeabi_dmul>
 8005dd6:	a330      	add	r3, pc, #192	; (adr r3, 8005e98 <__ieee754_pow+0xac8>)
 8005dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ddc:	f7fa fc76 	bl	80006cc <__aeabi_dmul>
 8005de0:	ec41 0b10 	vmov	d0, r0, r1
 8005de4:	f7ff bb40 	b.w	8005468 <__ieee754_pow+0x98>
 8005de8:	f1ba 0f01 	cmp.w	sl, #1
 8005dec:	f47f ab3c 	bne.w	8005468 <__ieee754_pow+0x98>
 8005df0:	ee10 1a90 	vmov	r1, s1
 8005df4:	ee10 2a10 	vmov	r2, s0
 8005df8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005dfc:	ec43 2b10 	vmov	d0, r2, r3
 8005e00:	f7ff bb32 	b.w	8005468 <__ieee754_pow+0x98>
 8005e04:	2c00      	cmp	r4, #0
 8005e06:	f47f ab3c 	bne.w	8005482 <__ieee754_pow+0xb2>
 8005e0a:	f5c3 6382 	rsb	r3, r3, #1040	; 0x410
 8005e0e:	3303      	adds	r3, #3
 8005e10:	fa48 f203 	asr.w	r2, r8, r3
 8005e14:	fa02 f303 	lsl.w	r3, r2, r3
 8005e18:	4543      	cmp	r3, r8
 8005e1a:	d018      	beq.n	8005e4e <__ieee754_pow+0xa7e>
 8005e1c:	46a2      	mov	sl, r4
 8005e1e:	f7ff bb02 	b.w	8005426 <__ieee754_pow+0x56>
 8005e22:	4b23      	ldr	r3, [pc, #140]	; (8005eb0 <__ieee754_pow+0xae0>)
 8005e24:	459c      	cmp	ip, r3
 8005e26:	f73f ade9 	bgt.w	80059fc <__ieee754_pow+0x62c>
 8005e2a:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8005e2e:	f8cd a018 	str.w	sl, [sp, #24]
 8005e32:	e613      	b.n	8005a5c <__ieee754_pow+0x68c>
 8005e34:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 8005e38:	2301      	movs	r3, #1
 8005e3a:	f7ff bbf1 	b.w	8005620 <__ieee754_pow+0x250>
 8005e3e:	ec43 2b10 	vmov	d0, r2, r3
 8005e42:	9806      	ldr	r0, [sp, #24]
 8005e44:	f000 f9dc 	bl	8006200 <scalbn>
 8005e48:	ec53 2b10 	vmov	r2, r3, d0
 8005e4c:	e6ef      	b.n	8005c2e <__ieee754_pow+0x85e>
 8005e4e:	f002 0201 	and.w	r2, r2, #1
 8005e52:	f1c2 0a02 	rsb	sl, r2, #2
 8005e56:	f7ff bae6 	b.w	8005426 <__ieee754_pow+0x56>
 8005e5a:	bf00      	nop
 8005e5c:	f3af 8000 	nop.w
	...
 8005e68:	c2f8f359 	.word	0xc2f8f359
 8005e6c:	01a56e1f 	.word	0x01a56e1f
 8005e70:	00000000 	.word	0x00000000
 8005e74:	3ff00000 	.word	0x3ff00000
 8005e78:	60000000 	.word	0x60000000
 8005e7c:	3ff71547 	.word	0x3ff71547
 8005e80:	f85ddf44 	.word	0xf85ddf44
 8005e84:	3e54ae0b 	.word	0x3e54ae0b
 8005e88:	55555555 	.word	0x55555555
 8005e8c:	3fd55555 	.word	0x3fd55555
 8005e90:	652b82fe 	.word	0x652b82fe
 8005e94:	3ff71547 	.word	0x3ff71547
 8005e98:	8800759c 	.word	0x8800759c
 8005e9c:	7e37e43c 	.word	0x7e37e43c
 8005ea0:	3ff00000 	.word	0x3ff00000
 8005ea4:	4090cbff 	.word	0x4090cbff
 8005ea8:	3feffffe 	.word	0x3feffffe
 8005eac:	3fd00000 	.word	0x3fd00000
 8005eb0:	3fe00000 	.word	0x3fe00000
 8005eb4:	f3af 8000 	nop.w

08005eb8 <__ieee754_sqrt>:
 8005eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ebc:	ec53 2b10 	vmov	r2, r3, d0
 8005ec0:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8005ec4:	0d24      	lsrs	r4, r4, #20
 8005ec6:	4d61      	ldr	r5, [pc, #388]	; (800604c <__ieee754_sqrt+0x194>)
 8005ec8:	0524      	lsls	r4, r4, #20
 8005eca:	42ac      	cmp	r4, r5
 8005ecc:	ed2d 8b02 	vpush	{d8}
 8005ed0:	eeb0 8a40 	vmov.f32	s16, s0
 8005ed4:	eef0 8a60 	vmov.f32	s17, s1
 8005ed8:	4619      	mov	r1, r3
 8005eda:	ee10 0a10 	vmov	r0, s0
 8005ede:	f000 8094 	beq.w	800600a <__ieee754_sqrt+0x152>
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	dd74      	ble.n	8005fd0 <__ieee754_sqrt+0x118>
 8005ee6:	151f      	asrs	r7, r3, #20
 8005ee8:	d07d      	beq.n	8005fe6 <__ieee754_sqrt+0x12e>
 8005eea:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
 8005eee:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005ef2:	07fa      	lsls	r2, r7, #31
 8005ef4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005ef8:	d45f      	bmi.n	8005fba <__ieee754_sqrt+0x102>
 8005efa:	0fc3      	lsrs	r3, r0, #31
 8005efc:	f04f 0c00 	mov.w	ip, #0
 8005f00:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8005f04:	0042      	lsls	r2, r0, #1
 8005f06:	107f      	asrs	r7, r7, #1
 8005f08:	4665      	mov	r5, ip
 8005f0a:	2016      	movs	r0, #22
 8005f0c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f10:	186c      	adds	r4, r5, r1
 8005f12:	429c      	cmp	r4, r3
 8005f14:	ea4f 76d2 	mov.w	r6, r2, lsr #31
 8005f18:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005f1c:	dc02      	bgt.n	8005f24 <__ieee754_sqrt+0x6c>
 8005f1e:	1b1b      	subs	r3, r3, r4
 8005f20:	1865      	adds	r5, r4, r1
 8005f22:	448c      	add	ip, r1
 8005f24:	3801      	subs	r0, #1
 8005f26:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8005f2a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005f2e:	d1ef      	bne.n	8005f10 <__ieee754_sqrt+0x58>
 8005f30:	4680      	mov	r8, r0
 8005f32:	2620      	movs	r6, #32
 8005f34:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005f38:	e009      	b.n	8005f4e <__ieee754_sqrt+0x96>
 8005f3a:	d023      	beq.n	8005f84 <__ieee754_sqrt+0xcc>
 8005f3c:	0fd4      	lsrs	r4, r2, #31
 8005f3e:	3e01      	subs	r6, #1
 8005f40:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005f44:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8005f48:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005f4c:	d01e      	beq.n	8005f8c <__ieee754_sqrt+0xd4>
 8005f4e:	42ab      	cmp	r3, r5
 8005f50:	eb01 0408 	add.w	r4, r1, r8
 8005f54:	ddf1      	ble.n	8005f3a <__ieee754_sqrt+0x82>
 8005f56:	f004 4900 	and.w	r9, r4, #2147483648	; 0x80000000
 8005f5a:	f1b9 4f00 	cmp.w	r9, #2147483648	; 0x80000000
 8005f5e:	eb04 0801 	add.w	r8, r4, r1
 8005f62:	d009      	beq.n	8005f78 <__ieee754_sqrt+0xc0>
 8005f64:	46a9      	mov	r9, r5
 8005f66:	1b5b      	subs	r3, r3, r5
 8005f68:	4294      	cmp	r4, r2
 8005f6a:	bf88      	it	hi
 8005f6c:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8005f70:	1b12      	subs	r2, r2, r4
 8005f72:	4408      	add	r0, r1
 8005f74:	464d      	mov	r5, r9
 8005f76:	e7e1      	b.n	8005f3c <__ieee754_sqrt+0x84>
 8005f78:	f1b8 0f00 	cmp.w	r8, #0
 8005f7c:	dbf2      	blt.n	8005f64 <__ieee754_sqrt+0xac>
 8005f7e:	f105 0901 	add.w	r9, r5, #1
 8005f82:	e7f0      	b.n	8005f66 <__ieee754_sqrt+0xae>
 8005f84:	4294      	cmp	r4, r2
 8005f86:	d9e6      	bls.n	8005f56 <__ieee754_sqrt+0x9e>
 8005f88:	461d      	mov	r5, r3
 8005f8a:	e7d7      	b.n	8005f3c <__ieee754_sqrt+0x84>
 8005f8c:	431a      	orrs	r2, r3
 8005f8e:	d119      	bne.n	8005fc4 <__ieee754_sqrt+0x10c>
 8005f90:	0846      	lsrs	r6, r0, #1
 8005f92:	ea4f 016c 	mov.w	r1, ip, asr #1
 8005f96:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
 8005f9a:	f01c 0f01 	tst.w	ip, #1
 8005f9e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8005fa2:	bf18      	it	ne
 8005fa4:	f046 4600 	orrne.w	r6, r6, #2147483648	; 0x80000000
 8005fa8:	eb01 5307 	add.w	r3, r1, r7, lsl #20
 8005fac:	4632      	mov	r2, r6
 8005fae:	ec43 2b10 	vmov	d0, r2, r3
 8005fb2:	ecbd 8b02 	vpop	{d8}
 8005fb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fba:	0fc3      	lsrs	r3, r0, #31
 8005fbc:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8005fc0:	0040      	lsls	r0, r0, #1
 8005fc2:	e79a      	b.n	8005efa <__ieee754_sqrt+0x42>
 8005fc4:	1c43      	adds	r3, r0, #1
 8005fc6:	d02e      	beq.n	8006026 <__ieee754_sqrt+0x16e>
 8005fc8:	f000 0301 	and.w	r3, r0, #1
 8005fcc:	4418      	add	r0, r3
 8005fce:	e7df      	b.n	8005f90 <__ieee754_sqrt+0xd8>
 8005fd0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005fd4:	4311      	orrs	r1, r2
 8005fd6:	d0ec      	beq.n	8005fb2 <__ieee754_sqrt+0xfa>
 8005fd8:	bb63      	cbnz	r3, 8006034 <__ieee754_sqrt+0x17c>
 8005fda:	461f      	mov	r7, r3
 8005fdc:	0ac1      	lsrs	r1, r0, #11
 8005fde:	3f15      	subs	r7, #21
 8005fe0:	0540      	lsls	r0, r0, #21
 8005fe2:	2900      	cmp	r1, #0
 8005fe4:	d0fa      	beq.n	8005fdc <__ieee754_sqrt+0x124>
 8005fe6:	f411 1380 	ands.w	r3, r1, #1048576	; 0x100000
 8005fea:	d11f      	bne.n	800602c <__ieee754_sqrt+0x174>
 8005fec:	0049      	lsls	r1, r1, #1
 8005fee:	02cc      	lsls	r4, r1, #11
 8005ff0:	f103 0301 	add.w	r3, r3, #1
 8005ff4:	d5fa      	bpl.n	8005fec <__ieee754_sqrt+0x134>
 8005ff6:	f1c3 0201 	rsb	r2, r3, #1
 8005ffa:	f1c3 0420 	rsb	r4, r3, #32
 8005ffe:	fa20 f404 	lsr.w	r4, r0, r4
 8006002:	4321      	orrs	r1, r4
 8006004:	4417      	add	r7, r2
 8006006:	4098      	lsls	r0, r3
 8006008:	e76f      	b.n	8005eea <__ieee754_sqrt+0x32>
 800600a:	ec51 0b10 	vmov	r0, r1, d0
 800600e:	f7fa fb5d 	bl	80006cc <__aeabi_dmul>
 8006012:	ec53 2b18 	vmov	r2, r3, d8
 8006016:	f7fa f9a7 	bl	8000368 <__adddf3>
 800601a:	ecbd 8b02 	vpop	{d8}
 800601e:	ec41 0b10 	vmov	d0, r0, r1
 8006022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006026:	f10c 0c01 	add.w	ip, ip, #1
 800602a:	e7b2      	b.n	8005f92 <__ieee754_sqrt+0xda>
 800602c:	2420      	movs	r4, #32
 800602e:	2201      	movs	r2, #1
 8006030:	2300      	movs	r3, #0
 8006032:	e7e4      	b.n	8005ffe <__ieee754_sqrt+0x146>
 8006034:	ec51 0b10 	vmov	r0, r1, d0
 8006038:	460b      	mov	r3, r1
 800603a:	f7fa f993 	bl	8000364 <__aeabi_dsub>
 800603e:	4602      	mov	r2, r0
 8006040:	460b      	mov	r3, r1
 8006042:	f7fa fc6d 	bl	8000920 <__aeabi_ddiv>
 8006046:	ec41 0b10 	vmov	d0, r0, r1
 800604a:	e7b2      	b.n	8005fb2 <__ieee754_sqrt+0xfa>
 800604c:	7ff00000 	.word	0x7ff00000

08006050 <fabs>:
 8006050:	ec51 0b10 	vmov	r0, r1, d0
 8006054:	ec53 2b10 	vmov	r2, r3, d0
 8006058:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800605c:	ec43 2b10 	vmov	d0, r2, r3
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop

08006064 <finite>:
 8006064:	ec53 2b10 	vmov	r2, r3, d0
 8006068:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800606c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006070:	0fc0      	lsrs	r0, r0, #31
 8006072:	4770      	bx	lr

08006074 <__fpclassifyd>:
 8006074:	ec53 2b10 	vmov	r2, r3, d0
 8006078:	f033 4100 	bics.w	r1, r3, #2147483648	; 0x80000000
 800607c:	b410      	push	{r4}
 800607e:	d008      	beq.n	8006092 <__fpclassifyd+0x1e>
 8006080:	480f      	ldr	r0, [pc, #60]	; (80060c0 <__fpclassifyd+0x4c>)
 8006082:	f5a1 1480 	sub.w	r4, r1, #1048576	; 0x100000
 8006086:	4284      	cmp	r4, r0
 8006088:	d80a      	bhi.n	80060a0 <__fpclassifyd+0x2c>
 800608a:	2004      	movs	r0, #4
 800608c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	2a00      	cmp	r2, #0
 8006094:	bf0c      	ite	eq
 8006096:	2002      	moveq	r0, #2
 8006098:	2003      	movne	r0, #3
 800609a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800609e:	4770      	bx	lr
 80060a0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80060a4:	d201      	bcs.n	80060aa <__fpclassifyd+0x36>
 80060a6:	2003      	movs	r0, #3
 80060a8:	e7f7      	b.n	800609a <__fpclassifyd+0x26>
 80060aa:	4806      	ldr	r0, [pc, #24]	; (80060c4 <__fpclassifyd+0x50>)
 80060ac:	4281      	cmp	r1, r0
 80060ae:	d001      	beq.n	80060b4 <__fpclassifyd+0x40>
 80060b0:	2000      	movs	r0, #0
 80060b2:	e7f2      	b.n	800609a <__fpclassifyd+0x26>
 80060b4:	f1d2 0001 	rsbs	r0, r2, #1
 80060b8:	bf38      	it	cc
 80060ba:	2000      	movcc	r0, #0
 80060bc:	e7ed      	b.n	800609a <__fpclassifyd+0x26>
 80060be:	bf00      	nop
 80060c0:	7fdfffff 	.word	0x7fdfffff
 80060c4:	7ff00000 	.word	0x7ff00000

080060c8 <matherr>:
 80060c8:	2000      	movs	r0, #0
 80060ca:	4770      	bx	lr
 80060cc:	0000      	movs	r0, r0
	...

080060d0 <nan>:
 80060d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80060d8 <nan+0x8>
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	00000000 	.word	0x00000000
 80060dc:	7ff80000 	.word	0x7ff80000

080060e0 <rint>:
 80060e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060e2:	ec53 2b10 	vmov	r2, r3, d0
 80060e6:	f3c3 500a 	ubfx	r0, r3, #20, #11
 80060ea:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 80060ee:	2913      	cmp	r1, #19
 80060f0:	b083      	sub	sp, #12
 80060f2:	469c      	mov	ip, r3
 80060f4:	ee10 7a10 	vmov	r7, s0
 80060f8:	ea4f 76d3 	mov.w	r6, r3, lsr #31
 80060fc:	dc31      	bgt.n	8006162 <rint+0x82>
 80060fe:	2900      	cmp	r1, #0
 8006100:	db4f      	blt.n	80061a2 <rint+0xc2>
 8006102:	483d      	ldr	r0, [pc, #244]	; (80061f8 <rint+0x118>)
 8006104:	4108      	asrs	r0, r1
 8006106:	ea00 0403 	and.w	r4, r0, r3
 800610a:	4314      	orrs	r4, r2
 800610c:	d027      	beq.n	800615e <rint+0x7e>
 800610e:	0840      	lsrs	r0, r0, #1
 8006110:	ea00 0703 	and.w	r7, r0, r3
 8006114:	4317      	orrs	r7, r2
 8006116:	d00c      	beq.n	8006132 <rint+0x52>
 8006118:	f44f 2c80 	mov.w	ip, #262144	; 0x40000
 800611c:	2913      	cmp	r1, #19
 800611e:	ea23 0000 	bic.w	r0, r3, r0
 8006122:	fa4c f101 	asr.w	r1, ip, r1
 8006126:	ea40 0c01 	orr.w	ip, r0, r1
 800612a:	bf14      	ite	ne
 800612c:	2700      	movne	r7, #0
 800612e:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 8006132:	4b32      	ldr	r3, [pc, #200]	; (80061fc <rint+0x11c>)
 8006134:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006138:	463c      	mov	r4, r7
 800613a:	e9d6 6700 	ldrd	r6, r7, [r6]
 800613e:	4663      	mov	r3, ip
 8006140:	4622      	mov	r2, r4
 8006142:	4630      	mov	r0, r6
 8006144:	4639      	mov	r1, r7
 8006146:	f7fa f90f 	bl	8000368 <__adddf3>
 800614a:	e9cd 0100 	strd	r0, r1, [sp]
 800614e:	4632      	mov	r2, r6
 8006150:	463b      	mov	r3, r7
 8006152:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006156:	f7fa f905 	bl	8000364 <__aeabi_dsub>
 800615a:	ec41 0b10 	vmov	d0, r0, r1
 800615e:	b003      	add	sp, #12
 8006160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006162:	2933      	cmp	r1, #51	; 0x33
 8006164:	dd0a      	ble.n	800617c <rint+0x9c>
 8006166:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800616a:	d1f8      	bne.n	800615e <rint+0x7e>
 800616c:	ec51 0b10 	vmov	r0, r1, d0
 8006170:	460b      	mov	r3, r1
 8006172:	f7fa f8f9 	bl	8000368 <__adddf3>
 8006176:	ec41 0b10 	vmov	d0, r0, r1
 800617a:	e7f0      	b.n	800615e <rint+0x7e>
 800617c:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 8006180:	f04f 31ff 	mov.w	r1, #4294967295
 8006184:	40c1      	lsrs	r1, r0
 8006186:	4211      	tst	r1, r2
 8006188:	d0e9      	beq.n	800615e <rint+0x7e>
 800618a:	0849      	lsrs	r1, r1, #1
 800618c:	4211      	tst	r1, r2
 800618e:	d0d0      	beq.n	8006132 <rint+0x52>
 8006190:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 8006194:	ea22 0101 	bic.w	r1, r2, r1
 8006198:	fa47 f000 	asr.w	r0, r7, r0
 800619c:	ea41 0700 	orr.w	r7, r1, r0
 80061a0:	e7c7      	b.n	8006132 <rint+0x52>
 80061a2:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80061a6:	4311      	orrs	r1, r2
 80061a8:	d0d9      	beq.n	800615e <rint+0x7e>
 80061aa:	f3c3 0113 	ubfx	r1, r3, #0, #20
 80061ae:	430a      	orrs	r2, r1
 80061b0:	4254      	negs	r4, r2
 80061b2:	4314      	orrs	r4, r2
 80061b4:	4811      	ldr	r0, [pc, #68]	; (80061fc <rint+0x11c>)
 80061b6:	0c59      	lsrs	r1, r3, #17
 80061b8:	0b24      	lsrs	r4, r4, #12
 80061ba:	0449      	lsls	r1, r1, #17
 80061bc:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80061c0:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 80061c4:	ec53 2b10 	vmov	r2, r3, d0
 80061c8:	ea44 0301 	orr.w	r3, r4, r1
 80061cc:	e9d0 4500 	ldrd	r4, r5, [r0]
 80061d0:	4620      	mov	r0, r4
 80061d2:	4629      	mov	r1, r5
 80061d4:	f7fa f8c8 	bl	8000368 <__adddf3>
 80061d8:	e9cd 0100 	strd	r0, r1, [sp]
 80061dc:	462b      	mov	r3, r5
 80061de:	4622      	mov	r2, r4
 80061e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80061e4:	f7fa f8be 	bl	8000364 <__aeabi_dsub>
 80061e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80061ec:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 80061f0:	ec41 0b10 	vmov	d0, r0, r1
 80061f4:	e7b3      	b.n	800615e <rint+0x7e>
 80061f6:	bf00      	nop
 80061f8:	000fffff 	.word	0x000fffff
 80061fc:	08006678 	.word	0x08006678

08006200 <scalbn>:
 8006200:	b538      	push	{r3, r4, r5, lr}
 8006202:	ec53 2b10 	vmov	r2, r3, d0
 8006206:	f3c3 510a 	ubfx	r1, r3, #20, #11
 800620a:	4605      	mov	r5, r0
 800620c:	4618      	mov	r0, r3
 800620e:	2900      	cmp	r1, #0
 8006210:	d13a      	bne.n	8006288 <scalbn+0x88>
 8006212:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006216:	4313      	orrs	r3, r2
 8006218:	d035      	beq.n	8006286 <scalbn+0x86>
 800621a:	ec51 0b10 	vmov	r0, r1, d0
 800621e:	4b3c      	ldr	r3, [pc, #240]	; (8006310 <scalbn+0x110>)
 8006220:	4c3c      	ldr	r4, [pc, #240]	; (8006314 <scalbn+0x114>)
 8006222:	2200      	movs	r2, #0
 8006224:	f7fa fa52 	bl	80006cc <__aeabi_dmul>
 8006228:	42a5      	cmp	r5, r4
 800622a:	ec41 0b10 	vmov	d0, r0, r1
 800622e:	460b      	mov	r3, r1
 8006230:	db51      	blt.n	80062d6 <scalbn+0xd6>
 8006232:	f3c3 510a 	ubfx	r1, r3, #20, #11
 8006236:	3936      	subs	r1, #54	; 0x36
 8006238:	4618      	mov	r0, r3
 800623a:	194c      	adds	r4, r1, r5
 800623c:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8006240:	429c      	cmp	r4, r3
 8006242:	dd2a      	ble.n	800629a <scalbn+0x9a>
 8006244:	eeb0 1a40 	vmov.f32	s2, s0
 8006248:	eef0 1a60 	vmov.f32	s3, s1
 800624c:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 8006300 <scalbn+0x100>
 8006250:	f000 f866 	bl	8006320 <copysign>
 8006254:	a32a      	add	r3, pc, #168	; (adr r3, 8006300 <scalbn+0x100>)
 8006256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625a:	ec51 0b10 	vmov	r0, r1, d0
 800625e:	f7fa fa35 	bl	80006cc <__aeabi_dmul>
 8006262:	ec41 0b10 	vmov	d0, r0, r1
 8006266:	bd38      	pop	{r3, r4, r5, pc}
 8006268:	f020 43ff 	bic.w	r3, r0, #2139095040	; 0x7f800000
 800626c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006270:	3436      	adds	r4, #54	; 0x36
 8006272:	ec51 0b10 	vmov	r0, r1, d0
 8006276:	2200      	movs	r2, #0
 8006278:	ea43 5104 	orr.w	r1, r3, r4, lsl #20
 800627c:	4b26      	ldr	r3, [pc, #152]	; (8006318 <scalbn+0x118>)
 800627e:	f7fa fa25 	bl	80006cc <__aeabi_dmul>
 8006282:	ec41 0b10 	vmov	d0, r0, r1
 8006286:	bd38      	pop	{r3, r4, r5, pc}
 8006288:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800628c:	4299      	cmp	r1, r3
 800628e:	d02a      	beq.n	80062e6 <scalbn+0xe6>
 8006290:	194c      	adds	r4, r1, r5
 8006292:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8006296:	429c      	cmp	r4, r3
 8006298:	dcd4      	bgt.n	8006244 <scalbn+0x44>
 800629a:	2c00      	cmp	r4, #0
 800629c:	dd0a      	ble.n	80062b4 <scalbn+0xb4>
 800629e:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 80062a2:	ec53 2b10 	vmov	r2, r3, d0
 80062a6:	f420 00e0 	bic.w	r0, r0, #7340032	; 0x700000
 80062aa:	ea40 5304 	orr.w	r3, r0, r4, lsl #20
 80062ae:	ec43 2b10 	vmov	d0, r2, r3
 80062b2:	bd38      	pop	{r3, r4, r5, pc}
 80062b4:	f114 0f35 	cmn.w	r4, #53	; 0x35
 80062b8:	dad6      	bge.n	8006268 <scalbn+0x68>
 80062ba:	eeb0 1a40 	vmov.f32	s2, s0
 80062be:	eef0 1a60 	vmov.f32	s3, s1
 80062c2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80062c6:	429d      	cmp	r5, r3
 80062c8:	dcc0      	bgt.n	800624c <scalbn+0x4c>
 80062ca:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8006308 <scalbn+0x108>
 80062ce:	f000 f827 	bl	8006320 <copysign>
 80062d2:	ec51 0b10 	vmov	r0, r1, d0
 80062d6:	a30c      	add	r3, pc, #48	; (adr r3, 8006308 <scalbn+0x108>)
 80062d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062dc:	f7fa f9f6 	bl	80006cc <__aeabi_dmul>
 80062e0:	ec41 0b10 	vmov	d0, r0, r1
 80062e4:	bd38      	pop	{r3, r4, r5, pc}
 80062e6:	ec51 0b10 	vmov	r0, r1, d0
 80062ea:	ee10 2a10 	vmov	r2, s0
 80062ee:	460b      	mov	r3, r1
 80062f0:	f7fa f83a 	bl	8000368 <__adddf3>
 80062f4:	ec41 0b10 	vmov	d0, r0, r1
 80062f8:	bd38      	pop	{r3, r4, r5, pc}
 80062fa:	bf00      	nop
 80062fc:	f3af 8000 	nop.w
 8006300:	8800759c 	.word	0x8800759c
 8006304:	7e37e43c 	.word	0x7e37e43c
 8006308:	c2f8f359 	.word	0xc2f8f359
 800630c:	01a56e1f 	.word	0x01a56e1f
 8006310:	43500000 	.word	0x43500000
 8006314:	ffff3cb0 	.word	0xffff3cb0
 8006318:	3c900000 	.word	0x3c900000
 800631c:	f3af 8000 	nop.w

08006320 <copysign>:
 8006320:	b430      	push	{r4, r5}
 8006322:	ec51 0b11 	vmov	r0, r1, d1
 8006326:	ec55 4b10 	vmov	r4, r5, d0
 800632a:	ec53 2b10 	vmov	r2, r3, d0
 800632e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8006332:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006336:	ea41 0300 	orr.w	r3, r1, r0
 800633a:	ec43 2b10 	vmov	d0, r2, r3
 800633e:	bc30      	pop	{r4, r5}
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop

08006344 <__errno>:
 8006344:	4b01      	ldr	r3, [pc, #4]	; (800634c <__errno+0x8>)
 8006346:	6818      	ldr	r0, [r3, #0]
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	20000c48 	.word	0x20000c48
